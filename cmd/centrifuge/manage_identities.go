package main

import (
	"io/ioutil"

	"github.com/centrifuge/go-centrifuge/bootstrap"
	"github.com/centrifuge/go-centrifuge/config"

	"github.com/centrifuge/go-centrifuge/identity/ethid"

	"github.com/centrifuge/go-centrifuge/cmd"
	"github.com/centrifuge/go-centrifuge/identity"
	"github.com/spf13/cobra"
)

var centIDString string
var purpose string

var createIdentityCmd = &cobra.Command{
	Use:   "createidentity",
	Short: "creates identity with signing key as p2p id against ethereum",
	Long:  "",
	Run: func(cm *cobra.Command, args []string) {
		//cm requires a config file
		cfgFile = ensureConfigFile()
		ctx, canc, _ := cmd.CommandBootstrap(cfgFile)
		var centID identity.CentID
		var err error
		if centIDString == "" {
			centID = identity.RandomCentID()
		} else {
			centID, err = identity.CentIDFromString(centIDString)
			if err != nil {
				panic(err)
			}
		}

		idService := ctx[ethid.BootstrappedIDService].(identity.Service)
		_, confirmations, err := idService.CreateIdentity(centID)
		if err != nil {
			panic(err)
		}
		watchIdentity := <-confirmations
		log.Infof("Identity created [%s]", watchIdentity.Identity.CentID().String())
		// We need a way to return the identity created so it can be read by an automated process as well
		// when id autogenerated
		id := []byte("{\"id\": \"" + centID.String() + "\"}")
		err = ioutil.WriteFile("newidentity.json", id, 0644)
		if err != nil {
			panic(err)
		}
		log.Infof("Identity created [%s]", watchIdentity.Identity.CentID())
		canc()
	},
}

//We should support multiple types of keys to add, at the moment only keyPurpose 1 - PeerID/Signature/Encryption
var addKeyCmd = &cobra.Command{
	Use:   "addkey",
	Short: "add a signing key as p2p id against ethereum",
	Long:  "add a signing key as p2p id against ethereum",
	Run: func(cm *cobra.Command, args []string) {
		//cm requires a config file
		cfgFile = ensureConfigFile()
		ctx, canc, _ := cmd.CommandBootstrap(cfgFile)
		var purposeInt int

		switch purpose {
		case "p2p":
			purposeInt = identity.KeyPurposeP2P
		case "sign":
			purposeInt = identity.KeyPurposeSigning
		case "ethauth":
			purposeInt = identity.KeyPurposeEthMsgAuth
		default:
			panic("Option not supported")
		}

		cfg := ctx[bootstrap.BootstrappedConfig].(config.Configuration)
		idService := ctx[ethid.BootstrappedIDService].(identity.Service)
		err := idService.AddKeyFromConfig(cfg, purposeInt)
		if err != nil {
			panic(err)
		}

		canc()
		return
	},
}

func init() {
	createIdentityCmd.Flags().StringVarP(&centIDString, "centrifugeid", "i", "", "Centrifuge ID")
	addKeyCmd.Flags().StringVarP(&centIDString, "centrifugeid", "i", "", "Centrifuge ID")
	addKeyCmd.Flags().StringVarP(&purpose, "purpose", "p", "", "Key Purpose [p2p|sign|ethauth]")
	rootCmd.AddCommand(createIdentityCmd)
	rootCmd.AddCommand(addKeyCmd)
}
