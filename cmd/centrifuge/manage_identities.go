package main

import (
	"context"
	"io/ioutil"

	"github.com/centrifuge/go-centrifuge/config/configstore"
	"github.com/centrifuge/go-centrifuge/contextutil"

	"github.com/centrifuge/go-centrifuge/bootstrap"
	"github.com/centrifuge/go-centrifuge/config"

	"github.com/centrifuge/go-centrifuge/cmd"
	"github.com/centrifuge/go-centrifuge/identity"
	"github.com/spf13/cobra"
)

var createIdentityCmd = &cobra.Command{
	Use:   "createidentity",
	Short: "creates identity with signing key as p2p id against ethereum",
	Long:  "",
	Run: func(cm *cobra.Command, args []string) {
		//cm requires a config file
		cfgFile = ensureConfigFile()
		ctx, canc, _ := cmd.CommandBootstrap(cfgFile)
		var err error

		cfg := ctx[bootstrap.BootstrappedConfig].(config.Configuration)
		tc, err := configstore.TempAccount(cfg.GetEthereumDefaultAccountName(), cfg)
		if err != nil {
			panic(err)
		}

		tctx, err := contextutil.New(context.Background(), tc)
		if err != nil {
			panic(err)
		}

		idService := ctx[identity.BootstrappedDIDFactory].(identity.Factory)
		did, err := idService.CreateIdentity(tctx)
		if err != nil {
			panic(err)
		}
		log.Infof("Identity created [%s]", did.String())
		// We need a way to return the identity created so it can be read by an automated process as well
		// when id autogenerated
		id := []byte("{\"id\": \"" + did.String() + "\"}")
		err = ioutil.WriteFile("newidentity.json", id, 0644)
		if err != nil {
			panic(err)
		}
		log.Infof("Identity created [%s]", did.String())
		canc()
	},
}

func init() {
	rootCmd.AddCommand(createIdentityCmd)
}
