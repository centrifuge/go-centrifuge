// Code generated by go-bindata.
// sources:
// files/0JobKeyToHex.go
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrationFiles0jobkeytohexGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x4f\x4b\x03\x41\x0c\xc5\xcf\x9b\x4f\x11\xe7\xb4\x2b\x76\xb7\x67\xa1\x17\xf1\xa2\x28\x88\x57\xf1\xb0\x7f\x32\xe9\xd0\xd9\xc9\x92\x99\x29\x2e\xd2\xef\x2e\x53\x5a\xd1\x53\xc8\x2f\xc9\x7b\x8f\x2c\xfd\x78\xe8\x99\xd0\x3a\x4f\x11\xc0\xcd\x8b\x68\xc2\x1a\x2a\x2f\xcc\x2e\x30\x1a\x76\x69\x9f\x87\x76\x94\xb9\x73\x8b\x8d\x1d\xcb\xc6\x0b\x1b\xa8\xfe\x4e\xe2\x1a\xa6\xa4\x1d\x8b\xa7\x23\xf9\x69\xe8\x2e\xd5\x40\x03\x70\xec\x15\xbd\x30\xee\xf0\x22\xda\xbe\x08\x33\x69\x6d\x66\xc7\xda\x27\xda\x9c\xdd\x4d\x03\xd0\x75\xf8\x9e\xc3\xeb\x19\x3b\x09\x5b\x7c\x96\x01\x0f\xb4\x62\x12\xdc\xd3\x17\xd8\x1c\xc6\xff\x1b\xf5\x34\xe0\xed\xc5\xad\x7d\x7c\x68\x90\x54\x45\xf1\x1b\x2a\x52\xc5\xfb\x1d\x4e\x43\xfb\x96\x53\xfd\xf1\x39\xac\x89\x6a\xb3\x90\xba\x51\x4c\x73\x87\x57\x12\xfb\x79\xf1\x54\x48\x70\xbe\x81\xca\xd9\xa2\x81\x37\xbb\xd2\x17\xa1\x4a\x29\x65\x0d\x85\x42\x75\x3a\xbf\xa6\x7d\x0a\x56\x6c\x6d\x7e\x73\xe0\xb6\xc4\xc2\x98\xc7\x91\x62\xb4\xd9\xfb\xd5\x34\x70\xbd\x0c\xce\xc3\x09\x7e\x02\x00\x00\xff\xff\xe5\x58\xd5\xc5\x6c\x01\x00\x00")

func migrationFiles0jobkeytohexGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationFiles0jobkeytohexGo,
		"migration/files/0JobKeyToHex.go",
	)
}

func migrationFiles0jobkeytohexGo() (*asset, error) {
	bytes, err := migrationFiles0jobkeytohexGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/files/0JobKeyToHex.go", size: 364, mode: os.FileMode(420), modTime: time.Unix(1558459453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/files/0JobKeyToHex.go": migrationFiles0jobkeytohexGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"files": &bintree{nil, map[string]*bintree{
			"0JobKeyToHex.go": &bintree{migrationFiles0jobkeytohexGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
