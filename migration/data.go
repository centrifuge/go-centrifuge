// Code generated by go-bindata.
// sources:
// files/0InitialMigration.go
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrationFiles0initialmigrationGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x4d\x8f\xd3\x30\x10\x86\xcf\x99\x5f\x31\xf8\x94\x20\x9a\xf4\x8c\xd4\x03\x88\x0b\x88\x4a\x88\x2b\xe2\xe0\x24\x93\xc9\xa8\xce\x38\xf8\xa3\x10\xa1\xfe\xf7\x95\xb3\xed\x6a\xf7\x64\xf9\x19\xfb\xf1\xfb\x7a\xb5\xc3\xc5\x32\xe1\x24\x8e\x22\x40\xd7\xe1\x27\xdd\x70\x98\xad\x32\x45\x4c\x1e\xd3\x2c\x71\x9f\x62\xa0\x3f\x59\xc2\x33\x65\x52\x0a\x36\x11\x5a\xb6\xa2\xc8\x1e\x47\x9b\x2c\xf6\xa2\xa3\x28\x47\xb4\x11\xe3\xec\xff\x2a\x8a\xe2\xd9\x5e\xa8\x08\x00\x64\x59\x7d\x48\x58\x43\xe5\x3c\xb3\x28\xa3\x61\x49\x73\xee\xdb\xc1\x2f\x9d\xac\x53\xec\xd8\x1f\x9c\x67\x03\xd5\xeb\x49\xdc\x74\x4c\xa1\x63\xef\xe8\x4a\x6e\xec\xbb\xfb\x6a\xa0\x01\xb8\xda\x80\xce\x33\x9e\xf0\x2e\x6d\xbf\x7b\x66\x0a\xb5\x59\x84\x4b\xc6\xc3\xde\xcd\x34\x7b\xbb\x9f\x59\xcf\x3b\x16\xaf\x47\xfc\xe6\x7b\xbc\xd0\x56\x1a\xcd\xf4\x0f\xa6\xac\xc3\xdb\x13\xf5\xd8\xe3\xfb\xfb\x6b\xed\x97\xcf\x0d\x52\x08\x3e\xe0\x7f\xa8\x28\x04\xfc\x78\xc2\xb1\x6f\x7f\xe4\x54\xff\xfa\xdd\x6f\x89\x6a\x13\xed\xb2\x3a\x32\xcd\x07\x7c\x90\xab\x75\x79\x07\x2a\xae\x81\x4a\xa6\xa2\xc0\x77\xa7\xb2\x2f\x9e\x2a\x50\xca\x41\x0b\x85\xea\xb6\xff\x4c\xfb\x55\x27\x3f\xd5\xe6\x25\x06\x1e\x4b\x2a\x8c\x79\x18\x28\xc6\x29\x3b\xb7\x99\x06\x1e\x37\x55\x1c\xdc\xe0\x29\x00\x00\xff\xff\x39\xdc\xe1\x18\xc9\x01\x00\x00")

func migrationFiles0initialmigrationGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationFiles0initialmigrationGo,
		"migration/files/0InitialMigration.go",
	)
}

func migrationFiles0initialmigrationGo() (*asset, error) {
	bytes, err := migrationFiles0initialmigrationGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/files/0InitialMigration.go", size: 457, mode: os.FileMode(420), modTime: time.Unix(1558471843, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/files/0InitialMigration.go": migrationFiles0initialmigrationGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"files": &bintree{nil, map[string]*bintree{
			"0InitialMigration.go": &bintree{migrationFiles0initialmigrationGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
