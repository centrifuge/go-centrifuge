// Code generated by go-bindata.
// sources:
// files/0_job_key_to_hex.go
// files/1_something_else.go
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrationFiles0_job_key_to_hexGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x4f\x4b\xc4\x40\x0c\xc5\xcf\xcd\xa7\x88\x73\x6a\xc5\x6d\xf7\x2c\xec\x45\xbc\x28\x0a\xe2\x55\x3c\xf4\x4f\x26\x3b\xec\x74\x52\x32\x33\x8b\x45\xf6\xbb\x4b\x4b\x15\x3d\x7a\x0a\xf9\xe5\xf1\xde\x23\x53\xdb\x9f\x5a\x26\xb4\xce\x53\x04\x70\xe3\x24\x9a\xb0\x84\xc2\x0b\xb3\x0b\x8c\x86\x5d\x3a\xe6\xae\xee\x65\x6c\xdc\x64\x63\xc3\xb2\xf3\xc2\x06\x8a\xdf\x97\x38\x87\x21\x69\xc3\xe2\xe9\x4c\x7e\xe8\x9a\x6d\x1a\xa8\x00\xce\xad\xa2\x17\xc6\x03\x6e\xa6\xf5\x93\x30\x93\x96\x66\x74\xac\x6d\xa2\xdd\x9a\x6e\x2a\x80\xa6\xc1\xd7\x1c\x9e\x57\xec\x24\xec\xf1\x51\x3a\x3c\xd1\x8c\x49\xf0\x48\x1f\x60\x73\xe8\xff\x2a\xca\xa1\xc3\xeb\x2d\xad\xbe\xbf\xab\x90\x54\x45\xf1\x13\x0a\x52\xc5\xdb\x03\x0e\x5d\xfd\x92\x53\xf9\xf6\xde\xcd\x89\x4a\x33\x91\xba\x5e\x4c\x75\x83\xdf\x24\xb6\xe3\xe4\x69\x21\xc1\xf9\x0a\x0a\x67\x17\x0f\xbc\x3a\x2c\xfb\x62\x54\x28\xa5\xac\x61\xa1\x50\x5c\xd6\xd7\xd4\x0f\xc1\x8a\x2d\xcd\x4f\x0f\xdc\x2f\xb5\x30\xe6\xbe\xa7\x18\x6d\xf6\x7e\x36\xd5\xbf\xa4\x5b\x48\x70\x1e\x2e\x00\x5f\x01\x00\x00\xff\xff\x01\xd4\x01\x6f\x98\x01\x00\x00")

func migrationFiles0_job_key_to_hexGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationFiles0_job_key_to_hexGo,
		"migration/files/0_job_key_to_hex.go",
	)
}

func migrationFiles0_job_key_to_hexGo() (*asset, error) {
	bytes, err := migrationFiles0_job_key_to_hexGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/files/0_job_key_to_hex.go", size: 408, mode: os.FileMode(420), modTime: time.Unix(1558397352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrationFiles1_something_elseGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x4f\x3d\x4b\x04\x31\x10\xad\x33\xbf\x62\x4c\x95\x15\xdd\x70\xad\x70\x8d\x68\xa9\x88\x96\x62\x91\xdd\xcc\xe6\x82\xd9\xcc\x31\xc9\x2a\x87\xdc\x7f\x97\xe8\xb9\x78\xd5\xe3\x25\xef\x6b\xf6\x6e\x7c\x77\x81\x70\x8a\x89\x0a\x40\x9c\xf7\x2c\x15\x0d\x28\x1d\x62\xdd\x2d\x43\x3f\xf2\x6c\x03\x5f\x93\x08\x4b\xb1\xbf\xa0\xcf\xbf\xcb\x21\xfb\x2a\x36\x70\xa2\x0f\x4a\x7e\xb0\x27\xd4\xd0\x01\x58\x8b\xcf\x4b\x7e\x88\x41\x5c\x8d\x9c\x37\x58\x78\xa6\xba\x8b\x39\x20\xa5\x42\x30\x2d\x79\x3c\x57\x18\x3f\xe0\xe5\x29\xa2\xbf\xbb\xed\xf0\xa7\x14\xbf\x40\x91\x08\xde\x6c\xd1\x0f\xfd\xd3\x52\xcd\xeb\xdb\x70\xa8\x64\xb4\x77\x73\xd6\xdd\x15\xfe\x71\x97\xb8\x36\x9e\x63\xea\x40\xc5\xa9\xf9\xf1\x62\xdb\x78\x0b\x51\x42\x75\x91\xdc\x5e\x41\x1d\x41\x25\x0e\xfd\x7d\x6b\x98\x8c\x5e\x47\xe0\xa6\x6d\xc2\xc9\xc5\x44\x5e\x77\xf0\xcf\xc4\x52\xfa\x47\xfa\x34\xfa\x65\x3d\x64\x95\x1d\xe1\x3b\x00\x00\xff\xff\x1c\x08\xef\x5e\x50\x01\x00\x00")

func migrationFiles1_something_elseGoBytes() ([]byte, error) {
	return bindataRead(
		_migrationFiles1_something_elseGo,
		"migration/files/1_something_else.go",
	)
}

func migrationFiles1_something_elseGo() (*asset, error) {
	bytes, err := migrationFiles1_something_elseGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/files/1_something_else.go", size: 336, mode: os.FileMode(420), modTime: time.Unix(1558099445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/files/0_job_key_to_hex.go": migrationFiles0_job_key_to_hexGo,
	"migration/files/1_something_else.go": migrationFiles1_something_elseGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"files": &bintree{nil, map[string]*bintree{
			"0_job_key_to_hex.go": &bintree{migrationFiles0_job_key_to_hexGo, map[string]*bintree{}},
			"1_something_else.go": &bintree{migrationFiles1_something_elseGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

