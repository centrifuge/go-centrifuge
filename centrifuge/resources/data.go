// Code generated by go-bindata.
// sources:
// ../../resources/default_config.yaml
// ../../resources/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4b\x73\xeb\x34\x14\xc7\xf7\xfe\x14\x9a\xb0\xa6\xd1\xfb\xe1\x5d\x81\xc2\x5c\x28\x9d\x34\x94\x5b\xca\x4e\x8f\xe3\x44\x37\xb1\x94\x5a\x72\x9a\xdc\x4f\xcf\xb8\xb9\xa1\xc0\x4c\xc3\x9e\xc1\x2b\xcf\xf9\x4b\x7f\x4b\xe7\x77\x8e\x8f\x87\x54\x87\xd8\x8d\x2b\xb8\x83\xfa\x92\x87\x4d\x8b\xde\x42\xcb\xb1\x94\x68\xd3\x3a\x6e\xb7\x37\x75\xbd\x8c\x69\x03\xee\xd8\xa4\xd3\xc2\xd2\x36\x08\x7d\x85\x6e\xb3\xb7\x5b\x54\xa1\xd4\x98\x56\xc8\xe7\x54\x07\xeb\x2b\xb2\x21\x0c\x50\x0a\x14\x94\x00\x02\xaa\x19\x39\x40\x05\x2a\x7a\x89\x75\x8d\x20\xed\xd1\xde\x0e\xd1\xba\x2d\x94\xab\x06\x9d\xf7\x4f\x96\x08\xc5\xd0\x22\xc6\xd8\xeb\x3b\xd4\x35\x0c\x30\xf6\x5f\x4e\xf7\x21\xb4\x48\x33\x7d\xd2\x5c\xce\xb5\xd4\xc1\xee\x16\x00\x43\x39\xed\x45\xe8\x6b\x34\x9b\xc7\x1d\x9f\x13\xaa\xae\xf0\x15\xbe\x22\xf3\xea\x77\x73\xa6\x29\xa6\xf3\xb8\xeb\xca\xfc\xbe\x7f\xb8\x3f\xb8\x97\xcd\xf8\xfb\xd3\xd3\x77\xdd\xf8\xf9\xc1\x1d\x6e\xae\x97\xf0\x70\xf7\xed\x6d\xfe\x7c\x3c\x0a\xa1\xf7\xf7\x69\xf5\x71\xbf\xf8\xf9\xd3\xed\xd3\x66\xf6\xaf\xb6\xec\x6c\xfb\xb1\x93\x37\x77\xb2\xdf\x3c\x3f\xc2\xa7\xc7\x9f\x1e\xe9\xf3\x62\x24\xf2\xb7\x5d\xf8\x81\x6d\x7e\xcc\xe4\x81\xf5\x6b\xbb\x5e\x7c\x23\x7e\x01\x91\xc8\xc9\xf6\x9c\xae\xeb\x73\xb6\xce\x97\x88\x01\x52\x8d\xf5\xf8\xbd\xf5\x35\x0f\xc7\x16\xcd\x66\xff\x50\x96\xb0\x8a\xa5\xfe\x4d\xb2\xc9\xaf\xf3\x70\x41\xd8\xe5\x12\xff\xb4\x6b\xd0\xbb\xa4\x3f\xa4\x0a\xab\xc1\xd6\x98\xd3\x1b\x11\x82\xc9\xff\x44\xfe\x4a\x04\x1f\x14\xa3\x8c\x38\x6e\x18\x96\xd6\x3b\x69\x1d\x56\xdc\x62\xc5\x94\xee\x98\x92\x9d\x37\x2e\x38\xaa\x88\xbc\xc0\x0e\x1f\x82\xd4\x5e\x62\xe5\x9c\xa7\x58\x63\x8c\xa5\x36\x8c\x70\x6c\x88\xb4\x52\x53\xd2\x05\x45\x98\xa3\x86\xbe\x4b\x19\x1f\x9c\x50\xa4\x03\x8e\x03\xd0\x20\x09\x18\xc1\x43\x67\xbc\xe5\x60\x24\xe9\xa4\xe1\x5a\x77\x84\x09\x8b\x2f\x42\xff\xd2\xde\x6f\xc0\x05\xf9\x0f\x30\x7d\xaf\x64\xf9\x3b\xb4\xd1\x05\xdc\x06\x07\x6a\xb8\x50\x04\x14\xd3\x9c\x4a\xa3\xac\x94\x4e\x59\x63\x2c\x36\x21\x48\xaf\x58\x60\x42\x86\x8b\xb8\x8d\x94\xd8\x63\x66\x02\x23\x84\x0b\x66\x3b\x1c\x84\xf6\x42\x4a\xa9\x28\x0b\xc6\xd3\xce\xaa\x20\xc1\x5f\xc0\xcd\x38\xb5\x8a\x3b\xa6\x69\x20\x26\x58\xc9\x8d\xd6\x8e\x29\x19\x30\x70\x2b\x85\x74\xca\x75\x56\x84\x70\xa1\xfd\xf1\x41\x75\x7a\x2a\x13\x6b\x34\x26\x34\xa8\xce\x0a\xe1\x35\x66\xce\x59\x4a\x25\x76\x3e\x00\x70\x27\x20\xcc\x9a\xe6\x79\x84\x11\x26\xf0\x69\xec\x1f\xf3\xb0\x99\xca\x00\xd1\xa6\x39\xa7\x75\x92\x02\x74\x76\xdc\xd6\x6b\xef\xf3\x98\xea\x9d\xed\xa1\x45\xb3\xde\xc6\x34\x1d\x22\xe5\x00\xbf\x2e\x6f\x5b\xf4\x52\xda\xf9\x7c\x3b\x4d\x8c\x75\x2e\xb5\x35\x82\xcb\x06\xa1\x95\x2d\x8b\x21\x7a\x98\xfe\x31\xe7\xe7\x14\xbe\x8d\x7d\xac\x2d\xe2\x8a\x50\xa6\x75\x73\x02\x06\x87\xfa\x68\x63\x7d\x88\x3d\xe4\xb1\xb6\x68\x26\x31\x2e\xd3\x67\x7a\x7b\x58\x42\x1d\xe2\x84\x91\xbe\x5a\xc4\x54\x61\xd8\xdb\xed\x14\x9e\xae\x4d\x5f\xd7\xd5\xc3\x22\xe7\xed\xb5\xf7\x50\xca\x4d\x9a\x66\x50\x68\x51\x1d\x46\x68\x9a\x3f\x02\x00\x00\xff\xff\xe4\x32\xba\x68\x0f\x07\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1807, mode: os.FileMode(420), modTime: time.Unix(1536947535, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4d\x6f\xfb\x36\x0c\xc6\xef\xfe\x14\x02\x2f\xbd\x24\xa9\xde\xdf\x6e\x1b\xb0\xc3\x30\xec\x30\x6c\x40\xcf\x94\x44\x35\x46\x62\xc7\x93\xed\xb6\x41\xd1\xef\x3e\x38\x4d\xb7\xeb\xfa\x07\x6c\x80\x24\xf4\x90\x0f\xa5\x1f\x2d\x47\x6a\xb4\x0e\xb1\x63\x0c\x73\xbe\xac\xe3\x32\x6f\x31\x63\x03\xf6\x63\x64\xb7\x90\xb1\x13\x5d\x23\x7b\x78\x07\x2c\xa5\xd1\x3c\x43\x04\x1f\x12\x47\x6f\x8d\x57\x59\x6b\xad\x31\xd7\xe2\x44\xd2\x56\x11\x2f\x2a\x1b\x83\x24\xb4\x90\x68\x60\x07\xb9\x5d\xa7\xe5\x02\xf1\x1d\x72\x3f\x1d\xa9\x41\x04\xa4\x79\x2f\xa4\xdf\xe7\xa5\x6d\x07\x6e\xe5\x85\xde\x16\x88\x90\x9d\x0b\xd5\x2b\x17\x8a\x73\xbc\x04\x99\x6b\x16\xa5\x14\x8d\xbe\x2a\x51\x0c\x72\x2c\xd9\x57\x89\x3c\x49\x14\x9a\x0b\xe5\x78\x51\x56\xf1\xaa\x7c\xe6\xd9\xe3\xbf\xfd\x26\x6c\x38\xcc\xdb\xd8\xfe\x05\x22\x28\x9b\x85\xf5\xe4\x54\xaa\xc1\xf3\x4a\xce\x24\xee\xa4\xab\x3e\x70\x74\x02\x0b\x7c\xec\xe0\x54\x2a\x44\x98\x6f\x86\xe1\x96\xfe\xd7\xa4\x9c\xce\x34\x42\x54\x72\x07\x23\x44\x69\xa5\xd0\x7a\x07\x13\x44\xb1\x83\x06\xd1\xef\x60\xc6\xf3\xb6\x40\x21\x91\x48\x58\x52\x39\x78\x11\xb4\x2e\x82\x32\xca\xe4\x93\x74\xa4\xc9\x12\x4f\x26\xd5\xa4\x55\x22\xae\x9c\x45\x53\xbc\xf7\xa1\xa2\x75\x01\xa5\x17\x52\x6e\x46\x06\xcc\xdb\x55\x64\x21\x7d\xf2\xc2\x18\x63\x12\x0a\xc2\xe2\x32\x52\xe0\x96\x93\xf7\x5a\x62\xcd\xe8\x95\xb1\x85\x5b\x6d\x4c\x2a\x01\x8d\x33\x32\xa1\xad\x39\xf3\x20\xa9\x6e\x9d\xfa\x02\x11\xb4\x21\x6e\x39\xda\x7d\x91\x48\x7b\xad\x92\xdf\x07\x29\xeb\x5e\x6b\x2f\x83\x0e\xa1\x28\x57\x60\x07\x2f\xd4\xe6\xfe\xb2\x2d\xf9\xf1\x70\x7f\xf8\x09\xe7\xf9\xf5\xd2\x4a\x64\x0f\x5f\xa5\x3b\x03\x91\xfd\x5f\x04\xba\xae\x2f\x34\x2e\xfd\x72\xfd\xb5\x44\xf6\xd3\x1f\xbf\xfc\xbc\xfd\x5d\xf7\xf7\x4a\x2b\x6d\xb0\x8d\xeb\xf0\x74\x69\x27\x6a\x73\x64\xa6\x63\xec\xf5\x96\x3c\x61\xbf\xfc\xd5\x0f\xf4\xfb\x9f\x91\x89\xae\x3b\xd1\xf5\x46\xe6\xdc\x3f\x8f\xfd\xf8\xfc\x09\xe9\xb4\xa6\x73\x9f\x7f\xdb\xe8\x3c\x1c\x1e\x3f\x3f\x7a\xc3\x61\x3a\xd3\x63\xa3\xf9\xb2\xb6\x4c\xf3\xe3\x26\xc1\x65\x6d\x24\x0e\xd3\x9a\x0e\x13\x0d\x9f\xe2\xd6\xbf\xe0\x42\xdf\x50\x9f\xe8\x7a\x57\xd3\x72\xc4\x75\x39\x7e\xc7\xc5\x5d\xf2\x23\x16\xbe\xa4\x5f\xf3\xff\x09\x00\x00\xff\xff\x46\xfc\x2d\x6e\xb6\x03\x00\x00")

func resourcesTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYaml,
		"resources/testing_config.yaml",
	)
}

func resourcesTesting_configYaml() (*asset, error) {
	bytes, err := resourcesTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/testing_config.yaml", size: 950, mode: os.FileMode(420), modTime: time.Unix(1536932002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_config.yaml": resourcesDefault_configYaml,
	"resources/testing_config.yaml": resourcesTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
		"testing_config.yaml": &bintree{resourcesTesting_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
