// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../resources/.default_config.yaml.swp
// ../../resources/default_config.yaml
package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYamlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xda\x3f\x93\xdb\xc4\x1b\x07\xf0\x6f\x6e\x7e\xbf\x0e\xd9\x0c\xa4\xa1\xc9\x2c\xa6\xb6\xf5\x5f\x96\xd4\x1d\x21\x64\x0e\x2e\x37\xbe\x8b\x39\x73\x50\xc0\x6a\x77\x65\x6f\x6c\x49\x8e\xb4\xba\xb3\x53\x90\x86\x8a\xbc\x00\x5e\x00\x0d\x25\x05\x1d\xff\x5e\x13\xbc\x00\x86\xf1\xd9\x0e\x43\x9a\x63\x28\xc8\x64\x78\x3e\x8d\xc6\xcf\xec\x7e\x77\xf7\xb1\x5d\x78\xbc\x99\x73\x7e\xf4\x80\xc5\x03\x07\x00\x5e\x07\x9e\x7d\x6b\x7d\x7a\xe7\x36\xf0\xbb\x07\x5c\xf2\x69\xcd\x4b\x83\x9b\x5c\x55\xf5\xbc\xd4\xab\x1b\xc7\x7d\xb1\x0b\xb4\x37\x13\x6c\x61\x37\xb5\xb0\xa7\xda\xcc\xda\x6c\x20\xaa\xc2\xbe\xab\x4a\x53\xeb\xbc\x9d\xaa\xa3\x52\xd8\xd3\xaa\x2f\x9e\x17\xec\x5a\x35\x55\x5b\x0b\xd5\xd8\x52\xe5\xbc\x5d\x98\xcf\x44\x55\xe6\x7a\x3a\x58\xf3\x62\x71\xe3\xc2\x84\xfc\xd7\xb5\x26\xef\xc7\x16\x7c\xcf\xbd\xfe\xaa\xbf\xd3\x7b\x9b\xbd\xf9\xc6\x47\x2f\x7b\x57\x84\x10\x42\x08\x21\x84\x90\x7f\x91\x59\xde\xc2\x53\x00\x07\xbb\xd7\x6f\xed\x9e\xb7\x5e\x78\x12\x42\x08\x21\x84\x10\x42\x08\x21\xe4\xd5\xc5\x25\xf0\xe5\x6b\xc0\xff\xac\xed\xff\xff\xfb\xdf\xff\xbf\x75\x81\x5f\xbb\xc0\x0f\x5d\xe0\xbb\x2e\xf0\x55\x17\x78\xda\x05\xe6\x5d\xe0\x76\x17\xf8\xa9\x03\xfc\xd8\x01\xbe\xe9\x00\xcf\x3a\xc0\xfd\x0e\x70\xd0\x01\x7e\xb1\x80\x9f\x2d\xe0\x7b\x0b\xf8\xda\x02\x6a\x0b\xf8\xdc\x02\x8e\x2d\xc0\xb1\x80\x3b\x16\xf0\x7f\x6b\xbb\xde\x81\xf5\x92\x0f\x4f\x08\x21\x84\x10\x42\x08\x79\x75\x31\xa6\x4b\xa3\xea\x4b\xbe\x38\x53\xa6\x5e\xa7\xac\xe7\x3a\x4e\xd1\xf4\xc0\x58\xc1\x57\x9b\x9a\x56\x4d\xca\x3c\xc7\x01\x63\xa2\x2a\x8d\x5a\x99\xc9\x3f\x9d\xc7\xb5\x19\xeb\x42\x55\xad\x49\x59\xcf\x77\xae\x47\x4f\x79\x73\xac\x0b\x6d\x52\x16\x0c\x5d\xcf\x8f\xe3\x6d\x6d\x54\x6b\xa1\x52\x16\x38\xce\x75\x42\x59\x49\x35\x51\xd9\xc3\x4a\xcc\x95\x49\xd9\x55\x93\xda\xf6\xa2\x12\x7c\x31\xab\x1a\x93\x26\x61\x10\x81\xb1\xdd\x3d\xe7\x43\x21\xaa\xb6\x34\x27\xbc\x50\x29\xeb\x15\x5c\x97\x3d\x28\x33\x53\xb5\x6a\x8b\x74\xb3\xf3\x0d\x5e\x8a\x59\x55\x9f\xa9\xa9\x6e\xb6\xdb\x77\x56\x59\x38\x74\x73\x15\x38\x52\x79\x32\x72\x55\x12\x06\x32\x4f\x04\x0f\x54\x12\xb9\x79\x94\x04\x71\x9c\xbb\x7e\xc8\x9d\xde\x2e\x42\x4b\x55\x1a\x6d\xd6\x7f\x09\xc9\x93\xc0\x1d\x0a\xa9\xa4\xeb\xfb\x19\x8f\xfd\x40\x06\x22\x97\x22\x52\x41\xe8\xc9\x4c\x7a\xb9\x08\xbd\x68\x18\xa8\x17\x43\xde\xe7\xc2\x54\xbb\x0c\x27\x8c\x13\x25\x83\xd8\xe3\x79\x2c\xa3\xd8\x49\x72\xc7\xf3\x72\xe1\xba\x9c\xfb\x49\x92\x8b\x98\xc7\xb1\x2f\x43\x6f\x9b\xb1\x69\x6e\xcd\x85\x39\x94\xb2\x56\x4d\xb3\xe9\xfa\x75\x7d\x7f\xe4\x13\x65\xae\xaa\x7a\x7e\x24\x53\x16\xec\x4f\xdf\x67\x3d\x5b\x2f\x03\xdb\xf5\x86\x03\x67\xe0\x0c\x5c\xdb\x88\xa5\xed\xc7\x9e\xe3\xdb\x7a\x99\x37\xf6\x69\x71\x9e\x47\xf7\x4e\xa2\x62\xfe\x78\xa2\x1e\x4d\x3e\x9c\x78\x8f\x47\xad\x1b\x7d\xbc\x94\xf7\xfd\xf9\x07\x95\x3b\xf6\x8b\x19\x9f\x8d\xde\x0d\x1f\xaa\xb0\x74\x7b\x37\xc6\x7a\xfb\xd8\xf1\xe9\x2a\xbb\x9a\xb7\x9f\x5c\x5c\xbc\x97\xb7\x4f\xc6\xd9\xea\xde\xe1\x99\x1a\x9f\xdc\x3d\xae\x9e\xac\xd7\x61\x18\x5f\x9e\x96\xd3\xf3\xcb\xd1\x83\x47\xc7\x17\xf3\x6d\x6c\x56\x55\xa6\x31\x35\x5f\x8e\x94\xaa\x9b\x14\xdb\xae\xa5\x2c\x74\x37\x9f\xac\xe7\xf7\xdd\xfb\x75\xdb\x34\x9a\x97\x33\xbd\x58\xf4\x95\x99\xf5\x6b\x5d\xce\x55\xb6\x4e\x51\x6e\x1b\xb0\xe9\xcb\x9f\xc3\x77\x5d\x49\xff\x46\x02\xb0\x7f\x93\x36\x3d\x74\xf1\x47\x00\x00\x00\xff\xff\x21\xed\x9f\xe5\x00\x30\x00\x00")

func resourcesDefault_configYamlSwpBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYamlSwp,
		"resources/.default_config.yaml.swp",
	)
}

func resourcesDefault_configYamlSwp() (*asset, error) {
	bytes, err := resourcesDefault_configYamlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/.default_config.yaml.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1527621798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x51\x6f\xdb\x2c\x14\x86\xef\xfd\x2b\x90\xef\x53\x03\xc6\x0e\xe6\xae\xdf\xb7\x6e\xda\xd6\x45\x69\x1b\x35\xeb\xee\x30\x1c\x62\xea\x18\x52\xc0\x6d\xd2\x5f\x3f\x39\x6e\x35\x6d\x37\xdb\x1d\x7a\xcf\xd1\x73\xf4\x3e\x58\x0d\x2e\xd9\x74\xfa\xac\x05\x22\x59\xa6\xc0\xa5\x60\xcd\xb8\x83\x15\xa4\x17\x1f\x7a\x81\x7e\x45\x8b\x30\xc6\x68\xa5\xeb\xec\x7e\xbf\x80\xd4\x2d\x82\x75\x3d\xb4\xa7\xcc\xcd\xbb\x51\xa0\x0c\xfd\xc3\xbe\xc8\x10\x42\xc8\x6a\x81\x2a\x72\x7e\xb6\xde\xa7\x98\x82\x3c\xac\x01\x42\x9c\xc7\x08\x2d\x50\x5e\xd8\x03\x2b\x08\x5d\x5e\xe0\x0b\x7c\x41\x8a\xa4\x0e\x45\xc9\x29\xa6\x85\x3d\x98\x58\xdc\x0c\x9b\x9b\x63\xfb\xd2\x8f\x3f\x1e\x1e\x3e\x98\xf1\x75\xd3\x1e\xaf\x2e\x6f\x61\xb3\xfa\xff\xda\xbf\x9e\x4e\x55\xc5\x9f\x6f\xdc\xee\xfe\x79\xfd\xed\xf1\xfa\xa1\xcf\xff\x8a\x2d\xdf\xb1\xf7\xa6\xbe\x5a\xd5\x43\xff\xb4\x85\xc7\xed\xd7\x2d\x7d\x5a\x8f\xa4\xfe\x7e\xd0\x9f\xca\xfe\x8b\x27\x9b\x72\xe8\x64\xb7\xfe\xaf\xba\x83\xca\x91\x3c\x3b\x73\x21\x75\x10\x60\x1c\xde\xb4\x4d\x3a\xd9\x79\xa0\xbc\x4b\x41\xaa\x74\xa9\x75\x80\x18\x61\x96\x34\x0b\x98\xd5\x7f\x94\x2a\xf9\x70\x12\x28\xc7\x47\x5c\xf1\x06\x34\xe3\x54\x1a\xae\x6b\x8e\x1b\x83\x29\x35\x8a\x10\x29\xcb\xa6\x31\x8a\x4b\xce\x4b\x5d\xd1\xfc\x0f\xc6\x2d\xec\x6c\x4c\x6f\x10\xd3\x30\xb2\x54\x1a\x34\x29\xcb\x56\xf2\x92\x69\xa6\x8c\x56\x35\xb0\x8a\xea\x56\x53\xa3\x2a\x5a\x2f\x19\xbc\x43\xa4\x53\x9d\x0f\xbf\x21\xda\x6a\x49\x0c\x30\xac\x81\xea\x9a\x40\x53\x31\x6d\x1a\x25\x19\x34\x35\x31\x75\xc3\x38\x37\xa4\xac\x24\xce\xb3\xec\xbd\xf9\xf4\x6d\x1a\x8c\x1c\xf7\xe9\x52\x29\x3f\xba\xb4\x92\x03\x08\x94\x0f\xd2\xba\xe9\x94\xf3\x1a\xb6\xd0\xde\x79\xd5\x43\x12\xe8\x25\x8a\xa2\xd8\x7b\x25\xf7\x9d\x8f\x49\x34\x15\xab\x33\x84\x76\x32\xae\x83\x55\x20\x10\xc3\x18\xe3\x39\xb9\xb6\x83\x4d\x02\xb1\x25\xa1\x25\xe7\xd9\x2c\x15\x8e\x69\x2b\x6d\xda\xd8\x01\xfc\x98\x04\xca\x4b\x1c\xa7\x33\x83\x3c\xde\x42\x0a\x76\x32\x4d\xcf\x04\xeb\x12\x84\x67\xb9\x9f\xe2\xa9\x1e\xc1\x78\x88\x79\x96\xfd\x0c\x00\x00\xff\xff\xa2\x88\x3e\x8e\xfc\x02\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 764, mode: os.FileMode(420), modTime: time.Unix(1527621798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/.default_config.yaml.swp": resourcesDefault_configYamlSwp,
	"resources/default_config.yaml": resourcesDefault_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		".default_config.yaml.swp": &bintree{resourcesDefault_configYamlSwp, map[string]*bintree{}},
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

