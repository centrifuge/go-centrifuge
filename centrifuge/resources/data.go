// Code generated by go-bindata.
// sources:
// ../../resources/default_config.yaml
// ../../resources/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x4f\x97\xda\x36\x14\xc5\xf7\xfe\x14\x3a\x74\x5d\x90\x25\x5b\xfe\xb3\x63\x26\x4c\xd2\x0c\x43\x81\x21\x43\x60\x27\x4b\xcf\xa0\x80\x25\x8f\x24\x63\x93\x4f\xdf\x63\x08\xa7\xed\x9c\x4e\x52\xaf\xec\xf7\xfc\xee\x95\xee\x4f\x47\x02\xb4\xb7\xaa\x6c\x76\x30\x03\xdf\x1a\x7b\xc8\x91\x6d\x9c\x53\x5c\xef\xd5\xf1\x18\xe8\x6b\xd1\xe5\x01\x42\xbf\xa1\xa9\x11\xfc\x88\x3c\x38\xaf\xf4\x0e\x09\xa3\xbd\xe5\xc2\x23\x2e\xa5\x05\xe7\xc0\x21\x0d\x20\x91\x37\xa8\x00\xe4\xc0\xa3\x56\xf9\x3d\x02\x7d\x42\x27\x6e\x15\x2f\x8e\xe0\x86\x01\xba\xcd\xf7\x92\x08\x29\x99\x23\x4a\xe9\xe5\x1d\xfc\x1e\x2c\x34\xd5\x8f\x95\xfc\x21\x73\x94\xd2\xf4\xda\x2b\x8c\xf1\xce\x5b\x5e\xcf\x01\xac\xbb\xce\x22\xf4\x3b\x1a\x8c\x54\x1d\x8d\x42\x92\x0c\xf1\x10\x0f\xc3\x91\x17\xf5\x88\xa6\x04\x93\x91\xaa\x4b\x37\x5a\x54\xab\x45\x57\xb4\x87\x66\xbb\xd9\x7c\x28\x9b\xef\xab\xa2\x9b\x8c\x97\xb0\x9a\xdd\x4f\xcd\xf7\xf3\x39\x8e\xd3\xd3\x42\xef\x5e\x4e\xf3\xa7\x6f\xd3\xcd\x61\xf0\x4b\x59\x7a\x93\x7d\x29\xd9\x64\xc6\xaa\xc3\xeb\x1a\xbe\xad\x1f\xd7\xe4\x75\xde\x84\xec\x6b\x2d\x3f\xd2\xc3\x67\x13\xae\x68\xb5\xe7\xfb\xf9\x5d\xfc\x0c\xb1\x0e\xaf\xb2\xb7\xb8\xc6\xb7\xb4\x6e\x9b\x50\x12\xb4\x57\xfe\xfc\xc0\x85\x37\xf6\x9c\xa3\xc1\xe0\x4d\x67\x09\x3b\xe5\xfc\xbf\x5a\x5c\x8b\xbd\xb1\x4b\xa8\x8d\x53\x6f\xa6\x6a\x7e\xae\x40\xfb\x3f\x8b\xa3\xda\x71\xaf\x8c\xbe\xf4\x02\xf4\x4f\xb0\x7f\x87\x1f\x87\xff\x23\x5f\x1a\x0f\x09\x89\x87\x04\xe3\x61\x44\xde\x66\x1c\x92\x0f\xf4\xd1\x98\xf5\x54\x29\xb1\x78\x69\x57\xfb\xd5\xdd\x86\x75\x8f\x62\x6e\xa6\x25\x5b\x2e\x36\x9f\x1f\xea\xb6\x0c\x6d\x12\xb7\xd3\x8e\x6c\x97\xb4\xbe\x97\xe1\xdb\xa4\x7f\x18\xa4\x6c\x48\x42\xfc\x9e\xc1\x62\xfb\x34\x4e\x3f\xce\x3f\xd9\xd3\x64\x7b\x97\xb5\xf2\x60\xbe\x88\xf1\xb8\xba\xdf\x7e\xaa\x33\x38\x9f\xb7\xd1\xf3\x24\xdd\x3d\x58\xba\x5f\xcd\xbe\x5e\x36\xfc\x9f\x47\x2a\x7a\x87\x06\x7a\x17\x07\xee\x32\x2c\x49\x16\xc5\x49\x08\x09\x4d\x23\xc2\xb2\x84\x33\x56\x24\x3c\xcb\x38\xce\xa4\x64\x22\xa1\x92\xc6\x4c\xfe\x04\x1c\xee\x32\xc6\xb0\xc0\x34\x93\x34\x0c\xa3\x98\xf2\x12\xcb\x38\x15\x31\x63\x2c\x21\x54\x66\x82\x94\x3c\x91\x0c\xc4\x4f\x10\xe3\x2e\x29\xd3\x38\x92\x25\xcf\x52\x1c\x12\x99\x94\x3c\x8e\x45\x8a\x69\x51\x70\x42\x18\x2e\x84\x04\x88\x8a\x18\xe4\x2f\x0e\xc3\x6b\x03\x0d\xf4\x94\x75\x53\xad\x8d\x3d\xf4\xcc\x11\x09\x10\x6a\x2f\x1f\x6b\xae\xfc\x4a\x55\xf0\xf4\x9c\xa3\x30\x08\x6e\x29\xf6\x03\x12\x4a\xde\x1c\xfd\x58\x08\xd3\x68\x3f\xe3\x15\xe4\x68\x50\x71\xa5\x7b\x47\x6d\x24\x7c\x59\x4e\x73\xd4\xba\x7c\x34\x3a\xf6\xd7\xc5\xde\x38\x9f\x67\x71\xc4\x02\x84\x76\xdc\xcd\xad\x12\x90\xa3\x10\xdf\x9e\x6b\x79\xaa\x2a\xe5\x73\x14\x25\x21\xa1\x69\x1a\x5c\xf9\x40\xe7\x6f\x0b\x31\x8d\xcf\xd1\x80\x61\xec\x7a\x9b\x8a\x77\x4b\xf0\x56\xf5\xd4\xc8\x45\x42\x69\x0f\xf6\xc4\x8f\x7d\xb9\x0f\x8a\x5c\xfe\xf3\xdd\xdc\x98\xe3\x58\x08\x70\x6e\xa2\xfb\x0b\x48\xe6\xc8\xdb\x06\x82\xe0\xaf\x00\x00\x00\xff\xff\x8b\x57\x2e\x4f\xf8\x04\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1272, mode: os.FileMode(420), modTime: time.Unix(1540377589, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xcb\x6e\xe3\x3a\x0c\xdd\xfb\x2b\x0c\x6e\xb2\x71\x52\xbd\x5f\x7f\x70\x71\x71\x57\x77\x80\xae\x29\x89\x6a\x8c\xc4\x8e\x47\xb6\xdb\x06\x45\xff\x7d\xe0\x34\x9d\x6e\xa7\x03\x69\x41\x12\x3a\x87\x87\xe2\xa1\xe5\x48\x95\xd6\x21\x34\x6d\x8b\x29\x5d\xd6\x71\x99\xb7\xb8\x6d\x07\xec\xc7\xd0\xde\xc2\xb6\x3d\xd1\x35\xb4\xbb\x37\xc0\x9c\x2b\xcd\x33\x04\x70\x3e\x32\x74\x46\x3b\x99\x94\x52\x0a\x53\xc9\x96\x47\x65\x24\xb1\x2c\x93\xd6\x48\x5c\x71\x81\x1a\x3a\x48\xf5\x3a\x2d\x17\x08\x6f\x90\xfa\xe9\x48\x15\x02\x20\xcd\x7b\x2e\xdc\x3e\x2d\x75\x7b\x70\x2b\x2f\xf4\xba\x40\x80\x64\xad\x2f\x4e\x5a\x9f\xad\x65\xd9\x8b\x54\x12\xcf\x39\x2b\x74\x45\xf2\xac\x91\x61\x4e\xae\x08\x64\x51\x20\x57\x8c\x4b\xcb\xb2\x34\x92\x15\xe9\x12\x4b\x0e\x7f\xf3\x4d\x58\x71\x98\xb7\xb6\xfd\x33\x04\x90\x26\x71\xe3\xc8\xca\x58\xbc\x63\x85\xac\x8e\xcc\x0a\x5b\x9c\x67\x68\x39\x66\x78\xef\xe0\x94\x0b\x04\x98\x6f\x82\xe1\x96\x7e\x91\xe4\xd3\x99\x46\x08\x52\x74\x30\x42\x10\x46\x70\xa5\x3a\x98\x20\xf0\x0e\x2a\x04\xd7\xc1\x8c\xe7\x6d\x80\x4c\x3c\x12\x37\x24\x93\x77\xdc\x2b\x95\x39\x25\x14\xd1\x45\x61\x49\x91\x21\x16\x75\x2c\x51\xc9\x48\x4c\x5a\x83\x3a\x3b\xe7\x7c\x41\x63\x3d\x0a\xc7\x85\xd8\x84\x0c\x98\xb6\xaf\x48\x5c\xb8\xe8\xb8\xd6\x5a\x47\xe4\x84\xd9\x26\x24\xcf\x0c\x23\xe7\x94\xc0\x92\xd0\x49\x6d\x32\x33\x4a\xeb\x98\x3d\x6a\xab\x45\x44\x53\x52\x62\x5e\x50\xd9\x98\xfa\x0c\x01\x94\x26\x66\x18\x9a\x7d\x16\x48\x7b\x25\xa3\xdb\x7b\x21\xca\x5e\x29\x27\xbc\xf2\x3e\x4b\x9b\xa1\x83\x67\xaa\x73\x7f\xd9\x86\x7c\xdf\xdd\x17\x3f\xe1\x3c\xbf\x5c\x6a\x0e\xed\xee\xb3\x74\xf7\x40\x68\xff\xd4\x02\x4d\xd3\x67\x1a\x97\x7e\xb9\xfe\xb3\xf1\xb0\x57\xc6\xbf\xce\xae\x69\x7e\xae\xb4\xd2\x66\xba\x71\x1d\x1e\x2f\xf5\x44\x75\x0e\xad\x68\xda\xf6\xe5\x96\x3c\x62\xbf\xfc\xe8\x07\xfa\xef\xff\xd0\xf2\xa6\x39\xd1\xf5\xe6\xd0\xb9\x7f\x1a\xfb\xf1\xe9\xc3\xac\xd3\x1a\xcf\x7d\xfa\x77\x73\xe9\xe1\xf0\xf0\x71\xe9\x15\x87\xe9\x4c\x0f\x95\xe6\xcb\x5a\x13\xcd\x0f\x1b\x04\x97\xb5\x12\x3f\x4c\x6b\x3c\x4c\x34\x7c\x80\x6b\xff\x8c\x0b\x7d\x03\x7d\xa2\xeb\x1d\x4d\xcb\x11\xd7\xe5\xf8\x1d\x15\x77\xc8\xdf\x48\xf8\x84\x7e\xf6\xff\x15\x00\x00\xff\xff\x2a\x32\x0b\x61\xbe\x03\x00\x00")

func resourcesTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYaml,
		"resources/testing_config.yaml",
	)
}

func resourcesTesting_configYaml() (*asset, error) {
	bytes, err := resourcesTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/testing_config.yaml", size: 958, mode: os.FileMode(420), modTime: time.Unix(1540221728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_config.yaml": resourcesDefault_configYaml,
	"resources/testing_config.yaml": resourcesTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
		"testing_config.yaml": &bintree{resourcesTesting_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
