// Code generated by go-bindata.
// sources:
// ../../resources/default_config.yaml
// ../../resources/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4b\x93\xe3\x34\x10\xc7\xef\xfe\x14\xaa\x70\x66\xa2\x87\xf5\xf2\x6d\x80\x81\x5a\xc8\x4e\x65\xb3\x61\xc3\x70\xd3\xa3\x9d\x68\x13\x4b\x19\x4b\xce\x63\x3f\x3d\xe5\xc9\x86\x01\xaa\x26\xdc\x29\x7c\xb2\xbb\xd5\x7f\xb7\xff\xbf\x96\xe5\x20\x96\x3e\xb4\xc3\x1a\x1e\xa1\x1c\x53\xbf\x6d\xd0\x6b\x68\x31\xe4\x1c\x4c\xdc\x84\xdd\xee\xa1\x6c\x16\x21\x6e\xc1\x9e\xab\x78\x59\x98\x9b\x0a\xa1\x6f\xd0\x2c\x39\xb3\x43\x05\x72\x09\x71\x8d\x5c\x8a\xa5\x37\xae\x20\xe3\x7d\x0f\x39\x43\x46\x11\xc0\xa3\x92\x90\x05\x94\xa1\xa0\x63\x28\x1b\x04\xf1\x80\x0e\xa6\x0f\xc6\xee\x20\xdf\x55\xe8\x5a\x3f\x4a\x22\x14\x7c\x83\x18\x63\x2f\xf7\x50\x36\xd0\xc3\xd0\x7d\xed\xee\x9d\x6f\x90\x62\xea\x92\xb3\x29\x95\x5c\x7a\xb3\x9f\x03\xf4\xf9\x52\x8b\xd0\xb7\x68\x32\x0d\xfb\x7a\x4a\xa8\xbc\xc3\x77\xf8\x8e\x4c\x8b\xdb\x4f\x99\xa2\x98\x4e\xc3\xbe\xcd\xd3\x0f\xdd\xf2\xc3\xc9\x1e\xb7\xc3\xef\x4f\x4f\x3f\xb4\xc3\x97\xa5\x3d\x3d\xdc\x2f\x60\xf9\xf8\xfd\x2c\x7d\x39\x9f\x39\x57\x87\x0f\x71\xfd\xe9\x30\x7f\xff\x79\xf6\xb4\x9d\xfc\xab\x2c\xbb\xca\x7e\x6a\xc5\xc3\xa3\xe8\xb6\xcf\x2b\xf8\xbc\xfa\x65\x45\x9f\xe7\x03\x11\xbf\xed\xfd\x4f\x6c\xfb\x73\x22\x4b\xd6\x6d\xcc\x66\xfe\x1d\xff\x08\x3c\x92\x8b\xec\xd5\xae\xfb\xab\x5b\xd7\x8f\x08\x1e\x62\x09\xe5\xfc\xa3\x71\x25\xf5\xe7\x06\x4d\x26\xff\xc8\x2c\x60\x1d\x72\xf9\x5b\xca\x44\xb7\x49\xfd\x8d\xc4\x3e\xe5\xf0\xa7\x5c\x85\xde\x24\xfd\x2e\x16\x58\xf7\xa6\x84\x14\x5f\x89\x10\x4c\xfe\x27\xf2\x57\x22\xf8\x24\x19\x65\xc4\xd6\x9a\x61\x61\x9c\x15\xc6\x62\x59\x1b\x2c\x99\x54\x2d\x93\xa2\x75\xda\x7a\x4b\x25\x11\x37\xd8\xe1\x93\x17\xca\x09\x2c\xad\x75\x14\x2b\x8c\xb1\x50\x9a\x91\x1a\x6b\x22\x8c\x50\x94\xb4\x5e\x12\x66\xa9\xa6\x6f\x52\xc6\x27\xcb\x25\x69\xa1\xc6\x1e\xa8\x17\x04\x34\xaf\x7d\xab\x9d\xa9\x41\x0b\xd2\x0a\x5d\x2b\xd5\x12\xc6\x0d\xbe\x09\xfd\xeb\xf6\x7e\x05\xce\xc9\x7f\x80\xe9\x5b\x23\x5b\xbf\x41\x1b\xdd\xc0\xad\xb1\xa7\xba\xe6\x92\x80\x64\xaa\xa6\x42\x4b\x23\x84\x95\x46\x6b\x83\xb5\xf7\xc2\x49\xe6\x19\x17\xfe\x26\x6e\x2d\x04\x76\x98\x69\xcf\x08\xa9\x39\x33\x2d\xf6\x5c\x39\x2e\x84\x90\x94\x79\xed\x68\x6b\xa4\x17\xe0\x6e\xe0\x66\x35\x35\xb2\xb6\x4c\x51\x4f\xb4\x37\xa2\xd6\x4a\x59\x26\x85\xc7\x50\x1b\xc1\x85\x95\xb6\x35\xdc\xfb\x1b\xdb\x1f\x9f\x64\xab\xc6\x31\x31\x5a\x61\x42\xbd\x6c\x0d\xe7\x4e\x61\x66\xad\xa1\x54\x60\xeb\x3c\x40\x6d\x39\xf8\x49\x55\x3d\x0f\x30\xc0\x08\x3e\x0e\xdd\x2a\xf5\xdb\x71\x0c\x10\xad\x10\x3a\xbe\x3c\xac\x4c\x28\xcb\xd0\xc1\xfb\x8f\x0d\x22\x55\x75\x35\x7b\x2c\xf0\xd0\x9a\x61\x57\xee\x9d\x4b\x43\x2c\x8f\xa6\x83\x06\x4d\x3a\x13\xe2\xd8\x5a\x4c\x1e\x7e\x5d\xcc\x1a\x74\xcc\xcd\x74\xba\x1b\xcf\x91\x4d\xca\xa5\xd1\xbc\x16\x15\x42\x6b\x93\xe7\x7d\x70\x30\xfe\x79\xae\xd7\x25\x3c\x0b\x5d\x28\x0d\xaa\x25\xa1\x4c\xa9\xea\x82\x11\x4e\xe5\xda\x48\x1a\x4a\x83\x26\x02\xe3\x3c\xbe\xa6\x33\xa7\x05\x94\x3e\x8c\x70\xe9\x8b\x44\x88\x05\xfa\x83\xd9\x8d\xe1\xd1\x0c\xfa\xb2\xae\x9c\xe6\x29\xed\xee\x9d\x83\x9c\x1f\xe2\x78\x32\xf9\x06\x95\x7e\x80\xaa\xfa\x23\x00\x00\xff\xff\x24\x18\xac\xc8\x25\x07\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1829, mode: os.FileMode(420), modTime: time.Unix(1536997522, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4d\x6f\xfb\x36\x0c\xc6\xef\xfe\x14\x02\x2f\xbd\x24\xa9\xde\xdf\x6e\x1b\xb0\xc3\x30\xec\x30\x6c\x40\xcf\x94\x44\x35\x46\x62\xc7\x93\xed\xb6\x41\xd1\xef\x3e\x38\x4d\xb7\xeb\xfa\x07\x6c\x80\x24\xf4\x90\x0f\xa5\x1f\x2d\x47\x6a\xb4\x0e\xb1\x63\x0c\x73\xbe\xac\xe3\x32\x6f\x31\x63\x03\xf6\x63\x64\xb7\x90\xb1\x13\x5d\x23\x7b\x78\x07\x2c\xa5\xd1\x3c\x43\x04\x1f\x12\x47\x6f\x8d\x57\x59\x6b\xad\x31\xd7\xe2\x44\xd2\x56\x11\x2f\x2a\x1b\x83\x24\xb4\x90\x68\x60\x07\xb9\x5d\xa7\xe5\x02\xf1\x1d\x72\x3f\x1d\xa9\x41\x04\xa4\x79\x2f\xa4\xdf\xe7\xa5\x6d\x07\x6e\xe5\x85\xde\x16\x88\x90\x9d\x0b\xd5\x2b\x17\x8a\x73\xbc\x04\x99\x6b\x16\xa5\x14\x8d\xbe\x2a\x51\x0c\x72\x2c\xd9\x57\x89\x3c\x49\x14\x9a\x0b\xe5\x78\x51\x56\xf1\xaa\x7c\xe6\xd9\xe3\xbf\xfd\x26\x6c\x38\xcc\xdb\xd8\xfe\x05\x22\x28\x9b\x85\xf5\xe4\x54\xaa\xc1\xf3\x4a\xce\x24\xee\xa4\xab\x3e\x70\x74\x02\x0b\x7c\xec\xe0\x54\x2a\x44\x98\x6f\x86\xe1\x96\xfe\xd7\xa4\x9c\xce\x34\x42\x54\x72\x07\x23\x44\x69\xa5\xd0\x7a\x07\x13\x44\xb1\x83\x06\xd1\xef\x60\xc6\xf3\xb6\x40\x21\x91\x48\x58\x52\x39\x78\x11\xb4\x2e\x82\x32\xca\xe4\x93\x74\xa4\xc9\x12\x4f\x26\xd5\xa4\x55\x22\xae\x9c\x45\x53\xbc\xf7\xa1\xa2\x75\x01\xa5\x17\x52\x6e\x46\x06\xcc\xdb\x55\x64\x21\x7d\xf2\xc2\x18\x63\x12\x0a\xc2\xe2\x32\x52\xe0\x96\x93\xf7\x5a\x62\xcd\xe8\x95\xb1\x85\x5b\x6d\x4c\x2a\x01\x8d\x33\x32\xa1\xad\x39\xf3\x20\xa9\x6e\x9d\xfa\x02\x11\xb4\x21\x6e\x39\xda\x7d\x91\x48\x7b\xad\x92\xdf\x07\x29\xeb\x5e\x6b\x2f\x83\x0e\xa1\x28\x57\x60\x07\x2f\xd4\xe6\xfe\xb2\x2d\xf9\xf1\x70\x7f\xf8\x09\xe7\xf9\xf5\xd2\x4a\x64\x0f\x5f\xa5\x3b\x03\x91\xfd\x5f\x04\xba\xae\x2f\x34\x2e\xfd\x72\xfd\xb5\x44\xf6\xd3\x1f\xbf\xfc\xbc\xfd\x5d\xf7\xf7\x4a\x2b\x6d\xb0\x8d\xeb\xf0\x74\x69\x27\x6a\x73\x64\xa6\x63\xec\xf5\x96\x3c\x61\xbf\xfc\xd5\x0f\xf4\xfb\x9f\x91\x89\xae\x3b\xd1\xf5\x46\xe6\xdc\x3f\x8f\xfd\xf8\xfc\x09\xe9\xb4\xa6\x73\x9f\x7f\xdb\xe8\x3c\x1c\x1e\x3f\x3f\x7a\xc3\x61\x3a\xd3\x63\xa3\xf9\xb2\xb6\x4c\xf3\xe3\x26\xc1\x65\x6d\x24\x0e\xd3\x9a\x0e\x13\x0d\x9f\xe2\xd6\xbf\xe0\x42\xdf\x50\x9f\xe8\x7a\x57\xd3\x72\xc4\x75\x39\x7e\xc7\xc5\x5d\xf2\x23\x16\xbe\xa4\x5f\xf3\xff\x09\x00\x00\xff\xff\x46\xfc\x2d\x6e\xb6\x03\x00\x00")

func resourcesTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYaml,
		"resources/testing_config.yaml",
	)
}

func resourcesTesting_configYaml() (*asset, error) {
	bytes, err := resourcesTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/testing_config.yaml", size: 950, mode: os.FileMode(420), modTime: time.Unix(1536932002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_config.yaml": resourcesDefault_configYaml,
	"resources/testing_config.yaml": resourcesTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
		"testing_config.yaml": &bintree{resourcesTesting_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
