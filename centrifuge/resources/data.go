// Code generated by go-bindata.
// sources:
// ../../resources/default_config.yaml
// ../../resources/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\xcb\x76\xe2\x38\x10\x86\xf7\x7e\x0a\x1d\x66\x3d\xa0\x8b\xad\x8b\x77\x24\x4d\xfa\x12\x92\x03\x84\x0e\x1d\x76\xba\x94\x41\x0d\x58\xc4\x96\xb9\xf4\xd3\xcf\x71\x08\x93\x99\x9c\x09\x33\x0f\x30\xac\xb0\x4a\xf5\x57\xb9\xbe\xdf\x92\x85\x32\x56\xbe\x68\x16\x70\x0f\x71\x1f\xaa\x55\x8e\xde\x96\x26\x4d\x5d\x7b\x5d\x2e\xfd\x7a\x3d\x88\xcb\x89\x2f\x57\x60\x8e\x49\x79\xda\x58\xe7\x09\x42\xbf\xa1\x61\xb0\x7a\x8d\x22\xd4\xd1\x97\x0b\x64\x43\x19\x2b\x6d\x23\xd2\xce\x55\x50\xd7\x50\xa3\x12\xc0\xa1\x18\x90\x01\x54\x43\x44\x7b\x1f\x97\x08\xca\x1d\xda\xe9\xca\x6b\xb3\x86\xba\x9b\xa0\x73\x7e\x2b\x89\x90\x77\x39\x62\x8c\xbd\xfc\x87\xb8\x84\x0a\x9a\xcd\x6b\x77\x5f\x5d\x8e\x24\x93\xa7\x98\x09\x21\xd6\xb1\xd2\xdb\x11\x40\x55\x9f\x72\x11\xfa\x1d\x75\x7a\x7e\x9b\xf6\x08\x15\x5d\xdc\xc5\x5d\xd2\x8b\x76\xdb\x63\x92\x62\xda\xf3\xdb\xa2\xee\x8d\x37\xd3\xf1\xc1\xec\x57\xcd\xfc\xe9\xe9\x53\xd1\xfc\x9a\x9a\xc3\xa0\x3f\x81\xe9\xfd\xf5\x30\xfc\x3a\x1e\xb3\x4c\xee\xc6\xe5\xe2\x71\x37\xba\xfb\x39\x7c\x5a\x75\xfe\x55\x96\x9d\x65\x1f\x0b\x3e\xb8\xe7\x9b\xd5\xf3\x0c\x7e\xce\x6e\x67\xf4\x79\xd4\x10\xfe\x63\xeb\x3e\xb3\xd5\xb7\x40\xa6\x6c\xb3\xd4\xcb\xd1\x55\xf6\x00\x59\x49\x4e\xb2\xe7\x71\xf5\xcf\xd3\x3a\xbf\x84\x77\x50\x46\x1f\x8f\x37\xda\xc6\x50\x1d\x73\xd4\xe9\xbc\x8b\x4c\x60\xe1\xeb\xf8\xb7\x90\x2e\xed\x32\x54\x17\x02\xdb\x50\xfb\x3f\xe5\x12\xf4\x21\xe9\xaf\x65\x84\x45\xa5\xa3\x0f\xe5\x1b\x11\x82\xc9\xff\x44\xfe\x4a\x04\x1f\x04\xa3\x8c\x98\x54\x31\xcc\xb5\x35\x5c\x1b\x2c\x52\x8d\x05\x13\xb2\x60\x82\x17\x56\x19\x67\xa8\x20\xfc\x02\x3b\x7c\x70\x5c\x5a\x8e\x85\x31\x96\x62\x89\x31\xe6\x52\x31\x92\x62\x45\xb8\xe6\x92\x92\xc2\x09\xc2\x0c\x55\xf4\x43\xca\xf8\x60\x32\x41\x0a\x48\xb1\x03\xea\x38\x01\x95\xa5\xae\x50\x56\xa7\xa0\x38\x29\xb8\x4a\xa5\x2c\x08\xcb\x34\xbe\x08\xfd\xf5\xf3\x7e\x03\x9e\x91\xff\xc0\x94\x65\x5d\x4a\xb3\x2e\xc5\xb8\x9b\xd2\xf7\x5c\x09\xfd\xc4\x6e\x43\x98\x0d\xbd\xb7\xe3\xc7\xfd\x74\x39\xbd\x7a\xe2\x87\x5b\x3b\x0a\xc3\x82\x4f\xc6\x4f\xdf\x6e\xb6\xfb\x82\x54\x22\xdb\x0f\x0f\x74\x3e\x61\xdb\x6b\x47\xde\xd3\x7d\x2d\x20\x79\x97\x12\xfc\x51\x81\xf1\xfc\xae\x2f\x3f\x8f\xbe\x54\xbb\xc1\xfc\x4a\xed\xdd\x2a\x7c\xb7\xfd\xfe\xe6\x7a\xfe\x65\xab\xe0\x78\x9c\xa7\x0f\x03\xb9\xb8\xa9\xd8\x72\x7a\xff\xe3\x65\x08\xff\x68\xe3\xf4\x03\x07\xa0\x0b\x16\x50\xd8\x51\x95\x66\x82\x80\x60\x32\xa5\x5c\x09\xcd\xb9\x11\x5a\x29\x8d\x95\x73\xdc\x0a\xe6\x58\xc6\xdd\x45\x0b\x28\xce\xb1\xc5\x4c\x39\x46\x48\x9a\x31\x5d\x60\x97\x49\x9b\x71\xce\x05\x65\x4e\x59\x5a\x68\xe1\x38\xd8\x0b\x16\x60\x29\xd5\x22\x35\x4c\x52\x47\x94\xd3\x3c\x55\x52\x1a\x26\xb8\xc3\x90\x6a\x9e\x71\x23\x4c\xa1\x33\xe7\x2e\x1c\x09\xf8\x20\x0a\xd9\x5a\x47\x2b\x89\x09\x75\xa2\xd0\x59\x66\x25\x66\xc6\x68\x4a\x39\x36\xd6\x01\xa4\x26\x03\xd7\x49\x92\xe7\x06\x1a\x68\xcd\x50\x36\x9b\x59\xa8\x56\xad\x35\x10\x4d\x10\xda\xbf\x3c\xcc\xb4\x8f\x53\xbf\x81\xbb\x87\x1c\x91\x24\x39\x0f\xbb\x4d\x70\x50\xe8\x66\x1d\xfb\xd6\x86\xa6\x8c\xf7\x7a\x03\x39\xea\x6c\xb4\x2f\xdb\xd6\xca\xe0\xe0\xfb\x64\x98\xa3\x7d\x9d\xf7\x7a\xeb\xf6\x6e\x59\x86\x3a\xe6\x2a\x4b\x79\x82\xd0\x42\xd7\xa3\xca\x5b\x68\x4f\xa3\xf3\xef\xb4\x3c\xf4\x1b\x1f\x73\x94\x0a\x42\x99\x94\xc9\x09\x23\x1c\xe2\xb9\x91\xd0\xc4\x1c\x75\x38\xc6\x75\x5b\x66\xa3\x0f\x13\x88\x95\x6f\xe1\xd2\x17\x09\x5f\x46\xa8\x76\x7a\xdd\x2e\xb7\xc3\xa0\x2f\xfb\xe2\x61\x14\xc2\xba\x6f\x2d\xd4\xf5\xa0\x6c\x6f\x2b\x97\xa3\x58\x35\x90\x24\x7f\x04\x00\x00\xff\xff\xa1\xfa\x63\x77\x39\x07\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1849, mode: os.FileMode(420), modTime: time.Unix(1538517588, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcb\x6e\xeb\x38\x0c\x86\xf7\x7e\x0a\x81\x9b\x6e\x92\x54\xf7\xdb\x1b\x0c\x06\xb3\x9a\x01\xba\xa6\x24\xaa\x31\x12\x3b\x1e\xd9\x6e\x1b\x14\x7d\xf7\x81\xd3\x74\xba\x3d\x3d\xb0\x17\x24\xa1\x9f\xfc\x29\x7d\xb4\x1c\xa9\xd1\x3a\xc4\x8e\x31\xcc\xf9\xb2\x8e\xcb\xbc\xc5\x8c\x0d\xd8\x8f\x91\xdd\x42\xc6\x4e\x74\x8d\xec\xe1\x1d\xb0\x94\x46\xf3\x0c\x11\x7c\x48\x1c\xbd\x35\x5e\x65\xad\xb5\xc6\x5c\x8b\x13\x49\x5b\x45\xbc\xa8\x6c\x0c\x92\xd0\x42\xa2\x81\x1d\xe4\x76\x9d\x96\x0b\xc4\x77\xc8\xfd\x74\xa4\x06\x11\x90\xe6\xbd\x90\x7e\x9f\x97\xb6\x1d\xb8\x95\x17\x7a\x5b\x20\x42\x76\x2e\x54\xaf\x5c\x28\xce\xf1\x12\x64\xae\x59\x94\x52\x34\xfa\xaa\x44\x31\xc8\xb1\x64\x5f\x25\xf2\x24\x51\x68\x2e\x94\xe3\x45\x59\xc5\xab\xf2\x99\x67\x8f\xff\xf7\x9b\xb0\xe1\x30\x6f\x63\xfb\x17\x88\xa0\x6c\x16\xd6\x93\x53\xa9\x06\xcf\x2b\x39\x93\xb8\x93\xae\xfa\xc0\xd1\x09\x2c\xf0\xb1\x83\x53\xa9\x10\x61\xbe\x19\x86\x5b\xfa\xdd\xa4\x9c\xce\x34\x42\x54\x72\x07\x23\x44\x69\xa5\xd0\x7a\x07\x13\x44\xb1\x83\x06\xd1\xef\x60\xc6\xf3\xb6\x40\x21\x91\x48\x58\x52\x39\x78\x11\xb4\x2e\x82\x32\xca\xe4\x93\x74\xa4\xc9\x12\x4f\x26\xd5\xa4\x55\x22\xae\x9c\x45\x53\xbc\xf7\xa1\xa2\x75\x01\xa5\x17\x52\x6e\x46\x06\xcc\xdb\x55\x64\x21\x7d\xf2\xc2\x18\x63\x12\x0a\xc2\xe2\x32\x52\xe0\x96\x93\xf7\x5a\x62\xcd\xe8\x95\xb1\x85\x5b\x6d\x4c\x2a\x01\x8d\x33\x32\xa1\xad\x39\xf3\x20\xa9\x6e\x9d\xfa\x02\x11\xb4\x21\x6e\x39\xda\x7d\x91\x48\x7b\xad\x92\xdf\x07\x29\xeb\x5e\x6b\x2f\x83\x0e\xa1\x28\x57\x60\x07\x2f\xd4\xe6\xfe\xb2\x2d\xf9\xf1\x70\x7f\xf8\x09\xe7\xf9\xf5\xd2\x4a\x64\x0f\x5f\xa5\x3b\x03\x91\xfd\x2a\x02\x5d\xd7\x17\x1a\x97\x7e\xb9\xfe\x51\x22\xe3\x6f\x5c\x7c\x7f\xac\xeb\xfe\x5d\x69\xa5\x8d\xb9\x71\x1d\x9e\x2e\xed\x44\x6d\x8e\x4c\x76\x8c\xbd\xde\x92\x27\xec\x97\x7f\xfa\x81\xfe\xfa\x3b\x32\xd1\x75\x27\xba\xde\x00\x9d\xfb\xe7\xb1\x1f\x9f\x3f\x59\x9d\xd6\x74\xee\xf3\x9f\x1b\xa4\x87\xc3\xe3\xe7\x4f\x6f\x38\x4c\x67\x7a\x6c\x34\x5f\xd6\x96\x69\x7e\xdc\x24\xb8\xac\x8d\xc4\x61\x5a\xd3\x61\xa2\xe1\x53\xdc\xfa\x17\x5c\xe8\x07\xea\x13\x5d\xef\x6a\x5a\x8e\xb8\x2e\xc7\x9f\xb8\xb8\x4b\x7e\xc7\xc2\x97\xf4\x6b\xfe\x7f\x01\x00\x00\xff\xff\xea\xb3\x1d\xa3\xbd\x03\x00\x00")

func resourcesTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYaml,
		"resources/testing_config.yaml",
	)
}

func resourcesTesting_configYaml() (*asset, error) {
	bytes, err := resourcesTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/testing_config.yaml", size: 957, mode: os.FileMode(420), modTime: time.Unix(1538775708, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_config.yaml": resourcesDefault_configYaml,
	"resources/testing_config.yaml": resourcesTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
		"testing_config.yaml": &bintree{resourcesTesting_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

