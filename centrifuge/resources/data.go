// Code generated by go-bindata.
// sources:
// ../../resources/default_config.yaml
// ../../resources/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x4f\x6f\xe3\x36\x10\xc5\xef\xfa\x14\x84\xee\x89\xf8\x9f\x94\x6e\x69\xbb\x2d\xda\xa6\x81\x93\xba\x9b\xa6\xb7\x21\x39\xb4\xb9\xb6\x24\xaf\x44\x25\xf6\x7e\xfa\x42\xf6\x7a\xb7\x5b\x20\xce\xbd\xa8\x4e\xc4\x7b\xc2\x1b\xcc\xfb\x49\x4c\x01\xbb\x9c\xf2\xe1\xe7\xd0\x10\x56\x14\x1e\xbb\x3c\xa4\x38\xad\xf0\x0e\xf3\x4b\x3f\x6c\x1a\xf2\x55\xba\x1a\xa6\x71\x4c\xd0\xad\xd3\x76\x7b\x85\x79\x7d\x35\xa4\x6e\x83\xee\x50\x74\xa7\x77\xc7\x86\x14\x84\x64\x1c\x73\xea\x56\xc7\x33\x21\x29\x34\x44\x08\x71\x3c\x63\x5e\xe3\x80\x53\xfb\x39\x7a\x1e\x69\x85\x3d\x79\xae\xef\xf3\x98\x07\xd8\x2d\x10\x87\xb1\x39\x6a\x84\x5c\x91\xb2\x4a\x3b\x59\x31\x6e\xae\xe9\x35\xbd\x66\x55\xf6\xbb\x4a\x58\x4e\x79\x95\x76\x71\xac\xee\xdb\xe5\xfd\xde\xbd\x6c\xa6\xbf\x9e\x9e\x7e\x88\xd3\xa7\xa5\xdb\xbf\xbb\x79\xc0\xe5\xdd\xf7\xb7\xfd\xa7\xc3\x41\x29\xfb\x7c\xdf\xad\xde\x3f\x2f\x7e\xfb\x70\xfb\xb4\x29\xdf\x8c\x15\xe7\xd8\xf7\x51\xbf\xbb\xd3\xed\xe6\xe3\x23\x7e\x78\xfc\xf5\x91\x7f\x5c\x4c\x4c\xff\xb9\x0b\x3f\x89\xcd\x2f\x3d\x5b\x8a\x76\x0d\xeb\xc5\x77\xea\x77\x54\x1d\x3b\xc5\xfa\xbe\xcb\x03\xf8\x7c\x13\xc2\x80\xe3\x88\x5f\x96\x38\x57\xfc\x23\xf8\xdc\x0f\x87\x86\x94\xe5\xbf\x9c\x07\x5c\xa5\x31\x7f\x63\x41\xe7\xd7\xfd\xf0\x8d\x51\x90\x4b\x2c\x52\x97\x71\x35\x40\x4e\x7d\xd7\x7c\x69\x9e\x51\xf6\x7f\xf3\xff\x6c\x9e\xee\x8d\xe0\x82\x39\x59\x0b\xaa\xc1\x3b\x0d\x8e\x1a\x09\xd4\x08\x63\xa3\x30\x3a\xfa\xda\x05\xc7\x0d\xd3\x17\x18\xd1\x7d\xd0\xd6\x6b\x6a\x9c\xf3\x9c\x5a\x4a\xa9\xb6\xb5\x60\x92\xd6\x4c\x83\xb6\x9c\xc5\x60\x98\x70\xbc\xe6\xaf\xd2\xa4\x7b\xa7\x0c\x8b\x28\x69\x40\x1e\x34\xc3\x5a\xc9\x10\x6b\x0f\x12\x6b\xcd\xa2\xae\xa5\xb5\x91\x09\x05\xf4\x2d\xee\x9f\xff\xc1\xaf\xcc\x15\xfb\x0f\x60\x7d\xed\xab\x95\xaf\x00\x27\x17\x88\x2b\x4f\x41\x50\xb0\x3e\x46\x11\x9d\xa4\x10\x80\x4a\xe5\x68\xa4\x4a\x38\x04\x13\xc0\x49\x94\x4c\x5e\x24\x2e\x54\x40\xa4\x68\x38\xf7\xce\xd7\x60\x6b\x2a\xa3\xaa\x3d\x57\xce\x20\x77\x00\x31\x6a\x23\x30\x86\x0b\xc4\xad\x51\xd2\x83\xf3\x81\x1a\x4d\x9d\x71\x5c\x79\x45\x69\x00\x05\x5e\x58\x29\x98\xd6\x81\x06\x6f\x75\x59\x14\xe7\xcd\x67\x6c\x01\x23\x4c\xdb\x7c\xe3\x7d\x3f\x75\xf9\x0e\x5a\x6c\x48\xd9\x42\xea\xe6\x51\x5d\x1f\xf0\x8f\x87\xdb\x86\xbc\x8c\x4d\x55\x6d\x7b\x0f\xdb\x75\x3f\xe6\xa6\x56\x52\x17\x84\xac\x60\x5c\x0c\xc9\xe3\x7c\x13\x9c\x9f\x93\x7c\x9b\xda\x94\x1b\x22\x0d\xe3\xc2\xda\xe2\xd4\x29\xee\xf3\x23\xa4\xbc\x4c\x2d\xf6\x53\x6e\x48\x29\xe8\x38\x4f\x69\x61\xff\x80\x79\x48\x73\xd1\xfc\x98\x30\xdf\x36\xc3\x33\x6c\x67\x79\xde\x8e\x8f\x65\x51\xfc\x1d\x00\x00\xff\xff\x96\x0b\x6b\x77\x4c\x06\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1612, mode: os.FileMode(420), modTime: time.Unix(1528810614, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcb\x6a\x2c\x3d\x0c\x84\xf7\x79\x8a\x46\x9b\x6c\x7a\x40\xb2\xe5\xf6\xe5\x6d\x64\x49\x26\xc3\x64\x2e\x74\x4f\x92\x3f\x84\xbc\xfb\x4f\x0f\xc3\x39\xdb\xb3\x93\xed\xe2\x73\x15\x2a\xbf\xbf\xf9\xea\x1f\xe7\xf6\x32\x4d\xa2\x7a\xfd\xb8\xdc\xb7\x7d\x9e\xa6\xb3\x1c\x2f\x6d\x7a\x8c\xd3\x74\xf2\xef\x36\xbd\xfe\x80\x98\xad\xbe\x6d\xd0\x80\x3b\xf5\xc2\x51\x46\xce\x52\x46\x1e\x3c\x50\x2c\x10\x27\xac\xa9\xc6\xec\xd1\x2a\x7a\xb4\x02\x33\xe8\xfa\x7d\xbb\x5f\xa1\xfd\x80\x1e\x6f\x6f\xbe\x42\x03\xf1\xed\x40\xa1\x1c\xf4\xbe\xee\x82\xc7\xf5\xdd\xff\xbb\xef\x4f\x99\x73\x5d\x54\x92\x77\x76\xe5\x65\x64\xd5\x31\xaa\x46\xcc\x98\x78\x09\x28\x8e\x25\x97\x40\xd6\xc9\x74\xc4\x6c\x91\x3b\x53\xac\x39\x0f\x0d\xc9\xfe\xf0\x6e\xb2\xca\x79\xdb\xbf\x3d\x7e\x42\x83\x51\x82\x8e\xa8\x22\xd1\x3a\x55\xa5\x54\x5c\x0a\xf3\x08\xc5\x33\x95\xdc\xe1\x77\x86\x93\x0d\x68\xb0\x3d\x0c\xc3\xe3\xf8\x17\x62\xa7\x77\xbf\x40\x8b\x61\x86\x0b\xb4\xb0\x04\x62\x9e\xe1\x06\x8d\x66\x58\xa1\x95\x19\x36\x79\xdf\x03\x10\x05\x4a\x85\xb4\xf7\xb0\x74\xd4\x84\x58\x33\x26\x37\x64\x4c\xb9\x18\x53\xad\xd4\xa9\x47\xaf\xd1\x58\x71\xa9\x38\x0a\x15\xe1\x52\x84\x22\xca\xd8\x8d\x9c\x45\xa1\x41\x8a\x0b\xc5\xc4\xa4\x38\x7c\x84\x8c\x69\x18\x95\xca\x3a\xac\x56\x43\x11\x5f\x50\x3a\x7a\x48\xb5\xba\xa8\x22\xd9\x92\xc4\xca\xa8\xb1\xe6\xa0\x94\x76\xd2\xd1\x76\x50\x42\xce\x18\xed\x90\x4b\x48\x07\x76\xec\x87\x52\xc5\x0e\x16\x58\x12\xeb\x12\x39\x0a\xcc\xf0\xe9\xeb\x76\xbc\xee\x21\x7f\x5f\x9f\x8b\xbf\xc9\xb6\x7d\x5d\x57\x6b\xd3\xf0\xcb\xfa\x35\x22\x5f\xd6\xa8\xf6\xbe\x9d\x4f\x4f\xc5\xb3\x12\x6d\xfa\xd7\x46\xbc\xbc\xfc\x1f\x00\x00\xff\xff\x28\xb6\x4d\x04\x75\x02\x00\x00")

func resourcesTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYaml,
		"resources/testing_config.yaml",
	)
}

func resourcesTesting_configYaml() (*asset, error) {
	bytes, err := resourcesTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/testing_config.yaml", size: 629, mode: os.FileMode(420), modTime: time.Unix(1528810710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_config.yaml": resourcesDefault_configYaml,
	"resources/testing_config.yaml": resourcesTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
		"testing_config.yaml": &bintree{resourcesTesting_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

