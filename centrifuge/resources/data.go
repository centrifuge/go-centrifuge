// Code generated by go-bindata.
// sources:
// ../../resources/default_config.yaml
// ../../resources/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4d\x6f\x23\x27\x18\xc7\xef\xf3\x29\x90\x7b\x6e\xcc\xdb\x00\x33\xb7\xb4\x4d\xab\x6d\xdd\xc8\x71\xdd\x75\xd3\x1b\x2f\x0f\x36\x6b\x0f\x38\x03\xe3\xd8\xfb\xe9\xab\x89\xd7\x8a\x5a\x29\xae\x14\xa9\x97\x6a\xe7\x34\x7a\x80\x1f\xf0\xff\x21\xb0\x10\x4b\x1f\xfc\xb0\x86\x7b\x28\xcf\xa9\xdf\xb6\xe8\xb5\xb4\x18\x72\x0e\x3a\x6e\xc2\x6e\x77\x57\x36\x8b\x10\xb7\x60\x4e\x55\x3c\x77\xcc\x6d\x85\xd0\x37\x68\x96\xac\xde\xa1\x02\xb9\x84\xb8\x46\x36\xc5\xd2\x6b\x5b\x90\x76\xae\x87\x9c\x21\xa3\x08\xe0\x50\x49\xc8\x00\xca\x50\xd0\x73\x28\x1b\x04\xf1\x80\x0e\xba\x0f\xda\xec\x20\xdf\x54\xe8\x32\x7e\x44\x22\x14\x5c\x8b\x18\x63\x2f\xff\x50\x36\xd0\xc3\xd0\x7d\x59\xdd\x07\xd7\x22\xc5\xd4\xb9\xcd\xa4\x54\x72\xe9\xf5\x7e\x0e\xd0\xe7\xf3\x58\x84\xbe\x45\x93\x69\xd8\xf3\x29\xa1\xf2\x06\xdf\xe0\x1b\x32\x2d\x76\x3f\x65\x8a\x62\x3a\x0d\x7b\x9f\xa7\x0f\xdd\xf2\xe1\x68\x9e\xb7\xc3\x9f\x8f\x8f\x3f\xf8\xe1\xf3\xd2\x1c\xef\x6e\x17\xb0\xbc\xff\x7e\x96\x3e\x9f\x4e\x75\xad\x0e\x0f\x71\xfd\xf1\x30\xff\xf5\xd3\xec\x71\x3b\xf9\x57\x2c\xbb\x60\x3f\x7a\x71\x77\x2f\xba\xed\xd3\x0a\x3e\xad\x7e\x59\xd1\xa7\xf9\x40\xc4\x1f\x7b\xf7\x13\xdb\xfe\x9c\xc8\x92\x75\x1b\xbd\x99\x7f\x57\xff\x06\x75\x24\x67\xec\x25\xae\xdb\x4b\x5a\x97\x4d\x04\x07\xb1\x84\x72\xfa\x51\xdb\x92\xfa\x53\x8b\x26\xf8\x68\x6a\x49\x3c\x70\xec\x80\x3a\x41\xa0\xa9\xb9\xf3\x8d\xd5\x1c\x1a\x41\xbc\x68\xb8\x52\x9e\xb0\x5a\xe3\xc9\x3f\x18\x0b\x58\x87\x5c\xde\x09\xd1\xd1\x6e\x52\xff\x4e\x44\x85\xde\x3c\x4c\x1f\x62\x81\x75\xaf\x4b\x48\xf1\x55\x3a\xc1\xe4\xab\xf4\xbf\x4b\x97\x8c\x32\x62\x78\xc3\xb0\xd0\xd6\x08\x6d\xb0\xe4\x1a\x4b\x26\x95\x67\x52\x78\xdb\x18\x67\xa8\x24\xe2\xaa\x74\x27\x94\x15\x58\x1a\x63\x29\x56\x18\x63\xa1\x1a\x46\x38\x6e\x88\xd0\x42\x51\xe2\x9d\x24\xcc\xd0\x86\xfe\xd7\xd2\xbf\xdc\x20\xaf\xc2\x6b\xf2\x3f\x70\xfa\xd6\x91\xe5\x6f\xd8\x46\x57\x74\xab\xda\x30\xea\xa5\x66\x9e\x63\xae\x88\x27\x94\x31\x8e\x39\x11\x12\x5b\x65\x0d\x60\xe9\xa5\x93\x8d\xbd\xaa\xbb\xe6\x1a\x98\x64\x1e\x37\xc2\x6b\x4f\x9d\x11\x46\x69\x2e\x24\x91\x16\x9b\x46\x81\xf5\x1a\xcb\xda\xb9\x2b\xba\x19\xa7\x5a\x72\xc3\x14\x75\xa4\x71\x5a\xf0\x46\x29\xc3\xa4\x70\x18\xb8\x16\xb5\x30\xd2\x78\xfd\x82\xa8\x9e\x06\x18\x60\x74\x16\x87\x6e\x95\xfa\xed\x68\x10\xd1\xaa\xba\x24\x32\x36\x39\xf0\x7a\xd8\x95\x5b\x6b\xd3\x10\xcb\xbd\xee\xa0\x45\x93\x4e\x87\x38\x2e\x21\x26\x07\xbf\x2f\x66\x2d\x7a\xce\xed\x74\xba\x1b\xdf\x93\x4d\xca\xa5\x6d\x6a\x2e\x2a\x84\xd6\x3a\xcf\xfb\x60\x61\xbc\x1e\x2e\xdf\xb9\x3c\x0b\x5d\x28\x2d\xe2\x92\x50\xa6\x54\x75\xce\x1a\x8e\x65\xa5\x43\x59\x86\x0e\xd2\x50\x5a\x34\x11\x18\xe7\x71\x9a\x4e\x1f\x17\x50\xfa\x30\x1a\xa0\x2f\x88\x10\x0b\xf4\x07\xbd\x1b\xcb\xe3\xb6\xe9\x4b\xbf\x72\x9c\xa7\xb4\xbb\xb5\x16\x72\xbe\x8b\xe3\x0b\xe5\x5a\x54\xfa\x01\xaa\xea\xaf\x00\x00\x00\xff\xff\xa1\x12\xbe\x60\x2d\x07\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1837, mode: os.FileMode(420), modTime: time.Unix(1535718635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcb\x6a\x2c\x3d\x0c\x84\xf7\x79\x8a\x46\x9b\x6c\x7a\x40\xb2\xe5\xf6\xe5\x6d\x64\x49\x26\xc3\x64\x2e\x74\x4f\x92\x3f\x84\xbc\xfb\x4f\x0f\xc3\x39\xdb\xb3\x93\xed\xe2\x73\x15\x2a\xbf\xbf\xf9\xea\x1f\xe7\xf6\x32\x4d\xa2\x7a\xfd\xb8\xdc\xb7\x7d\x9e\xa6\xb3\x1c\x2f\x6d\x7a\x8c\xd3\x74\xf2\xef\x36\xbd\xfe\x80\x98\xad\xbe\x6d\xd0\x80\x3b\xf5\xc2\x51\x46\xce\x52\x46\x1e\x3c\x50\x2c\x10\x27\xac\xa9\xc6\xec\xd1\x2a\x7a\xb4\x02\x33\xe8\xfa\x7d\xbb\x5f\xa1\xfd\x80\x1e\x6f\x6f\xbe\x42\x03\xf1\xed\x40\xa1\x1c\xf4\xbe\xee\x82\xc7\xf5\xdd\xff\xbb\xef\x4f\x99\x73\x5d\x54\x92\x77\x76\xe5\x65\x64\xd5\x31\xaa\x46\xcc\x98\x78\x09\x28\x8e\x25\x97\x40\xd6\xc9\x74\xc4\x6c\x91\x3b\x53\xac\x39\x0f\x0d\xc9\xfe\xf0\x6e\xb2\xca\x79\xdb\xbf\x3d\x7e\x42\x83\x51\x82\x8e\xa8\x22\xd1\x3a\x55\xa5\x54\x5c\x0a\xf3\x08\xc5\x33\x95\xdc\xe1\x77\x86\x93\x0d\x68\xb0\x3d\x0c\xc3\xe3\xf8\x17\x62\xa7\x77\xbf\x40\x8b\x61\x86\x0b\xb4\xb0\x04\x62\x9e\xe1\x06\x8d\x66\x58\xa1\x95\x19\x36\x79\xdf\x03\x10\x05\x4a\x85\xb4\xf7\xb0\x74\xd4\x84\x58\x33\x26\x37\x64\x4c\xb9\x18\x53\xad\xd4\xa9\x47\xaf\xd1\x58\x71\xa9\x38\x0a\x15\xe1\x52\x84\x22\xca\xd8\x8d\x9c\x45\xa1\x41\x8a\x0b\xc5\xc4\xa4\x38\x7c\x84\x8c\x69\x18\x95\xca\x3a\xac\x56\x43\x11\x5f\x50\x3a\x7a\x48\xb5\xba\xa8\x22\xd9\x92\xc4\xca\xa8\xb1\xe6\xa0\x94\x76\xd2\xd1\x76\x50\x42\xce\x18\xed\x90\x4b\x48\x07\x76\xec\x87\x52\xc5\x0e\x16\x58\x12\xeb\x12\x39\x0a\xcc\xf0\xe9\xeb\x76\xbc\xee\x21\x7f\x5f\x9f\x8b\xbf\xc9\xb6\x7d\x5d\x57\x6b\xd3\xf0\xcb\xfa\x35\x22\x5f\xd6\xa8\xf6\xbe\x9d\x4f\x4f\xc5\xb3\x12\x6d\xfa\xd7\x46\xbc\xbc\xfc\x1f\x00\x00\xff\xff\x28\xb6\x4d\x04\x75\x02\x00\x00")

func resourcesTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYaml,
		"resources/testing_config.yaml",
	)
}

func resourcesTesting_configYaml() (*asset, error) {
	bytes, err := resourcesTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/testing_config.yaml", size: 629, mode: os.FileMode(420), modTime: time.Unix(1529575897, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_config.yaml": resourcesDefault_configYaml,
	"resources/testing_config.yaml": resourcesTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
		"testing_config.yaml": &bintree{resourcesTesting_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

