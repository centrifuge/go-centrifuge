// Code generated by go-bindata.
// sources:
// ../../resources/default_config.yaml
// ../../resources/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4b\x93\xe3\x34\x14\x85\xf7\xfe\x15\xaa\xb0\xa6\xa3\x97\xf5\xf0\xae\x81\x86\x1a\x08\x5d\xe9\x10\x26\x34\x3b\x3d\xae\x13\x4d\x62\x29\x6d\xc9\xe9\x64\x7e\x3d\xe5\xce\x84\x06\xaa\x12\xf6\x14\x5e\xb9\xee\x91\x8e\x75\xcf\x67\x5f\x3b\x88\xa5\x0f\xed\xb0\x86\x47\x28\xaf\xa9\xdf\x36\xe8\xbd\xb4\x18\x72\x0e\x26\x6e\xc2\x6e\xf7\x50\x36\x8b\x10\xb7\x60\x4f\x55\x3c\x2f\xcc\x4d\x85\xd0\x57\x68\x96\x9c\xd9\xa1\x02\xb9\x84\xb8\x46\x2e\xc5\xd2\x1b\x57\x90\xf1\xbe\x87\x9c\x21\xa3\x08\xe0\x51\x49\xc8\x02\xca\x50\xd0\x6b\x28\x1b\x04\xf1\x80\x0e\xa6\x0f\xc6\xee\x20\xdf\x55\xe8\xb2\x7f\xb4\x44\x28\xf8\x06\x31\xc6\xde\xee\xa1\x6c\xa0\x87\xa1\xfb\x72\xba\x0f\xbe\x41\x8a\xa9\xb3\x66\x53\x2a\xb9\xf4\x66\x3f\x07\xe8\xf3\x79\x2f\x42\x5f\xa3\xc9\x34\xec\xf9\x94\x50\x79\x87\xef\xf0\x1d\x99\x16\xb7\x9f\x32\x45\x31\x9d\x86\x7d\x9b\xa7\x4f\xdd\xf2\xe9\x68\x5f\xb7\xc3\xef\xcf\xcf\xdf\xb5\xc3\xe7\xa5\x3d\x3e\xdc\x2f\x60\xf9\xf8\xed\x2c\x7d\x3e\x9d\xea\x5a\x1d\x9e\xe2\xfa\xe3\x61\xfe\xf3\xa7\xd9\xf3\x76\xf2\xaf\xb6\xec\x62\xfb\xb1\x15\x0f\x8f\xa2\xdb\xbe\xac\xe0\xd3\xea\xa7\x15\x7d\x99\x0f\x44\xfc\xb6\xf7\x3f\xb0\xed\x8f\x89\x2c\x59\xb7\x31\x9b\xf9\x37\xf5\x2f\x50\x47\x72\xb6\xbd\xc4\x75\x7f\x49\xeb\xd2\x44\xf0\x10\x4b\x28\xa7\xef\x8d\x2b\xa9\x3f\x35\x68\x32\xf9\x87\xb2\x80\x75\xc8\xe5\x6f\x92\x89\x6e\x93\xfa\x1b\xc2\x3e\xe5\xf0\xa7\x5d\x85\xae\x92\xfe\x10\x0b\xac\x7b\x53\x42\x8a\xef\x44\x08\x26\xff\x13\xf9\x2b\x11\x7c\x94\x8c\x32\x62\xb9\x66\x58\x18\x67\x85\xb1\x58\x72\x83\x25\x93\xaa\x65\x52\xb4\x4e\x5b\x6f\xa9\x24\xe2\x06\x3b\x7c\xf4\x42\x39\x81\xa5\xb5\x8e\x62\x85\x31\x16\x4a\x33\xc2\xb1\x26\xc2\x08\x45\x49\xeb\x25\x61\x96\x6a\x7a\x95\x32\x3e\xda\x5a\x92\x16\x38\xf6\x40\xbd\x20\xa0\x6b\xee\x5b\xed\x0c\x07\x2d\x48\x2b\x34\x57\xaa\x25\xac\x36\xf8\x26\xf4\x2f\x9f\xf7\x3b\xf0\x9a\xfc\x07\x98\x5e\x7b\x65\xf9\x15\xda\xe8\x06\x6e\x8d\x3d\xd5\xbc\x96\x04\x24\x53\x9c\x0a\x2d\x8d\x10\x56\x1a\xad\x0d\xd6\xde\x0b\x27\x99\x67\xb5\xf0\x37\x71\x6b\x21\xb0\xc3\x4c\x7b\x46\x08\xaf\x99\x69\xb1\xaf\x95\xab\x85\x10\x92\x32\xaf\x1d\x6d\x8d\xf4\x02\xdc\x0d\xdc\x8c\x53\x23\xb9\x65\x8a\x7a\xa2\xbd\x11\x5c\x2b\x65\x99\x14\x1e\x03\x37\xa2\x16\x56\xda\xd6\xd4\xde\x4f\xaa\xea\x65\x80\x01\x46\x66\x71\xe8\x56\xa9\xdf\x8e\x04\x11\xad\xaa\x4b\x22\xa3\xe4\xa1\x35\xc3\xae\xdc\x3b\x97\x86\x58\x1e\x4d\x07\x0d\x9a\x74\x26\xc4\xf1\x08\x31\x79\xf8\x75\x31\x6b\xd0\x6b\x6e\xa6\xd3\xdd\x38\xec\x37\x29\x97\x46\xd7\x5c\x54\x08\xad\x4d\x9e\xf7\xc1\xc1\x38\x1e\x2e\xd7\xb9\x3c\x0b\x5d\x28\x0d\xe2\x92\x50\xa6\x54\x75\xce\x1a\x8e\x65\x65\x42\x59\x86\x0e\xd2\x50\x1a\x34\x11\x18\xe7\xf1\x31\x9d\x39\x2e\xa0\xf4\x61\x24\x40\xdf\x2c\x42\x2c\xd0\x1f\xcc\x6e\x2c\x8f\x6d\xd3\xb7\x75\xe5\x38\x4f\x69\x77\xef\x1c\xe4\xfc\x10\xc7\xdf\x87\x6f\x50\xe9\x07\xa8\xaa\x3f\x02\x00\x00\xff\xff\x31\xc6\x77\x75\xca\x06\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1738, mode: os.FileMode(420), modTime: time.Unix(1536685747, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcd\x6e\xeb\x38\x0c\x85\xf7\x79\x0a\x83\x9b\x6e\x92\x54\xbf\xd6\x0f\xd0\x07\x18\x0c\x66\x31\x8f\x40\x91\x54\x63\x24\x71\x0c\xd9\x69\x1b\x14\x7d\xf7\x81\xd3\xcc\xbd\xdb\x5b\x40\x0b\x4a\xe2\xf9\xc4\x03\x1d\x59\x0e\xd2\xe4\x7a\xce\x9b\xae\x43\xa2\xcb\x75\x5c\xe6\xb5\xee\xba\x33\x0e\x63\xee\xee\x65\xd7\x1d\xe5\x96\xbb\xa7\x4f\x40\xe6\x26\xf3\x0c\x19\x5c\xd1\x25\x3a\x8b\x35\x04\x8c\x35\x54\x57\x15\xb2\xd1\xce\xab\xe4\x93\x0d\x62\x39\x29\xb1\x1c\x61\x0b\xd4\x6e\xd3\x72\x81\xfc\x09\x34\x4c\x07\x69\x90\x01\x65\xde\x69\x13\x77\xb4\xb4\xb5\xe1\x7e\xbc\xc8\xc7\xb2\x5e\x05\x17\x52\x4f\xe8\xa5\x38\x21\xd7\xd7\x40\x54\x6b\x22\xab\x82\xf2\xae\x37\x0a\x45\xc5\x10\x8d\xe6\xa2\x99\xaa\x0d\x6c\x5d\x71\xda\xa6\x10\x2a\x19\xcf\xbf\x78\x13\x36\x3c\xcf\xeb\xb3\xc3\x1b\x64\xa8\xd1\x50\xb5\x84\x68\xb9\xe8\x44\xda\x47\xc1\xe8\x5c\x35\x51\x82\x8e\xa1\xc0\xd7\x16\x8e\x5c\x21\xc3\x7c\x1f\x18\xee\xdb\xdf\x10\x3e\x9e\x64\x84\x6c\xcd\x16\x46\xc8\xa6\x37\xda\xb9\x2d\x4c\x90\xf5\x16\x1a\xe4\xb8\x85\x19\x4f\xab\x01\xad\x8d\xf6\x51\x53\x29\xa6\x2f\x8a\xbc\x52\x29\x28\x2f\xac\x9c\xf2\x21\xb2\xd3\x29\xe9\xa2\x8b\x95\x64\xd9\x91\xea\x93\xaa\x51\x47\x74\x31\xa2\xb6\x0a\xeb\x3a\xc8\x19\x09\x32\x78\xdb\x6b\xeb\x9d\x26\x55\xa5\x9a\xa0\x7c\x65\x1d\x93\xa3\xca\x29\xb1\x42\x94\x5e\x61\x51\x62\x7c\x4a\x82\x44\x4a\x73\xef\x91\x63\x4d\x36\x05\x43\xda\xaf\xa4\x81\x57\x90\x57\x2e\x28\xcb\xbb\x10\x8d\xdf\x39\x51\x65\x17\x13\xf2\x8e\x8d\x43\xef\xa8\xb7\xce\x22\x6c\xe1\x4d\xda\x3c\x5c\x56\x93\x5f\x4f\x8f\x8f\x9f\x70\x9e\xdf\x2f\x8d\x73\x57\x65\x6c\xef\xd5\xba\xb1\x59\xe2\xd3\x7c\x3e\x3e\x3a\x1e\x91\xc8\xdd\x9f\x26\x62\xb3\x19\x58\xc6\x65\x58\x6e\x7f\x71\xee\xfe\xf9\xf7\xe5\x65\xb3\x39\xca\xed\x1e\xbb\x79\x78\x1d\x87\xf1\xf5\x3b\x81\xd3\xb5\x9c\x06\xfa\x7b\x8d\xde\x7e\xff\xfc\xbd\xe4\x03\xcf\xd3\x49\x9e\x9b\xcc\x97\x6b\x23\x99\x9f\x57\x09\x2e\xd7\x26\x7a\x3f\x5d\xcb\x7e\x92\xf3\xb7\xb8\x0d\x6f\xb8\xc8\x0f\xd4\x47\xb9\x3d\xd4\xb2\x1c\xf0\xba\x1c\xf2\x4f\x40\x0f\xcd\xff\x94\xff\x02\x00\x00\xff\xff\x30\xb1\x7d\x2c\x58\x03\x00\x00")

func resourcesTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYaml,
		"resources/testing_config.yaml",
	)
}

func resourcesTesting_configYaml() (*asset, error) {
	bytes, err := resourcesTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/testing_config.yaml", size: 856, mode: os.FileMode(420), modTime: time.Unix(1536850225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_config.yaml": resourcesDefault_configYaml,
	"resources/testing_config.yaml": resourcesTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
		"testing_config.yaml": &bintree{resourcesTesting_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
