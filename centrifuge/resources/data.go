// Code generated by go-bindata.
// sources:
// ../../resources/default_config.yaml
// ../../resources/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\xcb\x76\xe2\x38\x10\x86\xf7\x7e\x0a\x1d\x66\x3d\xa0\x8b\xad\x8b\x77\x24\x4d\xfa\x12\x92\x03\x84\x0e\x1d\x76\xba\x94\x41\x0d\x58\xc4\x96\xb9\xf4\xd3\xcf\x71\x08\x93\x99\x9c\x09\x33\x0f\x30\xac\xb0\x4a\xf5\x57\xb9\xbe\xdf\x92\x85\x32\x56\xbe\x68\x16\x70\x0f\x71\x1f\xaa\x55\x8e\xde\x96\x26\x4d\x5d\x7b\x5d\x2e\xfd\x7a\x3d\x88\xcb\x89\x2f\x57\x60\x8e\x49\x79\xda\x58\xe7\x09\x42\xbf\xa1\x61\xb0\x7a\x8d\x22\xd4\xd1\x97\x0b\x64\x43\x19\x2b\x6d\x23\xd2\xce\x55\x50\xd7\x50\xa3\x12\xc0\xa1\x18\x90\x01\x54\x43\x44\x7b\x1f\x97\x08\xca\x1d\xda\xe9\xca\x6b\xb3\x86\xba\x9b\xa0\x73\x7e\x2b\x89\x90\x77\x39\x62\x8c\xbd\xfc\x87\xb8\x84\x0a\x9a\xcd\x6b\x77\x5f\x5d\x8e\x24\x93\xa7\x98\x09\x21\xd6\xb1\xd2\xdb\x11\x40\x55\x9f\x72\x11\xfa\x1d\x75\x7a\x7e\x9b\xf6\x08\x15\x5d\xdc\xc5\x5d\xd2\x8b\x76\xdb\x63\x92\x62\xda\xf3\xdb\xa2\xee\x8d\x37\xd3\xf1\xc1\xec\x57\xcd\xfc\xe9\xe9\x53\xd1\xfc\x9a\x9a\xc3\xa0\x3f\x81\xe9\xfd\xf5\x30\xfc\x3a\x1e\xb3\x4c\xee\xc6\xe5\xe2\x71\x37\xba\xfb\x39\x7c\x5a\x75\xfe\x55\x96\x9d\x65\x1f\x0b\x3e\xb8\xe7\x9b\xd5\xf3\x0c\x7e\xce\x6e\x67\xf4\x79\xd4\x10\xfe\x63\xeb\x3e\xb3\xd5\xb7\x40\xa6\x6c\xb3\xd4\xcb\xd1\x55\xf6\x00\x59\x49\x4e\xb2\xe7\x71\xf5\xcf\xd3\x3a\xbf\x84\x77\x50\x46\x1f\x8f\x37\xda\xc6\x50\x1d\x73\xd4\xe9\xbc\x8b\x4c\x60\xe1\xeb\xf8\xb7\x90\x2e\xed\x32\x54\x17\x02\xdb\x50\xfb\x3f\xe5\x12\xf4\x21\xe9\xaf\x65\x84\x45\xa5\xa3\x0f\xe5\x1b\x11\x82\xc9\xff\x44\xfe\x4a\x04\x1f\x04\xa3\x8c\x98\x54\x31\xcc\xb5\x35\x5c\x1b\x2c\x52\x8d\x05\x13\xb2\x60\x82\x17\x56\x19\x67\xa8\x20\xfc\x02\x3b\x7c\x70\x5c\x5a\x8e\x85\x31\x96\x62\x89\x31\xe6\x52\x31\x92\x62\x45\xb8\xe6\x92\x92\xc2\x09\xc2\x0c\x55\xf4\x43\xca\xf8\x60\x32\x41\x0a\x48\xb1\x03\xea\x38\x01\x95\xa5\xae\x50\x56\xa7\xa0\x38\x29\xb8\x4a\xa5\x2c\x08\xcb\x34\xbe\x08\xfd\xf5\xf3\x7e\x03\x9e\x91\xff\xc0\x94\x65\x5d\x4a\xb3\x2e\xc5\xb8\x9b\xd2\xf7\x5c\x09\xfd\xc4\x6e\x43\x98\x0d\xbd\xb7\xe3\xc7\xfd\x74\x39\xbd\x7a\xe2\x87\x5b\x3b\x0a\xc3\x82\x4f\xc6\x4f\xdf\x6e\xb6\xfb\x82\x54\x22\xdb\x0f\x0f\x74\x3e\x61\xdb\x6b\x47\xde\xd3\x7d\x2d\x20\x79\x97\x12\xfc\x51\x81\xf1\xfc\xae\x2f\x3f\x8f\xbe\x54\xbb\xc1\xfc\x4a\xed\xdd\x2a\x7c\xb7\xfd\xfe\xe6\x7a\xfe\x65\xab\xe0\x78\x9c\xa7\x0f\x03\xb9\xb8\xa9\xd8\x72\x7a\xff\xe3\x65\x08\xff\x68\xe3\xf4\x03\x07\xa0\x0b\x16\x50\xd8\x51\x95\x66\x82\x80\x60\x32\xa5\x5c\x09\xcd\xb9\x11\x5a\x29\x8d\x95\x73\xdc\x0a\xe6\x58\xc6\xdd\x45\x0b\x28\xce\xb1\xc5\x4c\x39\x46\x48\x9a\x31\x5d\x60\x97\x49\x9b\x71\xce\x05\x65\x4e\x59\x5a\x68\xe1\x38\xd8\x0b\x16\x60\x29\xd5\x22\x35\x4c\x52\x47\x94\xd3\x3c\x55\x52\x1a\x26\xb8\xc3\x90\x6a\x9e\x71\x23\x4c\xa1\x33\xe7\x2e\x1c\x09\xf8\x20\x0a\xd9\x5a\x47\x2b\x89\x09\x75\xa2\xd0\x59\x66\x25\x66\xc6\x68\x4a\x39\x36\xd6\x01\xa4\x26\x03\xd7\x49\x92\xe7\x06\x1a\x68\xcd\x50\x36\x9b\x59\xa8\x56\xad\x35\x10\x4d\x10\xda\xbf\x3c\xcc\xb4\x8f\x53\xbf\x81\xbb\x87\x1c\x91\x24\x39\x0f\xbb\x4d\x70\x50\xe8\x66\x1d\xfb\xd6\x86\xa6\x8c\xf7\x7a\x03\x39\xea\x6c\xb4\x2f\xdb\xd6\xca\xe0\xe0\xfb\x64\x98\xa3\x7d\x9d\xf7\x7a\xeb\xf6\x6e\x59\x86\x3a\xe6\x2a\x4b\x79\x82\xd0\x42\xd7\xa3\xca\x5b\x68\x4f\xa3\xf3\xef\xb4\x3c\xf4\x1b\x1f\x73\x94\x0a\x42\x99\x94\xc9\x09\x23\x1c\xe2\xb9\x91\xd0\xc4\x1c\x75\x38\xc6\x75\x5b\x66\xa3\x0f\x13\x88\x95\x6f\xe1\xd2\x17\x09\x5f\x46\xa8\x76\x7a\xdd\x2e\xb7\xc3\xa0\x2f\xfb\xe2\x61\x14\xc2\xba\x6f\x2d\xd4\xf5\xa0\x6c\x6f\x2b\x97\xa3\x58\x35\x90\x24\x7f\x04\x00\x00\xff\xff\xa1\xfa\x63\x77\x39\x07\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1849, mode: os.FileMode(420), modTime: time.Unix(1538401750, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4d\x6f\xfb\x36\x0c\xc6\xef\xfe\x14\x02\x2f\xbd\x24\xa9\xde\xdf\x6e\x1b\xb0\xc3\x30\xec\x30\x6c\x40\xcf\x94\x44\x35\x46\x62\xc7\x93\xed\xb6\x41\xd1\xef\x3e\x38\x4d\xb7\xeb\xfa\x07\x6c\x80\x24\xf4\x90\x0f\xa5\x1f\x2d\x47\x6a\xb4\x0e\xb1\x63\x0c\x73\xbe\xac\xe3\x32\x6f\x31\x63\x03\xf6\x63\x64\xb7\x90\xb1\x13\x5d\x23\x7b\x78\x07\x2c\xa5\xd1\x3c\x43\x04\x1f\x12\x47\x6f\x8d\x57\x59\x6b\xad\x31\xd7\xe2\x44\xd2\x56\x11\x2f\x2a\x1b\x83\x24\xb4\x90\x68\x60\x07\xb9\x5d\xa7\xe5\x02\xf1\x1d\x72\x3f\x1d\xa9\x41\x04\xa4\x79\x2f\xa4\xdf\xe7\xa5\x6d\x07\x6e\xe5\x85\xde\x16\x88\x90\x9d\x0b\xd5\x2b\x17\x8a\x73\xbc\x04\x99\x6b\x16\xa5\x14\x8d\xbe\x2a\x51\x0c\x72\x2c\xd9\x57\x89\x3c\x49\x14\x9a\x0b\xe5\x78\x51\x56\xf1\xaa\x7c\xe6\xd9\xe3\xbf\xfd\x26\x6c\x38\xcc\xdb\xd8\xfe\x05\x22\x28\x9b\x85\xf5\xe4\x54\xaa\xc1\xf3\x4a\xce\x24\xee\xa4\xab\x3e\x70\x74\x02\x0b\x7c\xec\xe0\x54\x2a\x44\x98\x6f\x86\xe1\x96\xfe\xd7\xa4\x9c\xce\x34\x42\x54\x72\x07\x23\x44\x69\xa5\xd0\x7a\x07\x13\x44\xb1\x83\x06\xd1\xef\x60\xc6\xf3\xb6\x40\x21\x91\x48\x58\x52\x39\x78\x11\xb4\x2e\x82\x32\xca\xe4\x93\x74\xa4\xc9\x12\x4f\x26\xd5\xa4\x55\x22\xae\x9c\x45\x53\xbc\xf7\xa1\xa2\x75\x01\xa5\x17\x52\x6e\x46\x06\xcc\xdb\x55\x64\x21\x7d\xf2\xc2\x18\x63\x12\x0a\xc2\xe2\x32\x52\xe0\x96\x93\xf7\x5a\x62\xcd\xe8\x95\xb1\x85\x5b\x6d\x4c\x2a\x01\x8d\x33\x32\xa1\xad\x39\xf3\x20\xa9\x6e\x9d\xfa\x02\x11\xb4\x21\x6e\x39\xda\x7d\x91\x48\x7b\xad\x92\xdf\x07\x29\xeb\x5e\x6b\x2f\x83\x0e\xa1\x28\x57\x60\x07\x2f\xd4\xe6\xfe\xb2\x2d\xf9\xf1\x70\x7f\xf8\x09\xe7\xf9\xf5\xd2\x4a\x64\x0f\x5f\xa5\x3b\x03\x91\xfd\x5f\x04\xba\xae\x2f\x34\x2e\xfd\x72\xfd\xb5\x44\xf6\xd3\x1f\xbf\xfc\xbc\xfd\x5d\xf7\xf7\x4a\x2b\x6d\xb0\x8d\xeb\xf0\x74\x69\x27\x6a\x73\x64\xb2\x63\xec\xf5\x96\x3c\x61\xbf\xfc\xd5\x0f\xf4\xfb\x9f\x91\x89\xae\x3b\xd1\xf5\x46\xe6\xdc\x3f\x8f\xfd\xf8\xfc\x09\xe9\xb4\xa6\x73\x9f\x7f\xdb\xe8\x3c\x1c\x1e\x3f\x3f\x7a\xc3\x61\x3a\xd3\x63\xa3\xf9\xb2\xb6\x4c\xf3\xe3\x26\xc1\x65\x6d\x24\x0e\xd3\x9a\x0e\x13\x0d\x9f\xe2\xd6\xbf\xe0\x42\xdf\x50\x9f\xe8\x7a\x57\xd3\x72\xc4\x75\x39\x7e\xc7\xc5\x5d\xf2\x23\x16\xbe\xa4\x5f\xf3\xff\x09\x00\x00\xff\xff\xe3\x85\x57\xf5\xb6\x03\x00\x00")

func resourcesTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYaml,
		"resources/testing_config.yaml",
	)
}

func resourcesTesting_configYaml() (*asset, error) {
	bytes, err := resourcesTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/testing_config.yaml", size: 950, mode: os.FileMode(420), modTime: time.Unix(1538078818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_config.yaml": resourcesDefault_configYaml,
	"resources/testing_config.yaml": resourcesTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
		"testing_config.yaml": &bintree{resourcesTesting_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
