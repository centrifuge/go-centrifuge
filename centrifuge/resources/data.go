// Code generated by go-bindata.
// sources:
// ../../resources/default_config.yaml
// ../../resources/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x4f\x6f\xe3\x36\x10\xc5\xef\xfa\x14\x84\xef\x8d\xf9\x9f\x94\x6e\x69\x9b\x16\xdb\xa6\x81\xe3\xba\x9b\xa6\xb7\x21\x39\xb4\xb9\xb6\x28\xaf\x44\x25\xf6\x7e\xfa\x42\xf6\x66\xb7\x29\x10\xf7\x5e\xac\x4e\xc4\x7b\xc4\x1b\xcc\xfb\x49\x4a\x01\x73\x49\xe5\xf8\x2e\x34\x84\x55\x95\xc7\x5c\xfa\x14\xc7\x35\xde\x61\x79\xee\xfa\x6d\x43\xbe\x4a\xcb\x71\x18\x12\xe4\x4d\xda\xed\x6e\xca\x66\x99\xf2\x16\xdd\xb1\xca\xe7\x8b\x43\x43\x2a\x42\x0a\x0e\x25\xe5\xf5\xe9\x4c\x48\x0a\x0d\x11\x42\x9c\xce\x58\x36\xd8\xe3\xd8\x7e\xce\x9d\xe6\x59\x61\xcf\x9e\xeb\xba\x32\x94\x1e\xf6\x0b\xc4\x7e\x68\x4e\x1a\x21\xdf\x91\xd9\x3c\xed\xe5\x9c\x71\x73\x45\xaf\xe8\x15\x9b\x17\xbf\x9f\x0b\xcb\x29\x9f\xa7\x7d\x1c\xe6\xf7\xed\xea\xfe\xe0\x9e\xb7\xe3\x5f\x8f\x8f\x3f\xc6\xf1\xd3\xca\x1d\x6e\xae\x97\xb8\xba\xfb\xe1\xb6\xfb\x74\x3c\x2a\x65\x9f\xee\xf3\xfa\xfd\xd3\xe2\xb7\x0f\xb7\x8f\xdb\xd9\x7f\xc6\x8a\x97\xd8\xf7\x51\xdf\xdc\xe9\x76\xfb\xf1\x01\x3f\x3c\xfc\xfa\xc0\x3f\x2e\x46\xa6\xff\xdc\x87\x9f\xc5\xf6\x97\x8e\xad\x44\xbb\x81\xcd\xe2\x7b\xf5\x3b\xaa\xcc\xce\xb1\xbe\xcb\xa5\x07\x5f\xae\x43\xe8\x71\x18\xf0\xcb\x12\x2f\xfd\xfe\x04\xbe\x74\xfd\xb1\x21\xb3\xd9\xbf\x9c\x25\xae\xd3\x50\x5e\x59\x90\xfd\xa6\xeb\x5f\x19\x15\x79\x13\xc4\xbb\x5c\x70\xdd\x43\x49\x5d\x6e\xbe\xd4\xce\x28\xfb\x56\xfb\x3f\x6b\xa7\x07\x23\xb8\x60\x4e\xd6\x82\x6a\xf0\x4e\x83\xa3\x46\x02\x35\xc2\xd8\x28\x8c\x8e\xbe\x76\xc1\x71\xc3\xf4\x05\x40\xf4\x10\xb4\xf5\x9a\x1a\xe7\x3c\xa7\x96\x52\xaa\x6d\x2d\x98\xa4\x35\xd3\xa0\x2d\x67\x31\x18\x26\x1c\xaf\xf9\x9b\x28\xe9\xc1\x29\xc3\x22\x4a\x1a\x90\x07\xcd\xb0\x56\x32\xc4\xda\x83\xc4\x5a\xb3\xa8\x6b\x69\x6d\x64\x42\x01\xbd\x08\xfd\xf3\xd7\xf7\x15\xb8\x62\xff\x03\xa6\x6f\xbd\xb2\xf2\x0d\xda\xe4\x02\x6e\xe5\x29\x08\x0a\xd6\xc7\x28\xa2\x93\x14\x02\x50\xa9\x1c\x8d\x54\x09\x87\x60\x02\x38\x89\x92\xc9\x8b\xb8\x85\x0a\x88\x14\x0d\xe7\xde\xf9\x1a\x6c\x4d\x65\x54\xb5\xe7\xca\x19\xe4\x0e\x20\x46\x6d\x04\xc6\x70\x01\xb7\x35\x4a\x7a\x70\x3e\x50\xa3\xa9\x33\x8e\x2b\xaf\x28\x0d\xa0\xc0\x0b\x2b\x05\xd3\x3a\xd0\xe0\xad\x9e\x55\xd5\xcb\xe6\x13\xb6\x80\x11\xc6\x5d\xb9\xf6\xbe\x1b\x73\xb9\x83\x16\x1b\x32\x6b\x21\xe5\x69\x54\xee\x02\xfe\xb1\xbc\x6d\xc8\xf3\xd0\xcc\xe7\xbb\xce\xc3\x6e\xd3\x0d\xa5\xa9\x95\xd4\x15\x21\x6b\x18\x16\x7d\xf2\x38\xfd\x06\x5e\x9e\xb3\x7c\x9b\xda\x54\x1a\x22\x0d\xe3\xc2\xda\xea\xdc\x29\x1e\xca\x03\xa4\xb2\x4a\x2d\x76\x63\x69\xc8\x4c\xd0\x61\x9a\xd2\xc2\x61\x89\xa5\x4f\x53\xd1\xfc\x94\x90\x72\xc1\xfe\x09\x76\x93\x3c\x6d\xc7\x4f\xf7\xca\x61\xd1\x75\xbb\x6b\xef\x71\x18\x6e\x32\xb8\x1d\x86\x86\x94\x7e\xc4\xaa\xfa\x3b\x00\x00\xff\xff\xe9\xa1\x76\x58\x5f\x06\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1631, mode: os.FileMode(420), modTime: time.Unix(1528982406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcb\x6a\x2c\x3d\x0c\x84\xf7\x79\x8a\x46\x9b\x6c\x7a\x40\xb2\xe5\xf6\xe5\x6d\x64\x49\x26\xc3\x64\x2e\x74\x4f\x92\x3f\x84\xbc\xfb\x4f\x0f\xc3\x39\xdb\xb3\x93\xed\xe2\x73\x15\x2a\xbf\xbf\xf9\xea\x1f\xe7\xf6\x32\x4d\xa2\x7a\xfd\xb8\xdc\xb7\x7d\x9e\xa6\xb3\x1c\x2f\x6d\x7a\x8c\xd3\x74\xf2\xef\x36\xbd\xfe\x80\x98\xad\xbe\x6d\xd0\x80\x3b\xf5\xc2\x51\x46\xce\x52\x46\x1e\x3c\x50\x2c\x10\x27\xac\xa9\xc6\xec\xd1\x2a\x7a\xb4\x02\x33\xe8\xfa\x7d\xbb\x5f\xa1\xfd\x80\x1e\x6f\x6f\xbe\x42\x03\xf1\xed\x40\xa1\x1c\xf4\xbe\xee\x82\xc7\xf5\xdd\xff\xbb\xef\x4f\x99\x73\x5d\x54\x92\x77\x76\xe5\x65\x64\xd5\x31\xaa\x46\xcc\x98\x78\x09\x28\x8e\x25\x97\x40\xd6\xc9\x74\xc4\x6c\x91\x3b\x53\xac\x39\x0f\x0d\xc9\xfe\xf0\x6e\xb2\xca\x79\xdb\xbf\x3d\x7e\x42\x83\x51\x82\x8e\xa8\x22\xd1\x3a\x55\xa5\x54\x5c\x0a\xf3\x08\xc5\x33\x95\xdc\xe1\x77\x86\x93\x0d\x68\xb0\x3d\x0c\xc3\xe3\xf8\x17\x62\xa7\x77\xbf\x40\x8b\x61\x86\x0b\xb4\xb0\x04\x62\x9e\xe1\x06\x8d\x66\x58\xa1\x95\x19\x36\x79\xdf\x03\x10\x05\x4a\x85\xb4\xf7\xb0\x74\xd4\x84\x58\x33\x26\x37\x64\x4c\xb9\x18\x53\xad\xd4\xa9\x47\xaf\xd1\x58\x71\xa9\x38\x0a\x15\xe1\x52\x84\x22\xca\xd8\x8d\x9c\x45\xa1\x41\x8a\x0b\xc5\xc4\xa4\x38\x7c\x84\x8c\x69\x18\x95\xca\x3a\xac\x56\x43\x11\x5f\x50\x3a\x7a\x48\xb5\xba\xa8\x22\xd9\x92\xc4\xca\xa8\xb1\xe6\xa0\x94\x76\xd2\xd1\x76\x50\x42\xce\x18\xed\x90\x4b\x48\x07\x76\xec\x87\x52\xc5\x0e\x16\x58\x12\xeb\x12\x39\x0a\xcc\xf0\xe9\xeb\x76\xbc\xee\x21\x7f\x5f\x9f\x8b\xbf\xc9\xb6\x7d\x5d\x57\x6b\xd3\xf0\xcb\xfa\x35\x22\x5f\xd6\xa8\xf6\xbe\x9d\x4f\x4f\xc5\xb3\x12\x6d\xfa\xd7\x46\xbc\xbc\xfc\x1f\x00\x00\xff\xff\x28\xb6\x4d\x04\x75\x02\x00\x00")

func resourcesTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYaml,
		"resources/testing_config.yaml",
	)
}

func resourcesTesting_configYaml() (*asset, error) {
	bytes, err := resourcesTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/testing_config.yaml", size: 629, mode: os.FileMode(420), modTime: time.Unix(1528810710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_config.yaml": resourcesDefault_configYaml,
	"resources/testing_config.yaml": resourcesTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
		"testing_config.yaml": &bintree{resourcesTesting_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

