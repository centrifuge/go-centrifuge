// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../resources/.default_config.yaml.swp
// ../../resources/default_config.yaml
package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYamlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xda\x3d\x8f\xe3\x44\x1c\x06\xf0\xe7\x28\x71\xb2\xe1\xa0\x44\x42\x83\x4f\x14\x14\x89\xdf\x1d\xdb\x34\x2c\xc7\x81\x96\xdb\x5b\x65\x97\xdc\x2e\x0b\x42\x30\x99\x19\x27\x73\x89\xed\x9c\x3d\xde\x4d\x8e\xb7\x4f\x40\x43\x45\x47\x73\x42\xa2\x03\x4a\x90\xf8\x00\x7c\x01\x90\x28\x79\xe9\xe1\x13\x20\x6f\x92\x45\x9c\x40\x4b\x03\x68\x61\x7e\x8d\x93\xd1\xf8\xf1\xcc\xfc\x27\x45\xe4\x19\xd9\x87\x3b\xb7\x48\xd4\xb3\x01\xe0\x11\xe0\xd9\x4f\xae\xbe\xd6\x6d\x03\x4f\xb4\x80\x13\x3a\x2e\x69\xae\x70\x91\xd3\xa2\x9c\xe6\x72\x71\x61\xbf\x77\xd7\x81\x56\x73\x83\xc5\xac\xaa\x64\xd6\x58\xaa\x49\x3d\xea\xb1\x22\xb3\xae\x8b\x5c\x95\x32\xad\xc7\x62\x27\x67\xd6\xb8\xe8\xb2\xf3\x06\xab\x14\x55\x51\x97\x4c\x54\x16\x17\x29\xad\x67\xea\x0d\x56\xe4\xa9\x1c\xf7\x96\x34\x9b\x5d\xf8\x60\x4d\xfb\xbf\xab\x55\xda\x8d\xda\xf0\x5c\xe7\xec\xa7\x7e\xcd\x7c\x92\x3c\xf6\xe8\xed\x7f\x7b\x54\x9a\xa6\x69\x9a\xa6\x69\x9a\xa6\xfd\x83\xd4\xfc\x0a\xde\x03\xf0\xd0\xfa\xfb\x53\xeb\xeb\x95\x07\xae\x9a\xa6\x69\x9a\xa6\x69\x9a\xa6\x69\x9a\xa6\x5d\x5e\x94\x03\xe5\xc3\x80\x69\xac\xde\xff\x6f\xfe\xff\xff\xd2\x01\x7e\xee\x00\x5f\x76\x80\x4f\x3b\xc0\xfd\x0e\xf0\x61\x07\x78\xbb\x03\x4c\x3a\xc0\xd5\x0e\xf0\xc5\x16\x70\x7f\x0b\x78\x73\x0b\x78\x7c\x0b\xf8\xb6\x0d\x7c\xd3\x06\x3e\x6b\x03\x1f\xb7\x81\x0f\xda\xc0\x33\x6d\xe0\x87\x16\xf0\x7d\x0b\xf8\xba\x05\x7c\xde\x02\xf2\x16\xf0\x74\x0b\xf8\xc9\x00\x7e\x34\x80\xef\x0c\xe0\x2b\x03\xf8\xc8\x00\xde\x37\x80\xa5\x01\xbc\x6e\x00\x37\x0d\xc0\x35\x80\x6b\xc6\x7a\x7c\x9a\xa6\x69\x9a\xa6\x69\x9a\xf6\xf7\x23\x84\x32\x56\xd4\xb9\xaa\x12\xf2\xd6\x3b\x20\x44\xe6\x4a\x94\x27\x74\x76\x20\x54\xb9\x4c\x88\xe9\xd8\x76\x56\x99\x20\x24\xa3\x8b\xa6\x4d\x8a\x2a\x21\xae\x6d\x83\x10\x56\xe4\x4a\x2c\xd4\x11\x95\x6a\x28\x33\x51\xd4\x2a\x21\xa6\x67\x9f\xf5\x1e\xd3\x6a\x57\x66\x52\x25\xc4\xef\x3b\xae\x17\x45\xab\xb6\x41\x29\x99\x48\x88\x6f\xdb\x67\x09\x79\xc1\xc5\xed\x83\xdd\x84\x9c\x56\x89\x65\xcd\x0a\x46\x67\x93\xa2\x52\x49\x1c\xf8\x21\x08\x59\x1f\x87\xdd\x5e\x8d\x70\x8f\x66\x22\x21\x66\x46\x65\x6e\x42\xa8\x89\x28\x45\x9d\x25\xcd\x14\x1a\x34\x67\x93\xa2\x3c\x10\x63\x59\xad\x06\x6e\x2f\x46\x41\xdf\x49\x85\x6f\x73\xe1\xf2\xd0\x11\x71\xe0\xf3\x34\x66\xd4\x17\x71\xe8\xa4\x61\xec\x47\x51\xea\x78\x01\xb5\xcd\x75\x84\xe4\x22\x57\x52\x2d\x7f\x17\x92\xc6\xbe\xd3\x67\x5c\x70\xc7\xf3\x46\x34\xf2\x7c\xee\xb3\x94\xb3\x50\xf8\x81\xcb\x47\xdc\x4d\x59\xe0\x86\x7d\x5f\x3c\x18\xf2\x02\x65\xaa\x58\x67\xd8\x41\x14\x0b\xee\x47\x2e\x4d\x23\x1e\x46\x76\x9c\xda\xae\x9b\x32\xc7\xa1\xd4\x8b\xe3\x94\x45\x34\x8a\x3c\x1e\xb8\xab\x8c\x66\x59\x4b\xca\xd4\x36\xe7\xa5\xa8\xaa\x66\xbd\xcf\xda\x37\x53\xde\x13\xea\xb4\x28\xa7\x3b\x3c\x21\xfe\x66\xf6\x5d\x62\x5a\x72\xee\x5b\x8e\xdb\xef\xd9\x3d\xbb\xe7\x58\x8a\xcd\x2d\x2f\x72\x6d\xcf\x92\xf3\xb4\xb2\xf6\xb3\xc3\x34\xbc\xb1\x17\x66\xd3\xbb\x47\xe2\xce\xd1\xcd\x23\xf7\xee\xa0\x76\xc2\x57\xe6\xfc\x45\x6f\xfa\x52\xe1\x0c\xbd\x6c\x42\x27\x83\xe7\x82\x97\x45\x90\x3b\xe6\x85\xb1\xee\x26\x76\xb8\xbf\x18\x9d\x4e\xeb\x57\x8f\x8f\x9f\x4f\xeb\x7b\xc3\xd1\xe2\xc6\xf6\x81\x18\xee\x5d\xdf\x2d\xee\x2d\x97\x41\x10\x9d\xec\xe7\xe3\xc3\x93\xc1\xad\x3b\xbb\xc7\xd3\x55\xec\xa8\x28\x54\xa5\x4a\x3a\x1f\x08\x51\x56\x09\x56\xab\x96\x90\xc0\x69\xf6\xd4\xf9\xb1\xe8\x6e\x59\x57\x95\xa4\xf9\x44\xce\x66\x5d\xa1\x26\xdd\x52\xe6\x53\x31\x5a\xfe\xe7\x2a\xfe\x67\xf5\xbe\xfc\x55\xfd\x83\x1d\x1b\x79\x91\x77\x5e\x71\xcf\x6b\x3e\x2b\x51\x29\x99\x8f\x13\x82\x7c\xd5\xaf\x59\x80\xdf\xf6\xc1\xfa\xe6\xe4\x2f\x6c\x0d\x60\x53\x8b\xe6\x51\x0e\x7e\x0d\x00\x00\xff\xff\x1f\x82\x91\x54\x00\x30\x00\x00")

func resourcesDefault_configYamlSwpBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYamlSwp,
		"resources/.default_config.yaml.swp",
	)
}

func resourcesDefault_configYamlSwp() (*asset, error) {
	bytes, err := resourcesDefault_configYamlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/.default_config.yaml.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1527884113, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x93\xcd\x6e\xdb\x3a\x10\x85\xf7\x7a\x0a\xc2\x7b\x47\xfc\x93\x4c\x71\x97\x7b\x9b\x16\x6d\x5d\xc3\x71\xdd\xb8\xe9\x8e\x22\x87\x16\x63\x8b\x72\x48\x2a\xb1\x53\xf4\xdd\x0b\xd9\x4e\x8b\x16\x28\xb2\xcf\x8e\x38\x33\xf8\x46\x67\xce\xc8\x19\xf0\xc9\xa5\xc3\x7b\x23\x11\xc9\x32\x0d\x3e\x05\x67\xfb\x35\xcc\x20\x3d\x76\x61\x23\xd1\x6f\x69\x1c\xfa\x18\x9d\xf2\x8d\xdb\x6e\xc7\x90\x9a\x71\x70\x7e\x03\xf5\x21\xf3\xa7\xde\x28\x51\x86\x50\x82\x98\x9c\x5f\x1f\xdf\x08\x39\x23\x11\x63\xec\xf8\x86\xd4\x40\x80\xbe\x3d\xa3\x87\x91\x82\x89\x53\xad\xee\xba\x14\x53\x50\xbb\x39\x40\x88\xf2\xa8\x21\x34\x46\xa3\xdc\xed\x78\x4e\xe8\xe4\x02\x5f\xe0\x0b\x92\x27\xbd\xcb\x99\xa0\x98\xe6\x6e\x67\x63\x7e\xdd\x2e\xaf\xf7\xf5\xe3\xa6\xff\x76\x7b\xfb\xc6\xf6\x4f\xcb\x7a\x7f\x75\xb9\x80\xe5\xec\xff\x69\xf7\x74\x38\x14\x85\x78\xb8\xf6\xeb\x9b\x87\xf9\xa7\xbb\xe9\xed\x66\xf4\x22\x96\x3d\x63\x6f\x6c\x79\x35\x2b\xdb\xcd\xfd\x0a\xee\x56\x1f\x57\xf4\x7e\xde\x93\xf2\xeb\xce\xbc\x63\x9b\x0f\x1d\x59\xb2\xb6\x51\xcd\xfc\xbf\xe2\x33\x14\x9e\x0c\x58\xdd\xf9\x14\x94\x4e\x97\xc6\x04\x88\x11\xe2\xd9\xff\xb0\x81\xd3\x86\xdf\x2a\x9d\xba\x70\x90\x68\x84\xf7\xb8\x10\x15\x18\x2e\xa8\xb2\xc2\x94\x02\x57\x16\x53\x6a\x35\x21\x4a\xb1\xaa\xb2\x5a\x28\x21\x98\x29\xe8\xe8\x2f\xc6\x02\xd6\x2e\xa6\x33\xc4\x56\x9c\x4c\xb4\x01\x43\x18\xab\x95\x60\xdc\x70\x6d\x8d\x2e\x81\x17\xd4\xd4\x86\x5a\x5d\xd0\x72\xc2\xe1\x19\xa2\xbc\x6e\xba\xf0\x07\xa2\x2e\x26\xc4\x02\xc7\x06\xa8\x29\x09\x54\x05\x37\xb6\xd2\x8a\x43\x55\x12\x5b\x56\x5c\x08\x4b\x58\xa1\xf0\x28\x1b\x2c\xbe\x78\x08\xf2\x57\xe4\x05\x79\x05\xa9\xfe\xeb\x68\xf9\xb1\xf0\xea\x13\x7f\x76\x3e\xc4\x66\xc0\xaa\x7e\x9b\x2e\xb5\xee\x7a\x9f\x66\xaa\x05\x89\x46\xad\x72\x7e\x18\xe5\x3b\x03\x5f\x16\x53\x89\x1e\xa3\xcc\xf3\x6d\xa7\xd5\xb6\xe9\x62\x92\x55\xc1\xcb\x0c\xa1\xb5\x8a\xf3\xe0\x34\x48\xc4\x31\xc6\xf8\xa4\x4c\x5d\xeb\x92\x44\x7c\x42\x28\x13\xe2\xfc\x03\xc1\x3e\xad\x94\x4b\x4b\xd7\x42\xd7\x27\x89\x46\x0c\xc7\x61\x40\xab\xf6\x0b\x48\xc1\x0d\x3b\xa6\x47\x82\xf3\x09\xc2\x83\xda\x0e\xf2\x60\x8c\x60\xdc\x1e\x5b\xd5\xe9\x0b\xa3\x44\xdf\x7f\x64\xd9\xcf\x00\x00\x00\xff\xff\x24\x75\xb5\xaf\xde\x04\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1246, mode: os.FileMode(420), modTime: time.Unix(1527884096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/.default_config.yaml.swp": resourcesDefault_configYamlSwp,
	"resources/default_config.yaml": resourcesDefault_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		".default_config.yaml.swp": &bintree{resourcesDefault_configYamlSwp, map[string]*bintree{}},
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

