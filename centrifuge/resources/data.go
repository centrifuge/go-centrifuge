// Code generated by go-bindata.
// sources:
// ../../resources/default_config.yaml
// ../../resources/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x4f\x77\xda\x38\x14\xc5\xf7\xfe\x14\x3a\xcc\x7a\x40\x96\x2c\xf9\xcf\x8e\xa6\x49\x3b\x0d\xc9\x00\xa1\xa1\xb0\x93\xa5\x67\x50\xc1\x92\x23\xc9\x60\xfa\xe9\xe7\x18\xca\x99\x99\x9c\x49\x3a\x5e\xd9\x7a\x7e\xf7\x49\xf7\x77\x8f\x24\x98\xe0\x74\xd5\x6e\xe0\x11\xc2\xd1\xba\x5d\x81\x5c\xeb\xbd\x16\x66\xab\xf7\xfb\xc8\x5c\x16\x7d\x11\x21\xf4\x1b\x9a\x58\x29\xf6\x28\x80\x0f\xda\x6c\x90\xb4\x26\x38\x21\x03\x12\x4a\x39\xf0\x1e\x3c\x32\x00\x0a\x05\x8b\x4a\x40\x1e\x02\x3a\xea\xb0\x45\x60\x0e\xe8\x20\x9c\x16\xe5\x1e\xfc\x30\x42\xd7\xfe\x5e\x12\x21\xad\x0a\x44\x29\x3d\xbf\x43\xd8\x82\x83\xb6\xfe\xb9\x93\x3f\x54\x81\x32\x9a\x5d\x6a\xa5\xb5\xc1\x07\x27\x9a\x29\x80\xf3\x97\x5e\x84\x7e\x47\x83\x91\x6e\x92\x51\x4c\xd2\x21\x1e\xe2\x61\x3c\x0a\xb2\x19\xd1\x8c\x60\x32\xd2\x4d\xe5\x47\xb3\x7a\x31\xeb\xca\xe3\xae\x5d\xaf\x56\x1f\xab\xf6\xc7\xa2\xec\x6e\xc7\x73\x58\x3c\xde\x4c\xec\x8f\xd3\x89\xb1\xec\x30\x33\x9b\xe7\xc3\xf4\xe1\xfb\x64\xb5\x1b\xfc\x52\x96\x5e\x65\x9f\x2b\x7e\xfb\xc8\xeb\xdd\xcb\x12\xbe\x2f\xef\x97\xe4\x65\xda\xc6\xfc\x5b\xa3\x3e\xd1\xdd\x17\x1b\x2f\x68\xbd\x15\xdb\xe9\x07\xf6\x04\xcc\xc4\x17\xd9\xab\x5d\xe3\xab\x5b\xd7\x43\x68\x05\x26\xe8\x70\xba\x13\x32\x58\x77\x2a\xd0\x60\xf0\xaa\x32\x87\x8d\xf6\xe1\x5f\x25\x61\xe4\xd6\xba\x77\x0a\x8d\xf5\xfa\x95\x5c\x23\x4e\x35\x98\xf0\x67\xb9\xd7\x1b\x11\xb4\x35\xe7\x5a\x84\xfe\x49\xfc\x6f\x2a\x2c\xfe\x1f\xc6\x53\x36\x24\x84\x0d\x09\xc6\xc3\x84\xbc\x36\x3f\x26\x1f\xe9\xbd\xb5\xcb\x89\xd6\x72\xf6\x7c\x5c\x6c\x17\x1f\x56\xbc\xbb\x97\x53\x3b\xa9\xf8\x7c\xb6\xfa\x72\xd7\x1c\xab\xd8\xa5\xec\x38\xe9\xc8\x7a\x4e\x9b\x1b\x15\xbf\x46\xf0\x73\x40\xc6\x87\x24\xc6\x6f\x0d\x98\xad\x1f\xc6\xd9\xa7\xe9\x67\x77\xb8\x5d\x7f\xc8\x8f\x6a\x67\xbf\xca\xf1\xb8\xbe\x59\x7f\x6e\x72\x38\x9d\xd6\xc9\xd3\x6d\xb6\xb9\x73\x74\xbb\x78\xfc\x76\x3e\xf0\x7f\x66\x2d\x79\x03\x13\x7a\x93\x13\xee\x72\xac\x48\x9e\xb0\x34\x86\x94\x66\x09\xe1\x79\x2a\x38\x2f\x53\x91\xe7\x02\xe7\x4a\x71\x99\x52\x45\x19\x57\xef\x10\xc5\x5d\xce\x39\x96\x98\xe6\x8a\xc6\x71\xc2\xa8\xa8\xb0\x62\x99\x64\x9c\xf3\x94\x50\x95\x4b\x52\x89\x54\x71\x90\x6f\xb2\xc7\x1d\x4d\x88\x48\x93\x92\x66\x44\xc5\xb9\x12\x3c\xc9\xb3\xac\xa4\x29\x57\x18\x12\xc1\x19\x2f\xd3\xb2\x12\x4c\xa9\x77\x52\x82\xbb\xb4\xca\x58\xa2\x2a\x91\x67\x38\x26\x2a\xad\x04\x63\x32\xc3\xb4\x2c\x05\x21\x1c\x97\x52\x01\x24\x25\x03\xf5\x8b\x3c\xbd\xb4\xd0\x42\x1f\x14\xd3\xd6\x4b\xeb\x76\x7d\x6c\x10\x89\x10\x3a\x9e\x3f\x96\x42\x87\x85\xae\xe1\xe1\xa9\x40\x71\x14\x5d\x41\xf4\x0d\x0a\x2a\xd1\xee\xc3\x58\x4a\xdb\x9a\xf0\x28\x6a\x28\xd0\xa0\x16\xda\xf4\x13\x8d\x55\xf0\x75\x3e\x29\xd0\xd1\x17\xa3\xd1\xbe\xbf\x8a\xb6\xd6\x87\x22\x67\x09\x8f\x10\xda\x08\x3f\x75\x5a\x42\x81\x62\x7c\x7d\x2e\xcb\x13\x5d\xeb\x50\xa0\x24\x8d\x09\xcd\xb2\xe8\x82\x18\xba\x70\xdd\x88\x6d\x43\x81\x06\x1c\x63\xdf\x8f\xa9\x45\x37\x87\xe0\x74\x0f\x9e\x9c\x25\xb4\x09\xe0\x0e\x62\xdf\x2f\xf7\x46\x91\xf3\x7f\xa1\x9b\x5a\xbb\x1f\x4b\x09\xde\xdf\x9a\xfe\x72\x53\x05\x0a\xae\x85\x28\xfa\x2b\x00\x00\xff\xff\xb0\x3e\x38\x9d\x54\x05\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1364, mode: os.FileMode(420), modTime: time.Unix(1540370237, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xcb\x6e\xe3\x3a\x0c\xdd\xfb\x2b\x0c\x6e\xb2\x71\x52\xbd\x5f\x7f\x70\x71\x71\x57\x77\x80\xae\x29\x89\x6a\x8c\xc4\x8e\x47\xb6\xdb\x06\x45\xff\x7d\xe0\x34\x9d\x6e\xa7\x03\x69\x41\x12\x3a\x87\x87\xe2\xa1\xe5\x48\x95\xd6\x21\x34\x6d\x8b\x29\x5d\xd6\x71\x99\xb7\xb8\x6d\x07\xec\xc7\xd0\xde\xc2\xb6\x3d\xd1\x35\xb4\xbb\x37\xc0\x9c\x2b\xcd\x33\x04\x70\x3e\x32\x74\x46\x3b\x99\x94\x52\x0a\x53\xc9\x96\x47\x65\x24\xb1\x2c\x93\xd6\x48\x5c\x71\x81\x1a\x3a\x48\xf5\x3a\x2d\x17\x08\x6f\x90\xfa\xe9\x48\x15\x02\x20\xcd\x7b\x2e\xdc\x3e\x2d\x75\x7b\x70\x2b\x2f\xf4\xba\x40\x80\x64\xad\x2f\x4e\x5a\x9f\xad\x65\xd9\x8b\x54\x12\xcf\x39\x2b\x74\x45\xf2\xac\x91\x61\x4e\xae\x08\x64\x51\x20\x57\x8c\x4b\xcb\xb2\x34\x92\x15\xe9\x12\x4b\x0e\x7f\xf3\x4d\x58\x71\x98\xb7\xb6\xfd\x33\x04\x90\x26\x71\xe3\xc8\xca\x58\xbc\x63\x85\xac\x8e\xcc\x0a\x5b\x9c\x67\x68\x39\x66\x78\xef\xe0\x94\x0b\x04\x98\x6f\x82\xe1\x96\x7e\x91\xe4\xd3\x99\x46\x08\x52\x74\x30\x42\x10\x46\x70\xa5\x3a\x98\x20\xf0\x0e\x2a\x04\xd7\xc1\x8c\xe7\x6d\x80\x4c\x3c\x12\x37\x24\x93\x77\xdc\x2b\x95\x39\x25\x14\xd1\x45\x61\x49\x91\x21\x16\x75\x2c\x51\xc9\x48\x4c\x5a\x83\x3a\x3b\xe7\x7c\x41\x63\x3d\x0a\xc7\x85\xd8\x84\x0c\x98\xb6\xaf\x48\x5c\xb8\xe8\xb8\xd6\x5a\x47\xe4\x84\xd9\x26\x24\xcf\x0c\x23\xe7\x94\xc0\x92\xd0\x49\x6d\x32\x33\x4a\xeb\x98\x3d\x6a\xab\x45\x44\x53\x52\x62\x5e\x50\xd9\x98\xfa\x0c\x01\x94\x26\x66\x18\x9a\x7d\x16\x48\x7b\x25\xa3\xdb\x7b\x21\xca\x5e\x29\x27\xbc\xf2\x3e\x4b\x9b\xa1\x83\x67\xaa\x73\x7f\xd9\x86\x7c\xdf\xdd\x17\x3f\xe1\x3c\xbf\x5c\x6a\x0e\xed\xee\xb3\x74\xf7\x40\x68\xff\xd4\x02\x4d\xd3\x67\x1a\x97\x7e\xb9\xfe\xb3\xf1\xb0\x57\xc6\xbf\xce\xae\x69\x7e\xae\xb4\xd2\x66\xba\x71\x1d\x1e\x2f\xf5\x44\x75\x0e\xad\x68\xda\xf6\xe5\x96\x3c\x62\xbf\xfc\xe8\x07\xfa\xef\xff\xd0\xf2\xa6\x39\xd1\xf5\xe6\xd0\xb9\x7f\x1a\xfb\xf1\xe9\xc3\xac\xd3\x1a\xcf\x7d\xfa\x77\x73\xe9\xe1\xf0\xf0\x71\xe9\x15\x87\xe9\x4c\x0f\x95\xe6\xcb\x5a\x13\xcd\x0f\x1b\x04\x97\xb5\x12\x3f\x4c\x6b\x3c\x4c\x34\x7c\x80\x6b\xff\x8c\x0b\x7d\x03\x7d\xa2\xeb\x1d\x4d\xcb\x11\xd7\xe5\xf8\x1d\x15\x77\xc8\xdf\x48\xf8\x84\x7e\xf6\xff\x15\x00\x00\xff\xff\x2a\x32\x0b\x61\xbe\x03\x00\x00")

func resourcesTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYaml,
		"resources/testing_config.yaml",
	)
}

func resourcesTesting_configYaml() (*asset, error) {
	bytes, err := resourcesTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/testing_config.yaml", size: 958, mode: os.FileMode(420), modTime: time.Unix(1540221728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_config.yaml": resourcesDefault_configYaml,
	"resources/testing_config.yaml": resourcesTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
		"testing_config.yaml": &bintree{resourcesTesting_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
