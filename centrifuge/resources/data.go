// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../resources/.testing_config.yaml.swp
// ../../resources/default_config.yaml
// ../../resources/testing_config.yaml
package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesTesting_configYamlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd9\xbd\x6e\x24\x45\x10\x00\xe0\x3a\x12\x12\x56\xe6\x27\x47\x43\x13\x5c\xb2\xeb\xe9\xdf\xe9\xee\xc9\x90\x65\x89\x0b\xee\x90\xe0\x4c\x42\x60\xf5\xef\x7a\xb4\xde\x99\x55\xcf\xac\x7d\xd6\xe9\xe0\x01\xe0\x5d\x78\x09\xde\x83\x8c\x80\x07\x20\x22\x40\xb3\xac\x0f\x09\x59\x32\x11\x08\xa9\xbe\xa4\xd5\xb5\xd5\x55\xd5\x5a\x4d\x30\x1a\x4f\xbf\x7e\xf6\xbc\x32\xa7\x14\x00\xe0\x7d\x00\xff\xe3\x07\xdf\xfc\xbe\x00\xf8\xf8\x3d\x80\x1b\xb7\x2e\xae\x9f\xe0\x31\xb7\x43\xd9\xf4\xdd\xab\x47\xf3\xbe\x3d\x16\xac\xe7\x03\x75\xa8\xc7\x12\xea\x75\x37\x5d\xed\xfd\x69\x18\xb6\xf5\x59\xea\xa7\xd2\xe5\xfd\x3a\x3d\xeb\x43\xbd\x1e\x56\xe1\x6d\xa0\x2e\x69\x1c\xf6\x25\xa4\xb1\x9e\xd2\x38\x75\xfd\xfa\x32\x0c\x7d\xee\xd6\xa7\x77\x6e\x7b\xfd\x68\x63\x84\x10\x00\x2c\x40\x70\x76\x78\xd4\x3f\x25\x9f\x54\x1f\x7d\x78\xf1\x5f\x0f\x84\x10\x42\x08\x21\x84\x10\xfa\x17\x4d\xbb\x27\xf0\x1d\x00\xbc\x73\xdc\xbf\x7b\x5c\x9f\xfc\x6d\x45\x08\x21\x84\x10\x42\x08\x21\x84\xd0\xff\x97\x8b\x00\x5f\x2d\x00\xbe\x5f\xfc\xf9\xfd\xff\xfe\xfd\xff\xb7\x13\x80\x5f\x4f\x00\x7e\x3e\x01\xf8\x65\x01\xf0\xd3\x02\xe0\x87\xfb\x3c\x84\x10\x42\x08\x21\x84\x10\x42\x0f\x38\x3b\x7f\xf1\xf2\xf2\xfc\xe5\xe7\xe7\x5f\x9e\x5f\x3c\xbf\xfc\xec\xec\xec\x8b\x8b\x17\x50\x1d\xb8\x18\x4b\x1a\xc7\xb6\x92\x9e\x79\xf3\x60\x50\x0a\x97\xb5\x76\x26\xeb\x2c\x33\x75\x91\x33\xa9\xa8\x55\x56\xe8\x24\xa2\xa5\x49\xc4\xfb\x73\x3b\x37\x8e\xb7\x43\x89\x6d\x95\x53\x5f\x6e\xb3\x90\x7d\x11\x21\x5e\x8f\xdb\xcd\x31\x63\x93\xee\xda\xea\xe9\x6b\x72\xec\x40\x5a\xf2\x4f\x5b\x90\x25\x09\xe5\x6e\x37\x0d\xa4\x7d\x4d\x42\xb7\xbb\x4a\x85\xb4\xc4\xa5\x71\xc5\xb8\x59\x85\xa9\xcc\x09\x87\xf0\x94\x5e\x4d\xf3\x4f\x5a\x6a\xdb\x04\xa7\x92\x97\x29\xc8\x26\xeb\x10\x72\xb6\x41\x50\x4d\x95\x6c\x38\x75\x89\x1a\x6d\x38\x8b\x9e\xc5\x90\x85\x8e\x42\x7a\xc9\x84\xd5\x3a\x07\xae\xe2\xdb\x7a\x3b\x57\xdc\x76\x9c\xdb\x76\x37\xa4\x25\xd9\xf0\x90\x45\x70\x4e\x44\xcf\x6c\x60\xca\x24\x67\xa4\xcc\xdc\x24\xcd\x8c\xf6\xe4\xcd\x92\x6c\x62\x26\x2d\x19\x0f\x03\x93\xc3\xf6\xaf\x22\x71\x73\x9d\x7a\xd2\x0a\xbe\x24\x3d\x69\x79\xc3\x99\x94\x4b\xb2\x23\x2d\x5b\x92\x42\x5a\xb3\x24\xa3\xbb\x9e\x2f\xc0\x18\x67\xca\xb0\xe0\x3d\x6f\x3c\x0d\x8a\x52\xab\xa9\x4a\x91\x4a\xaa\xb4\x89\x92\x59\xcb\x3c\xf3\x22\x59\x11\x65\xa0\x8d\xa5\xd9\x30\xe3\xa4\x31\x8e\x09\xea\xf2\x3c\xc8\xd6\x05\xd2\x12\x25\x1a\x26\x94\x64\x81\xe6\x94\xb9\xa6\x2a\x47\x66\xac\x0c\x39\x5a\x1b\xa9\x73\xa9\xa1\xce\xd3\xc4\x95\xb5\xc9\x85\x40\x59\x6c\x94\x8b\x26\x5b\x61\x35\x0f\x4c\xcd\x95\xba\x38\x17\x52\x54\x6a\x2a\xe2\x4a\x1b\xae\x56\x32\x51\xbf\x32\xd6\xc5\x55\xe4\xd2\x29\x19\x1a\x21\x85\x23\x4b\x72\x93\xca\xd8\x0d\xf3\x25\xdf\x3c\x3d\xfc\xf1\x5b\xd7\xf5\x6d\x05\x55\xe5\x42\x18\xf6\xfd\x34\xb6\x90\xa6\xab\x54\xd2\x7e\xdb\xc2\x1f\x01\x00\x00\xff\xff\x86\x6d\x22\x36\x00\x30\x00\x00")

func resourcesTesting_configYamlSwpBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYamlSwp,
		"resources/.testing_config.yaml.swp",
	)
}

func resourcesTesting_configYamlSwp() (*asset, error) {
	bytes, err := resourcesTesting_configYamlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/.testing_config.yaml.swp", size: 12288, mode: os.FileMode(384), modTime: time.Unix(1527885711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x92\xcf\x72\xd3\x3c\x14\xc5\xf7\x7e\x0a\x8d\xf7\xa9\xf5\xcf\x8e\xac\x5d\xbf\x8f\xc2\x00\x21\x93\x86\xd0\x50\x76\xb2\x74\x15\xab\x89\xe5\x54\x92\xdb\xa4\x4f\xcf\x38\x69\x61\x60\x86\x81\x35\xec\xee\x1c\x69\x7e\x67\xee\x39\xd7\x19\xf0\xc9\xa5\xe3\x5b\x23\x11\xc9\x32\x0d\x3e\x05\x67\x87\x0d\xcc\x21\x3d\xf6\x61\x2b\xd1\x77\x69\x12\x86\x18\x9d\xf2\xad\xdb\xed\x26\x90\xda\x49\x70\x7e\x0b\xcd\x31\xf3\xe7\xbf\x51\xa2\x0c\xa1\x04\x31\x39\xbf\x39\xcd\x08\x39\x23\x11\x63\xec\x34\x43\x6a\x21\xc0\xd0\x3d\xa3\x47\x4b\xc1\xc4\xf9\xad\xe9\xfb\x14\x53\x50\xfb\x05\x40\x88\xf2\xa4\x21\x34\x41\x79\xe1\xf6\xbc\x20\x74\x7a\x81\x2f\xf0\x05\x29\x92\xde\x17\x4c\x50\x4c\x0b\xb7\xb7\xb1\xb8\xee\x56\xd7\x87\xe6\x71\x3b\x7c\xb9\xbd\x7d\x65\x87\xa7\x55\x73\xb8\xba\x5c\xc2\x6a\xfe\xff\xac\x7f\x3a\x1e\xcb\x52\x3c\x5c\xfb\xcd\xcd\xc3\xe2\xc3\xdd\xec\x76\x9b\xff\x16\xcb\x5e\xb0\x37\xb6\xba\x9a\x57\xdd\xf6\x7e\x0d\x77\xeb\xf7\x6b\x7a\xbf\x18\x48\xf5\x79\x6f\xde\xb0\xed\xbb\x9e\xac\x58\xd7\xaa\x76\xf1\x5f\xf9\x11\x4a\x4f\xce\x58\xdd\xfb\x14\x94\x4e\x97\xc6\x04\x88\x11\xe2\x73\x02\x63\x06\xe7\x8c\x5f\x2b\x9d\xfa\x70\x94\x28\xc7\x07\x5c\x8a\x1a\x0c\x17\x54\x59\x61\x2a\x81\x6b\x8b\x29\xb5\x9a\x10\xa5\x58\x5d\x5b\x2d\x94\x10\xcc\x94\x34\xff\x89\xb1\x84\x8d\x8b\xe9\x19\x62\x6b\x4e\xa6\xda\x80\x21\x8c\x35\x4a\x30\x6e\xb8\xb6\x46\x57\xc0\x4b\x6a\x1a\x43\xad\x2e\x69\x35\xe5\xf0\x02\x51\x5e\xb7\x7d\xf8\x01\xd1\x94\x53\x62\x81\x63\x03\xd4\x54\x04\xea\x92\x1b\x5b\x6b\xc5\xa1\xae\x88\xad\x6a\x2e\x84\x25\xac\x54\x38\xcf\x32\xf4\x07\xa7\x20\xbf\x95\x5e\x92\xbf\xa0\xd7\x5f\x9d\x2d\xff\x37\x1a\x7f\xd9\x7c\xac\xcd\x80\x55\xc3\x2e\x5d\x6a\xdd\x0f\x3e\xcd\x55\x07\x12\xe5\x9d\x72\x7e\xb4\xf2\xbd\x81\x4f\xcb\x99\x44\x8f\x51\x16\xc5\xae\xd7\x6a\xd7\xf6\x31\xc9\xba\xe4\x55\x86\xd0\x46\xc5\x45\x70\x1a\x24\xe2\x18\x63\x7c\x56\x66\xae\x73\x49\x22\x3e\x25\x94\x09\x91\x9d\xe3\x84\x43\x5a\x2b\x97\x56\xae\x83\x7e\x48\x12\xe5\x0c\xc7\xd1\xa0\x53\x87\x25\xa4\xe0\xc6\x8c\xe9\x89\xe0\x7c\x82\xf0\xa0\x76\xa3\x3c\x2e\x46\x30\xee\x62\x9e\x65\x5f\x03\x00\x00\xff\xff\x9a\x7a\x24\xbb\xd1\x04\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1233, mode: os.FileMode(420), modTime: time.Unix(1527945458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcb\x6a\x2c\x3d\x0c\x84\xf7\x79\x8a\x46\x9b\x6c\x7a\x40\xb2\xe5\xf6\xe5\x6d\x64\x49\x26\xc3\x64\x2e\x74\x4f\x92\x3f\x84\xbc\xfb\x4f\x0f\xc3\x39\xdb\xb3\x93\xed\xe2\x73\x15\x2a\xbf\xbf\xf9\xea\x1f\xe7\xf6\x32\x4d\xa2\x7a\xfd\xb8\xdc\xb7\x7d\x9e\xa6\xb3\x1c\x2f\x6d\x7a\x8c\xd3\x74\xf2\xef\x36\xbd\xfe\x80\x98\xad\xbe\x6d\xd0\x80\x3b\xf5\xc2\x51\x46\xce\x52\x46\x1e\x3c\x50\x2c\x10\x27\xac\xa9\xc6\xec\xd1\x2a\x7a\xb4\x02\x33\xe8\xfa\x7d\xbb\x5f\xa1\xfd\x80\x1e\x6f\x6f\xbe\x42\x03\xf1\xed\x40\xa1\x1c\xf4\xbe\xee\x82\xc7\xf5\xdd\xff\xbb\xef\x4f\x99\x73\x5d\x54\x92\x77\x76\xe5\x65\x64\xd5\x31\xaa\x46\xcc\x98\x78\x09\x28\x8e\x25\x97\x40\xd6\xc9\x74\xc4\x6c\x91\x3b\x53\xac\x39\x0f\x0d\xc9\xfe\xf0\x6e\xb2\xca\x79\xdb\xbf\x3d\x7e\x42\x83\x51\x82\x8e\xa8\x22\xd1\x3a\x55\xa5\x54\x5c\x0a\xf3\x08\xc5\x33\x95\xdc\xe1\x77\x86\x93\x0d\x68\xb0\x3d\x0c\xc3\xe3\xf8\x17\x62\xa7\x77\xbf\x40\x8b\x61\x86\x0b\xb4\xb0\x04\x62\x9e\xe1\x06\x8d\x66\x58\xa1\x95\x19\x36\x79\xdf\x03\x10\x05\x4a\x85\xb4\xf7\xb0\x74\xd4\x84\x58\x33\x26\x37\x64\x4c\xb9\x18\x53\xad\xd4\xa9\x47\xaf\xd1\x58\x71\xa9\x38\x0a\x15\xe1\x52\x84\x22\xca\xd8\x8d\x9c\x45\xa1\x41\x8a\x0b\xc5\xc4\xa4\x38\x7c\x84\x8c\x69\x18\x95\xca\x3a\xac\x56\x43\x11\x5f\x50\x3a\x7a\x48\xb5\xba\xa8\x22\xd9\x92\xc4\xca\xa8\xb1\xe6\xa0\x94\x76\xd2\xd1\x76\x50\x42\xce\x18\xed\x90\x4b\x48\x07\x76\xec\x87\x52\xc5\x0e\x16\x58\x12\xeb\x12\x39\x0a\xcc\xf0\xe9\xeb\x76\xbc\xee\x21\x7f\x5f\x9f\x8b\xbf\xc9\xb6\x7d\x5d\x57\x6b\xd3\xf0\xcb\xfa\x35\x22\x5f\xd6\xa8\xf6\xbe\x9d\x4f\x4f\xc5\xb3\x12\x6d\xfa\xd7\x46\xbc\xbc\xfc\x1f\x00\x00\xff\xff\x28\xb6\x4d\x04\x75\x02\x00\x00")

func resourcesTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYaml,
		"resources/testing_config.yaml",
	)
}

func resourcesTesting_configYaml() (*asset, error) {
	bytes, err := resourcesTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/testing_config.yaml", size: 629, mode: os.FileMode(420), modTime: time.Unix(1527885666, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/.testing_config.yaml.swp": resourcesTesting_configYamlSwp,
	"resources/default_config.yaml": resourcesDefault_configYaml,
	"resources/testing_config.yaml": resourcesTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		".testing_config.yaml.swp": &bintree{resourcesTesting_configYamlSwp, map[string]*bintree{}},
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
		"testing_config.yaml": &bintree{resourcesTesting_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

