// Code generated by go-bindata.
// sources:
// ../../resources/default_config.yaml
// ../../resources/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\xcd\x92\xe3\x34\x14\x85\xf7\x7e\x0a\x55\x58\xd3\xd1\x9f\x25\xd9\xbb\x06\x1a\x6a\x20\x74\xa5\x43\x98\xd0\xec\xf4\x73\x95\x68\x12\x4b\x69\x4b\x4e\x27\xf3\xf4\x94\x3b\x93\x6a\x86\xaa\x84\x3d\x85\x57\xae\x7b\xa4\x63\xdd\xf3\xd9\xd7\x16\x62\xe9\x83\x1f\xd6\xf0\x08\xe5\x35\xf5\xdb\x16\xbd\x97\x16\x43\xce\x41\xc7\x4d\xd8\xed\x1e\xca\x66\x11\xe2\x16\xcc\xa9\x8a\xe7\x85\xb9\xad\x10\xfa\x06\xcd\x92\xd5\x3b\x54\x20\x97\x10\xd7\xc8\xa6\x58\x7a\x6d\x0b\xd2\xce\xf5\x90\x33\x64\x14\x01\x1c\x2a\x09\x19\x40\x19\x0a\x7a\x0d\x65\x83\x20\x1e\xd0\x41\xf7\x41\x9b\x1d\xe4\xbb\x0a\x5d\xf6\x8f\x96\x08\x05\xd7\x22\xc6\xd8\xdb\x3d\x94\x0d\xf4\x30\x74\x5f\x4e\xf7\xc1\xb5\x48\x31\x75\xd6\x4c\x4a\x25\x97\x5e\xef\xe7\x00\x7d\x3e\xef\x45\xe8\x5b\x34\x99\x86\x3d\x9f\x12\x2a\xef\xf0\x1d\xbe\x23\xd3\x62\xf7\x53\xa6\x28\xa6\xd3\xb0\xf7\x79\xfa\xd4\x2d\x9f\x8e\xe6\x75\x3b\xfc\xf9\xfc\xfc\x83\x1f\x3e\x2f\xcd\xf1\xe1\x7e\x01\xcb\xc7\xef\x67\xe9\xf3\xe9\x54\xd7\xea\xf0\x14\xd7\x1f\x0f\xf3\x5f\x3f\xcd\x9e\xb7\x93\x7f\xb5\x65\x17\xdb\x8f\x5e\x3c\x3c\x8a\x6e\xfb\xb2\x82\x4f\xab\x5f\x56\xf4\x65\x3e\x10\xf1\xc7\xde\xfd\xc4\xb6\x3f\x27\xb2\x64\xdd\x46\x6f\xe6\xdf\xd5\xbf\x41\x1d\xc9\xd9\xf6\x12\xd7\xfd\x25\xad\x4b\x13\xc1\x41\x2c\xa1\x9c\x7e\xd4\xb6\xa4\xfe\xd4\xa2\xc9\xe4\x1f\xca\x02\xd6\x21\x97\xaf\x24\x1d\xed\x26\xf5\x5f\x09\x15\xba\x8a\xf3\x43\x2c\xb0\xee\x75\x09\x29\xbe\xc7\x4e\x30\xf9\x3f\xf6\xbf\xc7\x8e\x8f\x92\x51\x46\x0c\x6f\x18\x16\xda\x1a\xa1\x0d\x96\x5c\x63\xc9\xa4\xf2\x4c\x0a\x6f\x1b\xe3\x0c\x95\x44\xdc\x00\x84\x8f\x4e\x28\x2b\xb0\x34\xc6\x52\xac\x30\xc6\x42\x35\x8c\x70\xdc\x10\xa1\x85\xa2\xc4\x3b\x49\x98\xa1\x0d\xbd\x8a\x12\x1f\x4d\x2d\x89\x07\x8e\x1d\x50\x27\x08\x34\x35\x77\xbe\xb1\x9a\x43\x23\x88\x17\x0d\x57\xca\x13\x56\x6b\x7c\x13\xfa\x97\x6f\xf8\x1d\x78\x4d\xfe\x03\x4c\xaf\xbd\xb2\xfc\x0a\x6d\x74\x03\xb7\xaa\x0d\xa3\x5e\x6a\xe6\x39\xe6\x8a\x78\x42\x19\xe3\x98\x13\x21\xb1\x55\xd6\x00\x96\x5e\x3a\xd9\xd8\x9b\xb8\x6b\xae\x81\x49\xe6\x71\x23\xbc\xf6\xd4\x19\x61\x94\xe6\x42\x12\x69\xb1\x69\x14\x58\xaf\xb1\xac\x9d\xbb\x81\x9b\x71\xaa\x25\x37\x4c\x51\x47\x1a\xa7\x05\x6f\x94\x32\x4c\x0a\x87\x81\x6b\x51\x0b\x23\x8d\xd7\x6f\x16\xd5\xcb\x00\x03\x8c\xcc\xe2\xd0\xad\x52\xbf\x1d\x09\x22\x5a\x55\x97\x44\x46\xc9\x81\xd7\xc3\xae\xdc\x5b\x9b\x86\x58\x1e\x75\x07\x2d\x9a\x74\x3a\xc4\xf1\x08\x31\x39\xf8\x7d\x31\x6b\xd1\x6b\x6e\xa7\xd3\xdd\x38\xd1\x37\x29\x97\xb6\xa9\xb9\xa8\x10\x5a\xeb\x3c\xef\x83\x85\x71\x3c\x5c\xae\x73\x79\x16\xba\x50\x5a\xc4\x25\xa1\x4c\xa9\xea\x9c\x35\x1c\xcb\x4a\x87\xb2\x0c\x1d\xa4\xa1\xb4\x68\x22\x30\xce\xe3\x63\x3a\x7d\x5c\x40\xe9\xc3\x48\x80\xbe\x59\x84\x58\xa0\x3f\xe8\xdd\x58\x1e\xdb\xa6\x6f\xeb\xca\x71\x9e\xd2\xee\xde\x5a\xc8\xf9\x21\x8e\xff\x08\xd7\xa2\xd2\x0f\x50\x55\x7f\x05\x00\x00\xff\xff\x93\xd3\x22\x12\xaf\x06\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1711, mode: os.FileMode(420), modTime: time.Unix(1535462275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcb\x6a\x2c\x3d\x0c\x84\xf7\x79\x8a\x46\x9b\x6c\x7a\x40\xb2\xe5\xf6\xe5\x6d\x64\x49\x26\xc3\x64\x2e\x74\x4f\x92\x3f\x84\xbc\xfb\x4f\x0f\xc3\x39\xdb\xb3\x93\xed\xe2\x73\x15\x2a\xbf\xbf\xf9\xea\x1f\xe7\xf6\x32\x4d\xa2\x7a\xfd\xb8\xdc\xb7\x7d\x9e\xa6\xb3\x1c\x2f\x6d\x7a\x8c\xd3\x74\xf2\xef\x36\xbd\xfe\x80\x98\xad\xbe\x6d\xd0\x80\x3b\xf5\xc2\x51\x46\xce\x52\x46\x1e\x3c\x50\x2c\x10\x27\xac\xa9\xc6\xec\xd1\x2a\x7a\xb4\x02\x33\xe8\xfa\x7d\xbb\x5f\xa1\xfd\x80\x1e\x6f\x6f\xbe\x42\x03\xf1\xed\x40\xa1\x1c\xf4\xbe\xee\x82\xc7\xf5\xdd\xff\xbb\xef\x4f\x99\x73\x5d\x54\x92\x77\x76\xe5\x65\x64\xd5\x31\xaa\x46\xcc\x98\x78\x09\x28\x8e\x25\x97\x40\xd6\xc9\x74\xc4\x6c\x91\x3b\x53\xac\x39\x0f\x0d\xc9\xfe\xf0\x6e\xb2\xca\x79\xdb\xbf\x3d\x7e\x42\x83\x51\x82\x8e\xa8\x22\xd1\x3a\x55\xa5\x54\x5c\x0a\xf3\x08\xc5\x33\x95\xdc\xe1\x77\x86\x93\x0d\x68\xb0\x3d\x0c\xc3\xe3\xf8\x17\x62\xa7\x77\xbf\x40\x8b\x61\x86\x0b\xb4\xb0\x04\x62\x9e\xe1\x06\x8d\x66\x58\xa1\x95\x19\x36\x79\xdf\x03\x10\x05\x4a\x85\xb4\xf7\xb0\x74\xd4\x84\x58\x33\x26\x37\x64\x4c\xb9\x18\x53\xad\xd4\xa9\x47\xaf\xd1\x58\x71\xa9\x38\x0a\x15\xe1\x52\x84\x22\xca\xd8\x8d\x9c\x45\xa1\x41\x8a\x0b\xc5\xc4\xa4\x38\x7c\x84\x8c\x69\x18\x95\xca\x3a\xac\x56\x43\x11\x5f\x50\x3a\x7a\x48\xb5\xba\xa8\x22\xd9\x92\xc4\xca\xa8\xb1\xe6\xa0\x94\x76\xd2\xd1\x76\x50\x42\xce\x18\xed\x90\x4b\x48\x07\x76\xec\x87\x52\xc5\x0e\x16\x58\x12\xeb\x12\x39\x0a\xcc\xf0\xe9\xeb\x76\xbc\xee\x21\x7f\x5f\x9f\x8b\xbf\xc9\xb6\x7d\x5d\x57\x6b\xd3\xf0\xcb\xfa\x35\x22\x5f\xd6\xa8\xf6\xbe\x9d\x4f\x4f\xc5\xb3\x12\x6d\xfa\xd7\x46\xbc\xbc\xfc\x1f\x00\x00\xff\xff\x28\xb6\x4d\x04\x75\x02\x00\x00")

func resourcesTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYaml,
		"resources/testing_config.yaml",
	)
}

func resourcesTesting_configYaml() (*asset, error) {
	bytes, err := resourcesTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/testing_config.yaml", size: 629, mode: os.FileMode(420), modTime: time.Unix(1533637582, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_config.yaml": resourcesDefault_configYaml,
	"resources/testing_config.yaml": resourcesTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
		"testing_config.yaml": &bintree{resourcesTesting_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

