// Code generated by go-bindata.
// sources:
// ../../resources/default_config.yaml
// ../../resources/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4b\x93\xe3\x34\x14\x85\xf7\xfe\x15\xaa\xb0\xa6\xa3\x97\xf5\xf0\xae\x81\x86\x1a\x08\x5d\xe9\x10\x26\x34\x3b\x3d\xae\x13\x4d\x62\x29\x6d\xc9\xe9\x64\x7e\x3d\xe5\xce\xa4\x9a\xa1\x2a\x61\x4f\xe1\x95\xeb\x1e\xe9\x58\xf7\x7c\xf6\xb5\x83\x58\xfa\xd0\x0e\x6b\x78\x84\xf2\x9a\xfa\x6d\x83\xde\x4b\x8b\x21\xe7\x60\xe2\x26\xec\x76\x0f\x65\xb3\x08\x71\x0b\xf6\x54\xc5\xf3\xc2\xdc\x54\x08\x7d\x83\x66\xc9\x99\x1d\x2a\x90\x4b\x88\x6b\xe4\x52\x2c\xbd\x71\x05\x19\xef\x7b\xc8\x19\x32\x8a\x00\x1e\x95\x84\x2c\xa0\x0c\x05\xbd\x86\xb2\x41\x10\x0f\xe8\x60\xfa\x60\xec\x0e\xf2\x5d\x85\x2e\xfb\x47\x4b\x84\x82\x6f\x10\x63\xec\xed\x1e\xca\x06\x7a\x18\xba\x2f\xa7\xfb\xe0\x1b\xa4\x98\x3a\x6b\x36\xa5\x92\x4b\x6f\xf6\x73\x80\x3e\x9f\xf7\x22\xf4\x2d\x9a\x4c\xc3\x9e\x4f\x09\x95\x77\xf8\x0e\xdf\x91\x69\x71\xfb\x29\x53\x14\xd3\x69\xd8\xb7\x79\xfa\xd4\x2d\x9f\x8e\xf6\x75\x3b\xfc\xf9\xfc\xfc\x43\x3b\x7c\x5e\xda\xe3\xc3\xfd\x02\x96\x8f\xdf\xcf\xd2\xe7\xd3\xa9\xae\xd5\xe1\x29\xae\x3f\x1e\xe6\xbf\x7e\x9a\x3d\x6f\x27\xff\x6a\xcb\x2e\xb6\x1f\x5b\xf1\xf0\x28\xba\xed\xcb\x0a\x3e\xad\x7e\x59\xd1\x97\xf9\x40\xc4\x1f\x7b\xff\x13\xdb\xfe\x9c\xc8\x92\x75\x1b\xb3\x99\x7f\x57\xff\x06\x75\x24\x67\xdb\x4b\x5c\xf7\x97\xb4\x2e\x4d\x04\x0f\xb1\x84\x72\xfa\xd1\xb8\x92\xfa\x53\x83\x26\x93\x7f\x28\x0b\x58\x87\x5c\xbe\x92\x4c\x74\x9b\xd4\x7f\x25\x54\xe8\x2a\xce\x0f\xb1\xc0\xba\x37\x25\xa4\xf8\x1e\x3b\xc1\xe4\xff\xd8\xff\x1e\x3b\x3e\x4a\x46\x19\xb1\x5c\x33\x2c\x8c\xb3\xc2\x58\x2c\xb9\xc1\x92\x49\xd5\x32\x29\x5a\xa7\xad\xb7\x54\x12\x71\x03\x10\x3e\x7a\xa1\x9c\xc0\xd2\x5a\x47\xb1\xc2\x18\x0b\xa5\x19\xe1\x58\x13\x61\x84\xa2\xa4\xf5\x92\x30\x4b\x35\xbd\x8a\x12\x1f\x6d\x2d\x49\x0b\x1c\x7b\xa0\x5e\x10\xd0\x35\xf7\xad\x76\x86\x83\x16\xa4\x15\x9a\x2b\xd5\x12\x56\x1b\x7c\x13\xfa\x97\x6f\xf8\x1d\x78\x4d\xfe\x03\x4c\xaf\xbd\xb2\xfc\x0a\x6d\x74\x03\xb7\xc6\x9e\x6a\x5e\x4b\x02\x92\x29\x4e\x85\x96\x46\x08\x2b\x8d\xd6\x06\x6b\xef\x85\x93\xcc\xb3\x5a\xf8\x9b\xb8\xb5\x10\xd8\x61\xa6\x3d\x23\x84\xd7\xcc\xb4\xd8\xd7\xca\xd5\x42\x08\x49\x99\xd7\x8e\xb6\x46\x7a\x01\xee\x06\x6e\xc6\xa9\x91\xdc\x32\x45\x3d\xd1\xde\x08\xae\x95\xb2\x4c\x0a\x8f\x81\x1b\x51\x0b\x2b\x6d\x6b\x6a\xef\x27\x55\xf5\x32\xc0\x00\x23\xb3\x38\x74\xab\xd4\x6f\x47\x82\x88\x56\xd5\x25\x91\x51\xf2\xd0\x9a\x61\x57\xee\x9d\x4b\x43\x2c\x8f\xa6\x83\x06\x4d\x3a\x13\xe2\x78\x84\x98\x3c\xfc\xbe\x98\x35\xe8\x35\x37\xd3\xe9\x6e\x9c\xe8\x9b\x94\x4b\xa3\x6b\x2e\x2a\x84\xd6\x26\xcf\xfb\xe0\x60\x1c\x0f\x97\xeb\x5c\x9e\x85\x2e\x94\x06\x71\x49\x28\x53\xaa\x3a\x67\x0d\xc7\xb2\x32\xa1\x2c\x43\x07\x69\x28\x0d\x9a\x08\x8c\xf3\xf8\x98\xce\x1c\x17\x50\xfa\x30\x12\xa0\x6f\x16\x21\x16\xe8\x0f\x66\x37\x96\xc7\xb6\xe9\xdb\xba\x72\x9c\xa7\xb4\xbb\x77\x0e\x72\x7e\x88\xe3\x3f\xc2\x37\xa8\xf4\x03\x54\xd5\x5f\x01\x00\x00\xff\xff\x5a\x24\x55\x62\xaf\x06\x00\x00")

func resourcesDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefault_configYaml,
		"resources/default_config.yaml",
	)
}

func resourcesDefault_configYaml() (*asset, error) {
	bytes, err := resourcesDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/default_config.yaml", size: 1711, mode: os.FileMode(420), modTime: time.Unix(1536141308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcb\x6a\x2c\x3d\x0c\x84\xf7\x79\x8a\x46\x9b\x6c\x7a\x40\xb2\xe5\xf6\xe5\x6d\x64\x49\x26\xc3\x64\x2e\x74\x4f\x92\x3f\x84\xbc\xfb\x4f\x0f\xc3\x39\xdb\xb3\x93\xed\xe2\x73\x15\x2a\xbf\xbf\xf9\xea\x1f\xe7\xf6\x32\x4d\xa2\x7a\xfd\xb8\xdc\xb7\x7d\x9e\xa6\xb3\x1c\x2f\x6d\x7a\x8c\xd3\x74\xf2\xef\x36\xbd\xfe\x80\x98\xad\xbe\x6d\xd0\x80\x3b\xf5\xc2\x51\x46\xce\x52\x46\x1e\x3c\x50\x2c\x10\x27\xac\xa9\xc6\xec\xd1\x2a\x7a\xb4\x02\x33\xe8\xfa\x7d\xbb\x5f\xa1\xfd\x80\x1e\x6f\x6f\xbe\x42\x03\xf1\xed\x40\xa1\x1c\xf4\xbe\xee\x82\xc7\xf5\xdd\xff\xbb\xef\x4f\x99\x73\x5d\x54\x92\x77\x76\xe5\x65\x64\xd5\x31\xaa\x46\xcc\x98\x78\x09\x28\x8e\x25\x97\x40\xd6\xc9\x74\xc4\x6c\x91\x3b\x53\xac\x39\x0f\x0d\xc9\xfe\xf0\x6e\xb2\xca\x79\xdb\xbf\x3d\x7e\x42\x83\x51\x82\x8e\xa8\x22\xd1\x3a\x55\xa5\x54\x5c\x0a\xf3\x08\xc5\x33\x95\xdc\xe1\x77\x86\x93\x0d\x68\xb0\x3d\x0c\xc3\xe3\xf8\x17\x62\xa7\x77\xbf\x40\x8b\x61\x86\x0b\xb4\xb0\x04\x62\x9e\xe1\x06\x8d\x66\x58\xa1\x95\x19\x36\x79\xdf\x03\x10\x05\x4a\x85\xb4\xf7\xb0\x74\xd4\x84\x58\x33\x26\x37\x64\x4c\xb9\x18\x53\xad\xd4\xa9\x47\xaf\xd1\x58\x71\xa9\x38\x0a\x15\xe1\x52\x84\x22\xca\xd8\x8d\x9c\x45\xa1\x41\x8a\x0b\xc5\xc4\xa4\x38\x7c\x84\x8c\x69\x18\x95\xca\x3a\xac\x56\x43\x11\x5f\x50\x3a\x7a\x48\xb5\xba\xa8\x22\xd9\x92\xc4\xca\xa8\xb1\xe6\xa0\x94\x76\xd2\xd1\x76\x50\x42\xce\x18\xed\x90\x4b\x48\x07\x76\xec\x87\x52\xc5\x0e\x16\x58\x12\xeb\x12\x39\x0a\xcc\xf0\xe9\xeb\x76\xbc\xee\x21\x7f\x5f\x9f\x8b\xbf\xc9\xb6\x7d\x5d\x57\x6b\xd3\xf0\xcb\xfa\x35\x22\x5f\xd6\xa8\xf6\xbe\x9d\x4f\x4f\xc5\xb3\x12\x6d\xfa\xd7\x46\xbc\xbc\xfc\x1f\x00\x00\xff\xff\x28\xb6\x4d\x04\x75\x02\x00\x00")

func resourcesTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesTesting_configYaml,
		"resources/testing_config.yaml",
	)
}

func resourcesTesting_configYaml() (*asset, error) {
	bytes, err := resourcesTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/testing_config.yaml", size: 629, mode: os.FileMode(420), modTime: time.Unix(1529575897, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/default_config.yaml": resourcesDefault_configYaml,
	"resources/testing_config.yaml": resourcesTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"default_config.yaml": &bintree{resourcesDefault_configYaml, map[string]*bintree{}},
		"testing_config.yaml": &bintree{resourcesTesting_configYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
