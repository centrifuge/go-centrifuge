// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coredocument.proto

/*
Package coredocument is a generated protocol buffer package.

It is generated from these files:
	coredocument.proto

It has these top-level messages:
	CoreDocument
	Signature
	InvoiceDocument
	SendInvoiceEnvelope
	GetInvoiceDocumentEnvelope
*/
package coredocument

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// CoreDocument is a document that can be sent to different nodes and anchored on chain
type CoreDocument struct {
	// Identifier
	// ----------
	// This is for convenience: the first identifier that was ever used to refer to a
	// document is kept here. Internally the centrifuge node indexes & bundles documents
	// by original identifier.
	DocumentIdentifier []byte `protobuf:"bytes,9,opt,name=documentIdentifier,proto3" json:"documentIdentifier,omitempty"`
	// The current identifier is the location of the current anchor on chain and is used to
	// refer to the current state.
	CurrentIdentifier []byte `protobuf:"bytes,3,opt,name=currentIdentifier,proto3" json:"currentIdentifier,omitempty"`
	// When creating the next version this should be used.
	NextIdentifier []byte `protobuf:"bytes,4,opt,name=nextIdentifier,proto3" json:"nextIdentifier,omitempty"`
	// Root
	PreviousRoot   []byte `protobuf:"bytes,2,opt,name=previousRoot,proto3" json:"previousRoot,omitempty"`
	DataMerkleRoot []byte `protobuf:"bytes,5,opt,name=dataMerkleRoot,proto3" json:"dataMerkleRoot,omitempty"`
	DocumentRoot   []byte `protobuf:"bytes,7,opt,name=documentRoot,proto3" json:"documentRoot,omitempty"`
	// Signatures
	Signatures []*Signature `protobuf:"bytes,6,rep,name=signatures" json:"signatures,omitempty"`
	// List of collaborators on this document. These Centrifuge Identities have access
	// to the document and should receive new versions whenever a document is updated.
	Collaborators [][]byte `protobuf:"bytes,10,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	// The previous document is referenced here but doesn't need to be provided and can
	// be left blank
	PreviousVersion []*CoreDocument `protobuf:"bytes,8,rep,name=previousVersion" json:"previousVersion,omitempty"`
}

func (m *CoreDocument) Reset()                    { *m = CoreDocument{} }
func (m *CoreDocument) String() string            { return proto.CompactTextString(m) }
func (*CoreDocument) ProtoMessage()               {}
func (*CoreDocument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CoreDocument) GetDocumentIdentifier() []byte {
	if m != nil {
		return m.DocumentIdentifier
	}
	return nil
}

func (m *CoreDocument) GetCurrentIdentifier() []byte {
	if m != nil {
		return m.CurrentIdentifier
	}
	return nil
}

func (m *CoreDocument) GetNextIdentifier() []byte {
	if m != nil {
		return m.NextIdentifier
	}
	return nil
}

func (m *CoreDocument) GetPreviousRoot() []byte {
	if m != nil {
		return m.PreviousRoot
	}
	return nil
}

func (m *CoreDocument) GetDataMerkleRoot() []byte {
	if m != nil {
		return m.DataMerkleRoot
	}
	return nil
}

func (m *CoreDocument) GetDocumentRoot() []byte {
	if m != nil {
		return m.DocumentRoot
	}
	return nil
}

func (m *CoreDocument) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *CoreDocument) GetCollaborators() [][]byte {
	if m != nil {
		return m.Collaborators
	}
	return nil
}

func (m *CoreDocument) GetPreviousVersion() []*CoreDocument {
	if m != nil {
		return m.PreviousVersion
	}
	return nil
}

// Signature contains the entity ID, public key used and signature)
type Signature struct {
	EntityId  []byte `protobuf:"bytes,1,opt,name=entityId,proto3" json:"entityId,omitempty"`
	PublicKey []byte `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Signature) GetEntityId() []byte {
	if m != nil {
		return m.EntityId
	}
	return nil
}

func (m *Signature) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// InvoiceDocument is a Centrifuge enabled document that can be used to represent
type InvoiceDocument struct {
	// documentIdentifier
	DocumentIdentifier []byte `protobuf:"bytes,3,opt,name=documentIdentifier,proto3" json:"documentIdentifier,omitempty"`
	// CoreDocument contains data related to the Centrifuge OS layer
	CoreDocument *CoreDocument `protobuf:"bytes,1,opt,name=coreDocument" json:"coreDocument,omitempty"`
	// InvoiceData has all invoice specific information.
	Data *InvoiceDocument_InvoiceData `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *InvoiceDocument) Reset()                    { *m = InvoiceDocument{} }
func (m *InvoiceDocument) String() string            { return proto.CompactTextString(m) }
func (*InvoiceDocument) ProtoMessage()               {}
func (*InvoiceDocument) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InvoiceDocument) GetDocumentIdentifier() []byte {
	if m != nil {
		return m.DocumentIdentifier
	}
	return nil
}

func (m *InvoiceDocument) GetCoreDocument() *CoreDocument {
	if m != nil {
		return m.CoreDocument
	}
	return nil
}

func (m *InvoiceDocument) GetData() *InvoiceDocument_InvoiceData {
	if m != nil {
		return m.Data
	}
	return nil
}

type InvoiceDocument_InvoiceData struct {
	Country     string                      `protobuf:"bytes,2,opt,name=country" json:"country,omitempty"`
	Currency    string                      `protobuf:"bytes,3,opt,name=currency" json:"currency,omitempty"`
	Amount      int64                       `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	Recipient   []byte                      `protobuf:"bytes,5,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Sender      []byte                      `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`
	Payee       []byte                      `protobuf:"bytes,7,opt,name=payee,proto3" json:"payee,omitempty"`
	Comment     string                      `protobuf:"bytes,8,opt,name=comment" json:"comment,omitempty"`
	DueDate     *google_protobuf1.Timestamp `protobuf:"bytes,9,opt,name=dueDate" json:"dueDate,omitempty"`
	DateCreated *google_protobuf1.Timestamp `protobuf:"bytes,11,opt,name=dateCreated" json:"dateCreated,omitempty"`
}

func (m *InvoiceDocument_InvoiceData) Reset()                    { *m = InvoiceDocument_InvoiceData{} }
func (m *InvoiceDocument_InvoiceData) String() string            { return proto.CompactTextString(m) }
func (*InvoiceDocument_InvoiceData) ProtoMessage()               {}
func (*InvoiceDocument_InvoiceData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *InvoiceDocument_InvoiceData) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *InvoiceDocument_InvoiceData) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *InvoiceDocument_InvoiceData) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *InvoiceDocument_InvoiceData) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *InvoiceDocument_InvoiceData) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *InvoiceDocument_InvoiceData) GetPayee() []byte {
	if m != nil {
		return m.Payee
	}
	return nil
}

func (m *InvoiceDocument_InvoiceData) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *InvoiceDocument_InvoiceData) GetDueDate() *google_protobuf1.Timestamp {
	if m != nil {
		return m.DueDate
	}
	return nil
}

func (m *InvoiceDocument_InvoiceData) GetDateCreated() *google_protobuf1.Timestamp {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

type SendInvoiceEnvelope struct {
	// Centrifuge OS Entity of the recipient
	Recipients [][]byte         `protobuf:"bytes,1,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Document   *InvoiceDocument `protobuf:"bytes,10,opt,name=document" json:"document,omitempty"`
}

func (m *SendInvoiceEnvelope) Reset()                    { *m = SendInvoiceEnvelope{} }
func (m *SendInvoiceEnvelope) String() string            { return proto.CompactTextString(m) }
func (*SendInvoiceEnvelope) ProtoMessage()               {}
func (*SendInvoiceEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SendInvoiceEnvelope) GetRecipients() [][]byte {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *SendInvoiceEnvelope) GetDocument() *InvoiceDocument {
	if m != nil {
		return m.Document
	}
	return nil
}

type GetInvoiceDocumentEnvelope struct {
	DocumentIdentifier []byte `protobuf:"bytes,1,opt,name=documentIdentifier,proto3" json:"documentIdentifier,omitempty"`
}

func (m *GetInvoiceDocumentEnvelope) Reset()                    { *m = GetInvoiceDocumentEnvelope{} }
func (m *GetInvoiceDocumentEnvelope) String() string            { return proto.CompactTextString(m) }
func (*GetInvoiceDocumentEnvelope) ProtoMessage()               {}
func (*GetInvoiceDocumentEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetInvoiceDocumentEnvelope) GetDocumentIdentifier() []byte {
	if m != nil {
		return m.DocumentIdentifier
	}
	return nil
}

func init() {
	proto.RegisterType((*CoreDocument)(nil), "coredocument.CoreDocument")
	proto.RegisterType((*Signature)(nil), "coredocument.Signature")
	proto.RegisterType((*InvoiceDocument)(nil), "coredocument.InvoiceDocument")
	proto.RegisterType((*InvoiceDocument_InvoiceData)(nil), "coredocument.InvoiceDocument.InvoiceData")
	proto.RegisterType((*SendInvoiceEnvelope)(nil), "coredocument.SendInvoiceEnvelope")
	proto.RegisterType((*GetInvoiceDocumentEnvelope)(nil), "coredocument.GetInvoiceDocumentEnvelope")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CentrifugeNodeService service

type CentrifugeNodeServiceClient interface {
	// Anchors a document on chain. Returns updated document with signatures and root calculated.
	AnchorDocument(ctx context.Context, in *CoreDocument, opts ...grpc.CallOption) (*CoreDocument, error)
	SendInvoiceDocument(ctx context.Context, in *SendInvoiceEnvelope, opts ...grpc.CallOption) (*InvoiceDocument, error)
	GetInvoiceDocument(ctx context.Context, in *GetInvoiceDocumentEnvelope, opts ...grpc.CallOption) (*InvoiceDocument, error)
}

type centrifugeNodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewCentrifugeNodeServiceClient(cc *grpc.ClientConn) CentrifugeNodeServiceClient {
	return &centrifugeNodeServiceClient{cc}
}

func (c *centrifugeNodeServiceClient) AnchorDocument(ctx context.Context, in *CoreDocument, opts ...grpc.CallOption) (*CoreDocument, error) {
	out := new(CoreDocument)
	err := grpc.Invoke(ctx, "/coredocument.CentrifugeNodeService/AnchorDocument", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrifugeNodeServiceClient) SendInvoiceDocument(ctx context.Context, in *SendInvoiceEnvelope, opts ...grpc.CallOption) (*InvoiceDocument, error) {
	out := new(InvoiceDocument)
	err := grpc.Invoke(ctx, "/coredocument.CentrifugeNodeService/SendInvoiceDocument", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrifugeNodeServiceClient) GetInvoiceDocument(ctx context.Context, in *GetInvoiceDocumentEnvelope, opts ...grpc.CallOption) (*InvoiceDocument, error) {
	out := new(InvoiceDocument)
	err := grpc.Invoke(ctx, "/coredocument.CentrifugeNodeService/GetInvoiceDocument", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CentrifugeNodeService service

type CentrifugeNodeServiceServer interface {
	// Anchors a document on chain. Returns updated document with signatures and root calculated.
	AnchorDocument(context.Context, *CoreDocument) (*CoreDocument, error)
	SendInvoiceDocument(context.Context, *SendInvoiceEnvelope) (*InvoiceDocument, error)
	GetInvoiceDocument(context.Context, *GetInvoiceDocumentEnvelope) (*InvoiceDocument, error)
}

func RegisterCentrifugeNodeServiceServer(s *grpc.Server, srv CentrifugeNodeServiceServer) {
	s.RegisterService(&_CentrifugeNodeService_serviceDesc, srv)
}

func _CentrifugeNodeService_AnchorDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoreDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrifugeNodeServiceServer).AnchorDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coredocument.CentrifugeNodeService/AnchorDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrifugeNodeServiceServer).AnchorDocument(ctx, req.(*CoreDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrifugeNodeService_SendInvoiceDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvoiceEnvelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrifugeNodeServiceServer).SendInvoiceDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coredocument.CentrifugeNodeService/SendInvoiceDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrifugeNodeServiceServer).SendInvoiceDocument(ctx, req.(*SendInvoiceEnvelope))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrifugeNodeService_GetInvoiceDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceDocumentEnvelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrifugeNodeServiceServer).GetInvoiceDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coredocument.CentrifugeNodeService/GetInvoiceDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrifugeNodeServiceServer).GetInvoiceDocument(ctx, req.(*GetInvoiceDocumentEnvelope))
	}
	return interceptor(ctx, in, info, handler)
}

var _CentrifugeNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coredocument.CentrifugeNodeService",
	HandlerType: (*CentrifugeNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnchorDocument",
			Handler:    _CentrifugeNodeService_AnchorDocument_Handler,
		},
		{
			MethodName: "SendInvoiceDocument",
			Handler:    _CentrifugeNodeService_SendInvoiceDocument_Handler,
		},
		{
			MethodName: "GetInvoiceDocument",
			Handler:    _CentrifugeNodeService_GetInvoiceDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coredocument.proto",
}

func init() { proto.RegisterFile("coredocument.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 816 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x96, 0x9b, 0xed, 0x4f, 0x4e, 0x42, 0x77, 0x19, 0x76, 0x59, 0xcb, 0x14, 0x08, 0x16, 0x42,
	0xdd, 0x65, 0xd7, 0x6e, 0x03, 0x12, 0x4b, 0x05, 0x88, 0xd2, 0x22, 0x14, 0xf1, 0x2b, 0x17, 0x71,
	0x3f, 0x19, 0x9f, 0x3a, 0x03, 0xce, 0x8c, 0x35, 0x1e, 0x07, 0x2a, 0xc4, 0x0d, 0x0f, 0x80, 0x10,
	0xbc, 0x00, 0x17, 0xdc, 0xf0, 0x00, 0x3c, 0x09, 0xaf, 0xc0, 0x43, 0x70, 0x89, 0x66, 0xfc, 0x13,
	0x3b, 0x69, 0xd3, 0xab, 0xe8, 0x7c, 0xe7, 0x9b, 0x39, 0xe7, 0x7c, 0xe7, 0x9b, 0x18, 0x08, 0x93,
	0x0a, 0x63, 0xc9, 0x8a, 0x39, 0x0a, 0x1d, 0x64, 0x4a, 0x6a, 0x49, 0x86, 0x6d, 0xcc, 0x3b, 0x48,
	0xa4, 0x4c, 0x52, 0x0c, 0x69, 0xc6, 0x43, 0x2a, 0x84, 0xd4, 0x54, 0x73, 0x29, 0xf2, 0x92, 0xeb,
	0xbd, 0x5a, 0x65, 0x6d, 0x34, 0x2d, 0x2e, 0x43, 0xcd, 0xe7, 0x98, 0x6b, 0x3a, 0xcf, 0x2a, 0xc2,
	0x13, 0xfb, 0xc3, 0x9e, 0x26, 0x28, 0x9e, 0xe6, 0xdf, 0xd3, 0x24, 0x41, 0x15, 0xca, 0xcc, 0x5e,
	0xb1, 0x7e, 0x9d, 0xff, 0x57, 0x0f, 0x86, 0x67, 0x52, 0xe1, 0x79, 0x55, 0x9d, 0x04, 0x40, 0xea,
	0x4e, 0x26, 0x31, 0x0a, 0xcd, 0x2f, 0x39, 0x2a, 0xb7, 0x3f, 0x72, 0x0e, 0x87, 0xd1, 0x35, 0x19,
	0xf2, 0x04, 0x9e, 0x67, 0x85, 0x52, 0x5d, 0x7a, 0xcf, 0xd2, 0xd7, 0x13, 0xe4, 0x0d, 0xd8, 0x17,
	0xf8, 0x43, 0x9b, 0x7a, 0xc7, 0x52, 0x57, 0x50, 0xe2, 0xc3, 0x30, 0x53, 0xb8, 0xe0, 0xb2, 0xc8,
	0x23, 0x29, 0xb5, 0xbb, 0x65, 0x59, 0x1d, 0xcc, 0xdc, 0x15, 0x53, 0x4d, 0x3f, 0x47, 0xf5, 0x5d,
	0x8a, 0x96, 0xb5, 0x5d, 0xde, 0xd5, 0x45, 0xcd, 0x5d, 0x75, 0xdf, 0x96, 0xb5, 0x5b, 0xde, 0xd5,
	0xc6, 0xc8, 0x3b, 0x00, 0x39, 0x4f, 0x04, 0xd5, 0x85, 0xc2, 0xdc, 0xdd, 0x19, 0xf5, 0x0e, 0x07,
	0xe3, 0x87, 0x41, 0x67, 0x55, 0x17, 0x75, 0x3e, 0x6a, 0x51, 0xc9, 0xeb, 0xf0, 0x1c, 0x93, 0x69,
	0x4a, 0xa7, 0x52, 0x51, 0x2d, 0x55, 0xee, 0xc2, 0xa8, 0x77, 0x38, 0x8c, 0xba, 0x20, 0x39, 0x87,
	0xbb, 0x75, 0xeb, 0xdf, 0xa0, 0xca, 0xb9, 0x14, 0xee, 0x9e, 0xad, 0xe1, 0x75, 0x6b, 0xb4, 0x37,
	0x11, 0xad, 0x1e, 0xf1, 0x19, 0xf4, 0x9b, 0x26, 0x88, 0x07, 0x7b, 0x46, 0x2d, 0x7d, 0x35, 0x89,
	0x5d, 0xc7, 0x4e, 0xd4, 0xc4, 0xe4, 0x00, 0xfa, 0x59, 0x31, 0x4d, 0x39, 0xfb, 0x14, 0xaf, 0x2a,
	0xe9, 0x96, 0x80, 0xc9, 0x36, 0x03, 0x54, 0x9b, 0x5a, 0x02, 0xfe, 0x7f, 0x3d, 0xb8, 0x3b, 0x11,
	0x0b, 0xc9, 0xd9, 0x6d, 0x9e, 0xe8, 0xdd, 0xe8, 0x89, 0x0f, 0xc0, 0x3a, 0xba, 0x3e, 0x6f, 0xfb,
	0xdb, 0x3c, 0x6b, 0x87, 0x4f, 0xde, 0x87, 0x3b, 0x66, 0x87, 0xb6, 0xf5, 0xc1, 0xf8, 0x51, 0xf7,
	0xdc, 0x4a, 0x73, 0x4d, 0x4c, 0x35, 0x8d, 0xec, 0x31, 0xef, 0xef, 0x2d, 0x18, 0xb4, 0x50, 0xe2,
	0xc2, 0x2e, 0x93, 0x85, 0xd0, 0xaa, 0x14, 0xa3, 0x1f, 0xd5, 0xa1, 0x11, 0xb1, 0xf4, 0x28, 0xbb,
	0xb2, 0xe3, 0xf4, 0xa3, 0x26, 0x26, 0x2f, 0xc2, 0x0e, 0x9d, 0x1b, 0x9e, 0xb5, 0x68, 0x2f, 0xaa,
	0x22, 0x23, 0x9f, 0x42, 0xc6, 0x33, 0x6e, 0x26, 0x2b, 0x1d, 0xb7, 0x04, 0xcc, 0xa9, 0x1c, 0x45,
	0x8c, 0xca, 0xdd, 0xb1, 0xa9, 0x2a, 0x22, 0xf7, 0x61, 0x3b, 0xa3, 0x57, 0x88, 0x95, 0xfb, 0xca,
	0xa0, 0xec, 0x6c, 0x6e, 0x35, 0xda, 0xab, 0x3b, 0xb3, 0x21, 0x79, 0x1b, 0x76, 0xe3, 0xc2, 0xb4,
	0x8f, 0xf6, 0xed, 0x19, 0xf5, 0xca, 0x87, 0x1f, 0xd4, 0x0f, 0x3f, 0xf8, 0xba, 0x7e, 0xf8, 0x51,
	0x4d, 0x25, 0xef, 0xc1, 0x20, 0xa6, 0x1a, 0xcf, 0x14, 0x52, 0x8d, 0xb1, 0x3b, 0xb8, 0xf5, 0x64,
	0x9b, 0xee, 0x67, 0xf0, 0xc2, 0x05, 0x8a, 0xb8, 0x92, 0xee, 0x63, 0xb1, 0xc0, 0x54, 0x66, 0x48,
	0x5e, 0x01, 0x68, 0xe6, 0xcb, 0x5d, 0xc7, 0xfa, 0xbb, 0x85, 0x90, 0x77, 0x61, 0xaf, 0x5e, 0x8e,
	0x0b, 0xb6, 0xe2, 0xcb, 0x1b, 0x37, 0x16, 0x35, 0x74, 0xff, 0x33, 0xf0, 0x3e, 0x41, 0xbd, 0x92,
	0x6f, 0x0a, 0x5f, 0x6f, 0x3b, 0xe7, 0x26, 0xdb, 0x8d, 0x7f, 0xe9, 0xc1, 0x83, 0x33, 0x14, 0x5a,
	0xf1, 0xcb, 0x22, 0xc1, 0x2f, 0x64, 0x8c, 0x17, 0xa8, 0x16, 0x9c, 0x21, 0x49, 0x61, 0xff, 0x54,
	0xb0, 0x99, 0x54, 0x8d, 0xc5, 0x36, 0x98, 0xd1, 0xdb, 0x90, 0xf3, 0xfd, 0x9f, 0xff, 0xf9, 0xf7,
	0xf7, 0xad, 0x03, 0xff, 0x61, 0xb8, 0x38, 0x0e, 0xdb, 0xb4, 0x90, 0xda, 0x02, 0x27, 0xce, 0x63,
	0xa2, 0x3b, 0x3a, 0x36, 0x25, 0x5f, 0x5b, 0xf9, 0x3f, 0x59, 0x97, 0xda, 0xdb, 0x2c, 0x9c, 0xff,
	0x92, 0x2d, 0xfe, 0xc0, 0xbf, 0x67, 0x8a, 0xf3, 0x32, 0x19, 0x1a, 0x83, 0x99, 0xaa, 0xbf, 0x3a,
	0x40, 0xd6, 0xc5, 0x24, 0x87, 0xdd, 0x2b, 0x6f, 0x96, 0xfb, 0xb6, 0xe2, 0xc7, 0xb6, 0xf8, 0x9b,
	0xe4, 0xd1, 0xda, 0xe4, 0x09, 0xea, 0xf0, 0xc7, 0xf5, 0x7d, 0xfc, 0xf4, 0xd1, 0x9f, 0xce, 0x6f,
	0xa7, 0x7f, 0x38, 0x24, 0x01, 0x77, 0xb9, 0x96, 0xd1, 0x97, 0x17, 0xa3, 0xb3, 0xd4, 0x38, 0x67,
	0x74, 0xfa, 0xd5, 0xc4, 0x3f, 0x07, 0x58, 0xe6, 0xc8, 0x68, 0xa6, 0x75, 0x96, 0x9f, 0x84, 0x61,
	0xc2, 0xf5, 0xac, 0x98, 0x06, 0x4c, 0xce, 0xc3, 0x65, 0x7a, 0x22, 0x98, 0x77, 0x7f, 0x86, 0x69,
	0x2a, 0x3f, 0x64, 0x0d, 0x18, 0x48, 0x81, 0xe3, 0xed, 0xa3, 0xe0, 0x28, 0x38, 0xf6, 0xf6, 0x53,
	0xc9, 0x68, 0x3a, 0x93, 0xb9, 0x3e, 0x79, 0x76, 0xf4, 0x6c, 0xfc, 0xd8, 0xd9, 0x1a, 0xdf, 0xa3,
	0x59, 0x96, 0x72, 0x66, 0xbf, 0x79, 0xe1, 0xb7, 0xb9, 0x14, 0x27, 0x6b, 0xc8, 0x74, 0xc7, 0x3e,
	0x8c, 0xb7, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x35, 0xa8, 0xd4, 0x47, 0x9b, 0x07, 0x00, 0x00,
}
