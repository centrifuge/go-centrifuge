package coredocument

import (
	"github.com/CentrifugeInc/centrifuge-protobufs/gen/go/coredocument"
	"github.com/CentrifugeInc/go-centrifuge/centrifuge/tools"
)

// coreDocValidator implements Validate method for document validation
// Needs to typecast for document validation
type coreDocValidator coredocumentpb.CoreDocument

// Validate validates the core document
// doesn't mutate core document
func (document *coreDocValidator) Validate() (valid bool, errMsg string, errors map[string]string) {
	errors = make(map[string]string)

	if tools.IsEmptyByteSlice(document.DocumentIdentifier) {
		errors["cd_identifier"] = "Empty Document Identifier"
	}

	if tools.IsEmptyByteSlice(document.DocumentRoot) {
		errors["cd_root"] = "Empty Document Root"
	}

	if tools.IsEmptyByteSlice(document.CurrentIdentifier) {
		errors["cd_current_identifier"] = "Empty Document Current Identifier"
	}

	if tools.IsEmptyByteSlice(document.NextIdentifier) {
		errors["cd_next_identifier"] = "Empty Document Next Identifier"
	}

	if tools.IsEmptyByteSlice(document.DataRoot) {
		errors["cd_data_root"] = "Empty Document Data Root"
	}

	// lets not do verbose check like earlier since these will be
	// generated by us mostly
	salts := document.CoredocumentSalts
	if salts == nil ||
		!tools.CheckMultiple32BytesFilled(
			salts.CurrentIdentifier,
			salts.DataRoot,
			salts.NextIdentifier,
			salts.DocumentIdentifier,
			salts.PreviousRoot) {
		errors["cd_salts"] = "Empty Document salts"
	}

	if len(errors) < 1 {
		return true, "", nil
	}

	return false, "Invalid CoreDocument", errors
}

// Validate checks that all required fields are set before doing any processing with core document
// will panic if the coreDocument is nil
func Validate(coreDoc *coredocumentpb.CoreDocument) (valid bool, errMsg string, errors map[string]string) {
	if coreDoc == nil {
		panic("Nil core document passed")
	}

	v := (*coreDocValidator)(coreDoc)
	return v.Validate()
}
