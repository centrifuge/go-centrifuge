package coredocument

import (
	"github.com/CentrifugeInc/centrifuge-protobufs/gen/go/coredocument"
	"github.com/CentrifugeInc/go-centrifuge/centrifuge/errors"
	"github.com/CentrifugeInc/go-centrifuge/centrifuge/tools"
	"github.com/centrifuge/precise-proofs/proofs"
)

// Validate checks that all required fields are set before doing any processing with core document
func Validate(document *coredocumentpb.CoreDocument) (valid bool, errMsg string, errs map[string]string) {
	if document == nil {
		return false, errors.NilDocument, nil
	}

	errs = make(map[string]string)

	if tools.IsEmptyByteSlice(document.DocumentIdentifier) {
		errs["cd_identifier"] = errors.RequiredField
	}

	// TODO(ved): where do we fill these
	//if tools.IsEmptyByteSlice(document.DocumentRoot) {
	//	errs["cd_root"] = errors.RequiredField
	//}

	if tools.IsEmptyByteSlice(document.CurrentIdentifier) {
		errs["cd_current_identifier"] = errors.RequiredField
	}

	if tools.IsEmptyByteSlice(document.NextIdentifier) {
		errs["cd_next_identifier"] = errors.RequiredField
	}

	if tools.IsEmptyByteSlice(document.DataRoot) {
		errs["cd_data_root"] = errors.RequiredField
	}

	// double check the identifiers
	isSameBytes := tools.IsSameByteSlice

	// Problem (re-using an old identifier for NextIdentifier): CurrentIdentifier or DocumentIdentifier same as NextIdentifier
	if isSameBytes(document.NextIdentifier, document.DocumentIdentifier) ||
		isSameBytes(document.NextIdentifier, document.CurrentIdentifier) {
		errs["cd_overall"] = errors.IdentifierReUsed
	}

	// lets not do verbose check like earlier since these will be
	// generated by us mostly
	salts := document.CoredocumentSalts
	if salts == nil ||
		!tools.CheckMultiple32BytesFilled(
			salts.CurrentIdentifier,
			salts.DataRoot,
			salts.NextIdentifier,
			salts.DocumentIdentifier,
			salts.PreviousRoot) {
		errs["cd_salts"] = errors.RequiredField
	}

	if len(errs) < 1 {
		return true, "", nil
	}

	return false, "Invalid CoreDocument", errs
}

// New returns a new core document from the proto message
func New() *coredocumentpb.CoreDocument {
	doc, _ := FillIdentifiers(coredocumentpb.CoreDocument{})
	salts := &coredocumentpb.CoreDocumentSalts{}
	proofs.FillSalts(salts)
	doc.CoredocumentSalts = salts
	return &doc
}
