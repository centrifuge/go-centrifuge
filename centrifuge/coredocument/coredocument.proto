syntax = "proto3";
package coredocument;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

option go_package = "github.com/CentrifugeInc/go-centrifuge/centrifuge/coredocument";

// CoreDocument is a document that can be sent to different nodes and anchored on chain
message CoreDocument {
    // Identifier
    // ----------
    // This is for convenience: the first identifier that was ever used to refer to a 
    // document is kept here. Internally the centrifuge node indexes & bundles documents 
    // by original identifier.
    bytes documentIdentifier = 9; 

    // The current identifier is the location of the current anchor on chain and is used to 
    // refer to the current state.
    bytes currentIdentifier = 3;

    // When creating the next version this should be used.
    bytes nextIdentifier = 4;
    
    // Root
    bytes previousRoot = 2;
    bytes dataMerkleRoot = 5; 
    bytes documentRoot = 7;

    // Signatures
    repeated Signature signatures = 6;

    // List of collaborators on this document. These Centrifuge Identities have access
    // to the document and should receive new versions whenever a document is updated.
    repeated bytes collaborators = 10;
    repeated AccessControlEntry acl = 11;

    // The previous document is referenced here but doesn't need to be provided and can
    // be left blank
    repeated CoreDocument previousVersion = 8;
}

// Signature contains the entity ID, public key used and signature)
message Signature {
    bytes entityId = 1;
    bytes publicKey = 2;
    bytes signature = 3;
}

// AccessControlEntry defines a member of the document
message AccessControlEntry {
    // All identities listed
    repeated bytes identity = 1;

    // There are two ways to describe the acl schema. One of the standard ACL schemas can be referenced by a
    // unique identifier or a schema can be embedded.
    bytes aclSchemaIdentifier = 2;
    AccessControlSchema embeddedAclSchema = 3;
}

message AccessControlSchema {
    // Set either to true to grant access to also look at past versions of the document and/or future updates
    // to the document.
    bool grantPastVersionAccess = 2;
    bool grantFutureVersionAccess = 3;

    google.protobuf.Timestamp grantAccessToFutureVersionsUntil = 4;

    // TODO: how granular do we want to grant these permissions? Fields?
    repeated FieldAccess readFields = 5;
    repeated FieldAccess writeFields = 6;
}

message FieldAccess {
    // TODO: how do we identify field names?
    string fieldName = 1;
}