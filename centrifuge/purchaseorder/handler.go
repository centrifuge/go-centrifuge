package purchaseorder

import (
	"fmt"

	"github.com/CentrifugeInc/centrifuge-protobufs/gen/go/coredocument"
	"github.com/CentrifugeInc/centrifuge-protobufs/gen/go/purchaseorder"
	"github.com/CentrifugeInc/go-centrifuge/centrifuge/code"
	"github.com/CentrifugeInc/go-centrifuge/centrifuge/coredocument/processor"
	"github.com/CentrifugeInc/go-centrifuge/centrifuge/coredocument/repository"
	"github.com/CentrifugeInc/go-centrifuge/centrifuge/errors"
	clientpurchaseorderpb "github.com/CentrifugeInc/go-centrifuge/centrifuge/protobufs/gen/go/purchaseorder"
	"github.com/CentrifugeInc/go-centrifuge/centrifuge/storage"
	googleprotobuf2 "github.com/golang/protobuf/ptypes/empty"
	"golang.org/x/net/context"
)

// Handler needed as it is used to register the grpc services attached to the grpc server
type Handler struct {
	Repository            storage.Repository
	CoreDocumentProcessor coredocumentprocessor.Processor
}

// anchorPurchaseOrderDocument anchors the given purchaseorder document and returns the anchor details
func (s *Handler) anchorPurchaseOrderDocument(doc *purchaseorderpb.PurchaseOrderDocument) (*purchaseorderpb.PurchaseOrderDocument, error) {
	orderDoc, err := New(doc)
	if err != nil {
		log.Error(err)
		return nil, err
	}

	coreDoc, err := orderDoc.ConvertToCoreDocument()
	if err != nil {
		log.Error(err)
		return nil, err
	}

	err = s.CoreDocumentProcessor.Anchor(coreDoc)
	if err != nil {
		log.Error(err)
		return nil, err
	}

	newPo, err := NewFromCoreDocument(coreDoc)
	if err != nil {
		log.Error(err)
		return nil, err
	}

	return newPo.Document, nil
}

// CreatePurchaseOrderProof creates proofs for a list of fields
func (s *Handler) CreatePurchaseOrderProof(ctx context.Context, createPurchaseOrderProofEnvelope *clientpurchaseorderpb.CreatePurchaseOrderProofEnvelope) (*clientpurchaseorderpb.PurchaseOrderProof, error) {
	orderDoc := new(purchaseorderpb.PurchaseOrderDocument)
	err := s.Repository.GetByID(createPurchaseOrderProofEnvelope.DocumentIdentifier, orderDoc)
	if err != nil {
		log.Error(err)
		return nil, errors.New(code.DocumentNotFound, err.Error())
	}

	order, err := Wrap(orderDoc)
	if err != nil {
		log.Error(err)
		return nil, errors.New(code.Unknown, err.Error())
	}

	proofs, err := order.CreateProofs(createPurchaseOrderProofEnvelope.Fields)
	if err != nil {
		log.Error(err)
		return nil, errors.New(code.Unknown, fmt.Sprintf("failed to create proofs: %v", err))
	}

	return &clientpurchaseorderpb.PurchaseOrderProof{FieldProofs: proofs, DocumentIdentifier: order.Document.CoreDocument.DocumentIdentifier}, nil
}

// AnchorPurchaseOrderDocument anchors the given purchaseorder document and returns the anchor details
func (s *Handler) AnchorPurchaseOrderDocument(ctx context.Context, anchorPurchaseOrderEnvelope *clientpurchaseorderpb.AnchorPurchaseOrderEnvelope) (*purchaseorderpb.PurchaseOrderDocument, error) {
	doc, err := New(anchorPurchaseOrderEnvelope.Document)
	if err != nil {
		return nil, errors.New(code.Unknown, err.Error())
	}

	err = s.Repository.Create(doc.Document.CoreDocument.DocumentIdentifier, doc.Document)
	if err != nil {
		log.Error(err)
		return nil, errors.New(code.Unknown, fmt.Sprintf("failed to save document: %v", err))
	}

	anchoredPurchaseOrder, err := s.anchorPurchaseOrderDocument(doc.Document)
	if err != nil {
		log.Error(err)
		return nil, errors.New(code.Unknown, fmt.Sprintf("failed to anchor document: %v", err))
	}

	// Updating purchaseorder with autogenerated fields after anchoring
	err = s.Repository.Update(doc.Document.CoreDocument.DocumentIdentifier, doc.Document)
	if err != nil {
		log.Error(err)
		return nil, errors.New(code.Unknown, fmt.Sprintf("failed to save document: %v", err))
	}

	return anchoredPurchaseOrder, nil
}

// SendPurchaseOrderDocument anchors and sends an purchaseorder to the recipient
func (s *Handler) SendPurchaseOrderDocument(ctx context.Context, sendPurchaseOrderEnvelope *clientpurchaseorderpb.SendPurchaseOrderEnvelope) (*purchaseorderpb.PurchaseOrderDocument, error) {
	doc, err := s.AnchorPurchaseOrderDocument(ctx, &clientpurchaseorderpb.AnchorPurchaseOrderEnvelope{Document: sendPurchaseOrderEnvelope.Document})
	if err != nil {
		return nil, err
	}

	var errs []error
	for _, recipient := range sendPurchaseOrderEnvelope.Recipients {
		err = s.CoreDocumentProcessor.Send(doc.CoreDocument, ctx, recipient)
		if err != nil {
			errs = append(errs, err)
		}
	}

	if len(errs) != 0 {
		log.Errorf("%v", errs)
		return nil, errors.New(code.Unknown, fmt.Sprintf("%v", errs))
	}

	return doc, nil
}

// GetPurchaseOrderDocument returns the purchaseorder, if exists, with provided document identifier
func (s *Handler) GetPurchaseOrderDocument(ctx context.Context, getPurchaseOrderDocumentEnvelope *clientpurchaseorderpb.GetPurchaseOrderDocumentEnvelope) (*purchaseorderpb.PurchaseOrderDocument, error) {
	doc := new(purchaseorderpb.PurchaseOrderDocument)
	err := s.Repository.GetByID(getPurchaseOrderDocumentEnvelope.DocumentIdentifier, doc)
	if err == nil {
		return doc, nil
	}

	// TODO(ved): where are we saving this coredocument?
	docFound := new(coredocumentpb.CoreDocument)
	err = coredocumentrepository.GetRepository().GetByID(getPurchaseOrderDocumentEnvelope.DocumentIdentifier, docFound)
	if err != nil {
		log.Error(err)
		return nil, errors.New(code.DocumentNotFound, fmt.Sprintf("failed to get document: %v", err))
	}

	purchaseOrder, err := NewFromCoreDocument(docFound)
	if err != nil {
		return nil, errors.New(code.Unknown, fmt.Sprintf("failed convert coredoc to purchase order: %v", err))
	}

	return purchaseOrder.Document, nil
}

// GetReceivedPurchaseOrderDocuments returns all the received purchase orders
func (s *Handler) GetReceivedPurchaseOrderDocuments(ctx context.Context, empty *googleprotobuf2.Empty) (*clientpurchaseorderpb.ReceivedPurchaseOrders, error) {
	return nil, nil
}
