basePath: /
definitions:
  byteutils.HexBytes:
    items:
      type: integer
    type: array
  byteutils.OptionalHex:
    properties:
      HexBytes:
        items:
          type: integer
        type: array
    type: object
  config.CentChainAccount:
    properties:
      id:
        type: string
      secret:
        type: string
      ss_58_address:
        type: string
    type: object
  coreapi.Account:
    properties:
      centrifuge_chain_account:
        $ref: '#/definitions/config.CentChainAccount'
        type: object
      eth_account:
        $ref: '#/definitions/coreapi.EthAccount'
        type: object
      eth_default_account_name:
        type: string
      identity_id:
        type: string
      p2p_key_pair:
        $ref: '#/definitions/coreapi.KeyPair'
        type: object
      receive_event_notification_endpoint:
        type: string
      signing_key_pair:
        $ref: '#/definitions/coreapi.KeyPair'
        type: object
    type: object
  coreapi.Accounts:
    properties:
      data:
        items:
          $ref: '#/definitions/coreapi.Account'
        type: array
    type: object
  coreapi.AttributeMapRequest:
    additionalProperties:
      $ref: '#/definitions/coreapi.AttributeRequest'
    type: object
  coreapi.AttributeMapResponse:
    additionalProperties:
      $ref: '#/definitions/coreapi.AttributeResponse'
    type: object
  coreapi.AttributeRequest:
    properties:
      monetary_value:
        $ref: '#/definitions/coreapi.MonetaryValue'
        type: object
      type:
        enum:
        - integer
        - decimal
        - string
        - bytes
        - timestamp
        - monetary
        type: string
      value:
        type: string
    type: object
  coreapi.AttributeResponse:
    properties:
      key:
        type: string
      monetary_value:
        $ref: '#/definitions/coreapi.MonetaryValue'
        type: object
      signed_value:
        $ref: '#/definitions/coreapi.SignedValue'
        type: object
      type:
        enum:
        - integer
        - decimal
        - string
        - bytes
        - timestamp
        - monetary
        type: string
      value:
        type: string
    type: object
  coreapi.CreateDocumentRequest:
    properties:
      attributes:
        $ref: '#/definitions/coreapi.AttributeMapRequest'
        type: object
      data:
        type: object
      read_access:
        items:
          type: string
        type: array
      scheme:
        enum:
        - generic
        - entity
        type: string
      write_access:
        items:
          type: string
        type: array
    type: object
  coreapi.DocumentResponse:
    properties:
      attributes:
        $ref: '#/definitions/coreapi.AttributeMapResponse'
        type: object
      data:
        type: object
      header:
        $ref: '#/definitions/coreapi.ResponseHeader'
        type: object
      scheme:
        enum:
        - generic
        - entity
        type: string
    type: object
  coreapi.EthAccount:
    properties:
      address:
        type: string
      key:
        type: string
      password:
        type: string
    type: object
  coreapi.GenerateAccountPayload:
    properties:
      centrifuge_chain_account:
        $ref: '#/definitions/config.CentChainAccount'
        type: object
    type: object
  coreapi.KeyPair:
    properties:
      pub:
        type: string
      pvt:
        type: string
    type: object
  coreapi.MintNFTRequest:
    properties:
      asset_manager_address:
        type: string
      deposit_address:
        type: string
      document_id:
        type: string
      proof_fields:
        items:
          type: string
        type: array
    type: object
  coreapi.MintNFTResponse:
    properties:
      deposit_address:
        type: string
      document_id:
        type: string
      header:
        $ref: '#/definitions/coreapi.NFTResponseHeader'
        type: object
      registry_address:
        type: string
      token_id:
        type: string
    type: object
  coreapi.MonetaryValue:
    properties:
      chain_id:
        type: string
      id:
        type: string
      value:
        type: string
    type: object
  coreapi.NFT:
    properties:
      owner:
        type: string
      registry:
        type: string
      token_id:
        type: string
      token_index:
        type: string
    type: object
  coreapi.NFTOwnerResponse:
    properties:
      owner:
        type: string
      registry_address:
        type: string
      token_id:
        type: string
    type: object
  coreapi.NFTResponseHeader:
    properties:
      job_id:
        type: string
    type: object
  coreapi.ProofResponseHeader:
    properties:
      document_id:
        type: string
      state:
        type: string
      version_id:
        type: string
    type: object
  coreapi.ProofsRequest:
    properties:
      fields:
        items:
          type: string
        type: array
    type: object
  coreapi.ProofsResponse:
    properties:
      field_proofs:
        items:
          $ref: '#/definitions/documents.Proof'
        type: array
      header:
        $ref: '#/definitions/coreapi.ProofResponseHeader'
        type: object
    type: object
  coreapi.ResponseHeader:
    properties:
      author:
        type: string
      created_at:
        type: string
      document_id:
        type: string
      fingerprint:
        type: string
      job_id:
        type: string
      nfts:
        items:
          $ref: '#/definitions/coreapi.NFT'
        type: array
      read_access:
        items:
          type: string
        type: array
      status:
        type: string
      version_id:
        type: string
      write_access:
        items:
          type: string
        type: array
    type: object
  coreapi.SignRequest:
    properties:
      payload:
        type: string
    type: object
  coreapi.SignResponse:
    properties:
      payload:
        type: string
      public_key:
        type: string
      signature:
        type: string
      signer_id:
        type: string
    type: object
  coreapi.SignedValue:
    properties:
      identity:
        type: string
      value:
        type: string
    type: object
  coreapi.TransferNFTRequest:
    properties:
      to:
        type: string
    type: object
  coreapi.TransferNFTResponse:
    properties:
      header:
        $ref: '#/definitions/coreapi.NFTResponseHeader'
        type: object
      registry_address:
        type: string
      to:
        type: string
      token_id:
        type: string
    type: object
  documents.Proof:
    properties:
      hash:
        type: string
      property:
        type: string
      salt:
        type: string
      sorted_hashes:
        items:
          type: string
        type: array
      value:
        type: string
    type: object
  entity.Address:
    properties:
      address_line_1:
        type: string
      address_line_2:
        type: string
      contact_person:
        type: string
      country:
        type: string
      is_main:
        type: boolean
      is_pay_to:
        type: boolean
      is_remit_to:
        type: boolean
      is_ship_to:
        type: boolean
      label:
        type: string
      state:
        type: string
      zip:
        type: string
    type: object
  entity.BankPaymentMethod:
    properties:
      address:
        $ref: '#/definitions/entity.Address'
        type: object
      bank_account_number:
        type: string
      bank_key:
        type: string
      holder_name:
        type: string
      identifier:
        type: string
      supported_currency:
        type: string
    type: object
  entity.Contact:
    properties:
      email:
        type: string
      fax:
        type: string
      name:
        type: string
      phone:
        type: string
      title:
        type: string
    type: object
  entity.CryptoPaymentMethod:
    properties:
      chain_uri:
        type: string
      identifier:
        type: string
      supported_currency:
        type: string
      to:
        type: string
    type: object
  entity.Data:
    properties:
      addresses:
        items:
          $ref: '#/definitions/entity.Address'
        type: array
      contacts:
        items:
          $ref: '#/definitions/entity.Contact'
        type: array
      identity:
        type: string
      legal_name:
        type: string
      payment_details:
        items:
          $ref: '#/definitions/entity.PaymentDetail'
        type: array
    type: object
  entity.OtherPaymentMethod:
    properties:
      identifier:
        type: string
      pay_to:
        type: string
      supported_currency:
        type: string
      type:
        type: string
    type: object
  entity.PaymentDetail:
    properties:
      bank_payment_method:
        $ref: '#/definitions/entity.BankPaymentMethod'
        type: object
      crypto_payment_method:
        $ref: '#/definitions/entity.CryptoPaymentMethod'
        type: object
      other_payment_method:
        $ref: '#/definitions/entity.OtherPaymentMethod'
        type: object
      predefined:
        type: boolean
    type: object
  funding.Data:
    properties:
      agreement_id:
        type: string
      amount:
        type: string
      apr:
        type: string
      borrower_id:
        type: string
      currency:
        type: string
      days:
        type: string
      fee:
        type: string
      funder_id:
        type: string
      nft_address:
        type: string
      payment_details_id:
        type: string
      repayment_amount:
        type: string
      repayment_due_date:
        type: string
      repayment_occurred_date:
        type: string
    type: object
  funding.Signature:
    properties:
      identity:
        type: string
      outdated_signature:
        type: string
      signed_version:
        type: string
      valid:
        type: string
    type: object
  health.Pong:
    properties:
      network:
        type: string
      version:
        type: string
    type: object
  httputils.HTTPError:
    properties:
      message:
        type: string
    type: object
  identity.DID:
    items:
      type: integer
    type: array
  jobs.StatusResponse:
    properties:
      job_id:
        type: string
      last_updated:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  notification.Message:
    properties:
      account_id:
        description: account_id is the account associated to webhook
        type: string
      document_id:
        type: string
      document_type:
        type: string
      event_type:
        type: integer
      from_id:
        description: from_id if provided, original trigger of the event
        type: string
      message:
        type: string
      recorded:
        type: string
      status:
        type: string
      to_id:
        description: to_id if provided, final destination of the event
        type: string
    type: object
  pending.AddTransitionRules:
    properties:
      attribute_rules:
        items:
          $ref: '#/definitions/pending.AttributeRule'
        type: array
      compute_fields_rules:
        items:
          $ref: '#/definitions/pending.ComputeFieldsRule'
        type: array
    type: object
  pending.AttributeRule:
    properties:
      key_label:
        description: attribute key label
        type: string
      role_id:
        description: roleID is 32 byte role ID in hex. RoleID should already be part of the document.
        type: string
    type: object
  pending.ComputeFieldsRule:
    properties:
      attribute_labels:
        description: AttributeLabels that are passed to the WASM for execution
        items:
          type: string
        type: array
      target_attribute_label:
        description: |-
          TargetAttributeLabel is the label of the attribute which holds the result from the executed WASM.
          This attribute is automatically added and updated everytime document is updated.
        type: string
      wasm:
        type: string
    type: object
  transferdetails.Data:
    properties:
      amount:
        type: string
      currency:
        type: string
      data:
        type: string
      recipient_id:
        type: string
      scheduled_date:
        type: string
      sender_id:
        type: string
      settlement_date:
        type: string
      settlement_reference:
        type: string
      status:
        type: string
      transfer_id:
        type: string
      transfer_type:
        type: string
    type: object
  userapi.CreateEntityRequest:
    properties:
      attributes:
        $ref: '#/definitions/coreapi.AttributeMapRequest'
        type: object
      data:
        $ref: '#/definitions/entity.Data'
        type: object
      read_access:
        items:
          type: string
        type: array
      write_access:
        items:
          type: string
        type: array
    type: object
  userapi.CreateTransferDetailRequest:
    properties:
      data:
        $ref: '#/definitions/transferdetails.Data'
        type: object
      document_id:
        type: string
    type: object
  userapi.EntityDataResponse:
    properties:
      entity:
        $ref: '#/definitions/entity.Data'
        type: object
      relationships:
        items:
          $ref: '#/definitions/userapi.Relationship'
        type: array
    type: object
  userapi.EntityResponse:
    properties:
      attributes:
        $ref: '#/definitions/coreapi.AttributeMapResponse'
        type: object
      data:
        $ref: '#/definitions/userapi.EntityDataResponse'
        type: object
      header:
        $ref: '#/definitions/coreapi.ResponseHeader'
        type: object
    type: object
  userapi.FundingDataResponse:
    properties:
      funding:
        $ref: '#/definitions/funding.Data'
        type: object
      signatures:
        items:
          $ref: '#/definitions/funding.Signature'
        type: array
    type: object
  userapi.FundingListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/userapi.FundingDataResponse'
        type: array
      header:
        $ref: '#/definitions/coreapi.ResponseHeader'
        type: object
    type: object
  userapi.FundingRequest:
    properties:
      data:
        $ref: '#/definitions/funding.Data'
        type: object
    type: object
  userapi.FundingResponse:
    properties:
      data:
        $ref: '#/definitions/userapi.FundingDataResponse'
        type: object
      header:
        $ref: '#/definitions/coreapi.ResponseHeader'
        type: object
    type: object
  userapi.Relationship:
    properties:
      active:
        type: boolean
      entity_identifier:
        type: string
      owner_identity:
        type: string
      target_identity:
        type: string
    type: object
  userapi.ShareEntityRequest:
    properties:
      target_identity:
        type: string
    type: object
  userapi.ShareEntityResponse:
    properties:
      header:
        $ref: '#/definitions/coreapi.ResponseHeader'
        type: object
      relationship:
        $ref: '#/definitions/userapi.Relationship'
        type: object
    type: object
  userapi.TransferDetailListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/transferdetails.Data'
        type: array
      header:
        $ref: '#/definitions/coreapi.ResponseHeader'
        type: object
    type: object
  userapi.TransferDetailResponse:
    properties:
      data:
        $ref: '#/definitions/transferdetails.Data'
        type: object
      header:
        $ref: '#/definitions/coreapi.ResponseHeader'
        type: object
    type: object
  userapi.UpdateTransferDetailRequest:
    properties:
      data:
        $ref: '#/definitions/transferdetails.Data'
        type: object
      document_id:
        type: string
      transfer_id:
        type: string
    type: object
  v2.AddRole:
    properties:
      collaborators:
        items:
          type: string
        type: array
      key:
        description: |-
          Key is either hex encoded 32 byte ID or string label.
          String label is used as a preimage to sha256 for 32 byte hash.
        type: string
    type: object
  v2.CloneDocumentRequest:
    properties:
      scheme:
        enum:
        - generic
        - entity
        type: string
    type: object
  v2.CreateDocumentRequest:
    properties:
      attributes:
        $ref: '#/definitions/coreapi.AttributeMapRequest'
        type: object
      data:
        type: object
      document_id:
        description: if provided, creates the next version of the document.
        type: string
      read_access:
        items:
          type: string
        type: array
      scheme:
        enum:
        - generic
        - entity
        type: string
      write_access:
        items:
          type: string
        type: array
    type: object
  v2.RemoveCollaboratorsRequest:
    properties:
      collaborators:
        items:
          type: string
        type: array
    type: object
  v2.Role:
    properties:
      collaborators:
        items:
          type: string
        type: array
      id:
        type: string
    type: object
  v2.SignedAttributeRequest:
    properties:
      label:
        type: string
      payload:
        type: string
      type:
        enum:
        - integer
        - string
        - bytes
        - timestamp
        type: string
    type: object
  v2.TransitionRule:
    properties:
      action:
        type: string
      attribute_labels:
        items:
          type: string
        type: array
      field:
        type: string
      roles:
        items:
          type: string
        type: array
      rule_id:
        type: string
      target_attribute_label:
        type: string
      wasm:
        type: string
    type: object
  v2.TransitionRules:
    properties:
      rules:
        items:
          $ref: '#/definitions/v2.TransitionRule'
        type: array
    type: object
  v2.UpdateDocumentRequest:
    properties:
      attributes:
        $ref: '#/definitions/coreapi.AttributeMapRequest'
        type: object
      data:
        type: object
      read_access:
        items:
          type: string
        type: array
      scheme:
        enum:
        - generic
        - entity
        type: string
      write_access:
        items:
          type: string
        type: array
    type: object
  v2.UpdateRole:
    properties:
      collaborators:
        items:
          type: string
        type: array
    type: object
host: localhost:8082
info:
  contact:
    email: hello@centrifuge.io
    name: Centrifuge
    url: https://github.com/centrifuge/go-centrifuge
  description: Centrifuge OS Node API
  license:
    name: MIT
  title: Centrifuge OS Node API
  version: 2.0.0
paths:
  /ping:
    get:
      description: returns node version and network
      operationId: ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/health.Pong'
      summary: Health check for Node
      tags:
      - Health
  /v1/accounts:
    get:
      description: Returns all the accounts in the node.
      operationId: get_accounts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.Accounts'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns all the accounts in the node.
      tags:
      - Accounts
    post:
      description: Creates a new account without any default configurations.
      operationId: create_account
      parameters:
      - description: Account Create request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/coreapi.Account'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Creates a new account without any default configurations.
      tags:
      - Accounts
  /v1/accounts/{account_id}:
    get:
      description: Returns the account associated with accountID.
      operationId: get_account
      parameters:
      - description: Account ID
        in: path
        name: account_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the account associated with accountID.
      tags:
      - Accounts
    put:
      description: Updates an existing account.
      operationId: update_account
      parameters:
      - description: Account ID
        in: path
        name: account_id
        required: true
        type: string
      - description: Account Update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/coreapi.Account'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Updates an existing account.
      tags:
      - Accounts
  /v1/accounts/{account_id}/sign:
    post:
      description: Signs and returns the signature of the Payload.
      operationId: account_sign
      parameters:
      - description: Account ID
        in: path
        name: account_id
        required: true
        type: string
      - description: Sign request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/coreapi.SignRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.SignResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Signs and returns the signature of the Payload.
      tags:
      - Accounts
  /v1/accounts/generate:
    post:
      description: Generates a new account with defaults.
      operationId: generate_account
      parameters:
      - description: Generate Account Payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/coreapi.GenerateAccountPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Generates a new account with defaults.
      tags:
      - Accounts
  /v1/documents:
    post:
      consumes:
      - application/json
      description: Creates a new document and anchors it.
      operationId: create_document
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Create request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/coreapi.CreateDocumentRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/coreapi.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Creates a new document and anchors it.
      tags:
      - Documents
  /v1/documents/{document_id}:
    get:
      description: Returns the latest version of the document.
      operationId: get_document
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the latest version of the document.
      tags:
      - Documents
    put:
      consumes:
      - application/json
      description: Updates an existing document and anchors it.
      operationId: update_document
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Document Update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/coreapi.CreateDocumentRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/coreapi.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Updates an existing document and anchors it.
      tags:
      - Documents
  /v1/documents/{document_id}/funding_agreements:
    get:
      consumes:
      - application/json
      description: Returns all the funding agreements in the document associated with document_id.
      operationId: get_funding_agreements
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userapi.FundingListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns all the funding agreements in the document associated with document_id.
      tags:
      - Funding Agreements
    post:
      consumes:
      - application/json
      description: Creates a new funding agreement on the document.
      operationId: create_funding_agreement
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Funding agreement Create Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/userapi.FundingRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/userapi.FundingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Creates a new funding agreement on the document.
      tags:
      - Funding Agreements
  /v1/documents/{document_id}/funding_agreements/{agreement_id}:
    get:
      consumes:
      - application/json
      description: Returns the funding agreement associated with agreement_id in the document.
      operationId: get_funding_agreement
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Funding agreement Identifier
        in: path
        name: agreement_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userapi.FundingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the funding agreement associated with agreement_id in the document.
      tags:
      - Funding Agreements
    put:
      consumes:
      - application/json
      description: Updates the funding agreement associated with agreement_id in the document.
      operationId: update_funding_agreement
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Funding agreement Identifier
        in: path
        name: agreement_id
        required: true
        type: string
      - description: Funding Agreement Update Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/userapi.FundingRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/userapi.FundingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Updates the funding agreement associated with agreement_id in the document.
      tags:
      - Funding Agreements
  /v1/documents/{document_id}/funding_agreements/{agreement_id}/sign:
    post:
      consumes:
      - application/json
      description: Signs the funding agreement associated with agreement_id.
      operationId: sign_funding_agreement
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Funding agreement Identifier
        in: path
        name: agreement_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userapi.FundingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Signs the funding agreement associated with agreement_id.
      tags:
      - Funding Agreements
  /v1/documents/{document_id}/proofs:
    post:
      description: Generates proofs for the fields from latest version of the document.
      operationId: generate_document_proofs
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Document proof request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/coreapi.ProofsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.ProofsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Generates proofs for the fields from latest version of the document.
      tags:
      - Documents
  /v1/documents/{document_id}/transfer_details:
    get:
      description: Returns a list of the latest versions of all transfer details on the document.
      operationId: list_transfer_details
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userapi.TransferDetailListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns a list of the latest versions of all transfer details on the document.
      tags:
      - Transfer Details
    post:
      consumes:
      - application/json
      description: Creates a new transfer detail extension on a document and anchors it.
      operationId: create_transfer_detail
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Transfer Detail Create Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/userapi.CreateTransferDetailRequest'
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/userapi.TransferDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Creates a new transfer detail extension on a document and anchors it.
      tags:
      - Transfer Details
  /v1/documents/{document_id}/transfer_details/{transfer_id}:
    get:
      description: Returns the latest version of the transfer detail.
      operationId: get_transfer_detail
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Transfer Detail Identifier
        in: path
        name: transfer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userapi.TransferDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the latest version of the transfer detail.
      tags:
      - Transfer Details
    put:
      consumes:
      - application/json
      description: Updates a new transfer detail extension on a document and anchors it.
      operationId: update_transfer_detail
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Transfer Detail Update Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/userapi.UpdateTransferDetailRequest'
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Transfer Detail Identifier
        in: path
        name: transfer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/userapi.TransferDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Updates a new transfer detail extension on a document and anchors it.
      tags:
      - Transfer Details
  /v1/documents/{document_id}/versions/{version_id}:
    get:
      description: Returns the specific version of the document.
      operationId: get_document_version
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Document Version Identifier
        in: path
        name: version_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the specific version of the document.
      tags:
      - Documents
  /v1/documents/{document_id}/versions/{version_id}/funding_agreements:
    get:
      description: Returns all the funding agreements from a specific version of the document.
      operationId: get_funding_agreements_version
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Document Version Identifier
        in: path
        name: version_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userapi.FundingListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns all the funding agreements from a specific version of the document.
      tags:
      - Funding Agreements
  /v1/documents/{document_id}/versions/{version_id}/funding_agreements/{agreement_id}:
    get:
      description: Returns the funding agreement from a specific version of the document.
      operationId: get_funding_agreement_version
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Document Version Identifier
        in: path
        name: version_id
        required: true
        type: string
      - description: Funding agreement Identifier
        in: path
        name: agreement_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userapi.FundingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the funding agreement from a specific version of the document.
      tags:
      - Funding Agreements
  /v1/documents/{document_id}/versions/{version_id}/proofs:
    post:
      description: Generates proofs for the fields from a specific document version.
      operationId: generate_document_version_proofs
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Document Version Identifier
        in: path
        name: version_id
        required: true
        type: string
      - description: Document proof request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/coreapi.ProofsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.ProofsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Generates proofs for the fields from a specific document version.
      tags:
      - Documents
  /v1/entities:
    post:
      consumes:
      - application/json
      description: Creates a new Entity and anchors it.
      operationId: create_entity
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Entity Create request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/userapi.CreateEntityRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/userapi.EntityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Creates a new Entity and anchors it.
      tags:
      - Entities
  /v1/entities/{document_id}:
    get:
      description: Returns the latest version of the Entity.
      operationId: get_entity
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userapi.EntityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the latest version of the Entity.
      tags:
      - Entities
    put:
      consumes:
      - application/json
      description: Updates an existing Entity and anchors it.
      operationId: update_entity
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Entity Create request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/userapi.CreateEntityRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/userapi.EntityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Updates an existing Entity and anchors it.
      tags:
      - Entities
  /v1/entities/{document_id}/revoke:
    post:
      consumes:
      - application/json
      description: Revoke revokes target id's access to entity.
      operationId: revoke_entity
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Entity Revoke request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/userapi.ShareEntityRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/userapi.ShareEntityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Revoke revokes target id's access to entity.
      tags:
      - Entities
  /v1/entities/{document_id}/share:
    post:
      consumes:
      - application/json
      description: Share gives entity access to target identity.
      operationId: share_entity
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Entity Share request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/userapi.ShareEntityRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/userapi.ShareEntityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Share gives entity access to target identity.
      tags:
      - Entities
  /v1/jobs/{job_id}:
    get:
      description: Returns the status of a given Job.
      operationId: get_job_status
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Job ID
        in: path
        name: job_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/jobs.StatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the status of a given Job.
      tags:
      - Jobs
  /v1/nfts/registries/{registry_address}/mint:
    post:
      consumes:
      - application/json
      description: Mints an NFT against a document.
      operationId: mint_nft
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: NFT registry address in hex
        in: path
        name: registry_address
        required: true
        type: string
      - description: Mint NFT request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/coreapi.MintNFTRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/coreapi.MintNFTResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Mints an NFT against a document.
      tags:
      - NFTs
  /v1/nfts/registries/{registry_address}/tokens/{token_id}/owner:
    get:
      description: Returns the Owner of the given NFT.
      operationId: owner_of_nft
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: NFT token ID in hex
        in: path
        name: token_id
        required: true
        type: string
      - description: Registry address in hex
        in: path
        name: registry_address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.NFTOwnerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the Owner of the given NFT.
      tags:
      - NFTs
  /v1/nfts/registries/{registry_address}/tokens/{token_id}/transfer:
    post:
      consumes:
      - application/json
      description: Transfers given NFT to provide address.
      operationId: transfer_nft
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: NFT registry address in hex
        in: path
        name: registry_address
        required: true
        type: string
      - description: NFT token ID in hex
        in: path
        name: token_id
        required: true
        type: string
      - description: Mint NFT request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/coreapi.TransferNFTRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.TransferNFTResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Transfers given NFT to provide address.
      tags:
      - NFTs
  /v1/relationships/{document_id}/entity:
    get:
      description: Returns the latest version of the Entity through relationship ID.
      operationId: get_entity_through_relationship_id
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Entity Relationship Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userapi.EntityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the latest version of the Entity through relationship ID.
      tags:
      - Entities
  /v2/documents:
    post:
      consumes:
      - application/json
      description: Creates a new document.
      operationId: create_document_v2
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Create request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v2.CreateDocumentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/coreapi.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Creates a new document.
      tags:
      - Documents
  /v2/documents/{doc_id}/clone:
    post:
      consumes:
      - application/json
      description: Creates a new cloned document from an existing Template document.
      operationId: clone_document_v2
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Clone request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v2.CloneDocumentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/coreapi.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Creates a new cloned document from an existing Template document.
      tags:
      - Documents
  /v2/documents/{document_id}:
    patch:
      consumes:
      - application/json
      description: Updates a pending document.
      operationId: update_document_v2
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v2.UpdateDocumentRequest'
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Updates a pending document.
      tags:
      - Documents
  /v2/documents/{document_id}/collaborators:
    delete:
      consumes:
      - application/json
      description: Removes the collaborators from the document.
      operationId: remove_collaborators
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Remove Collaborators request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v2.RemoveCollaboratorsRequest'
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Removes the collaborators from the document.
      tags:
      - Documents
  /v2/documents/{document_id}/commit:
    post:
      consumes:
      - application/json
      description: Commits a pending document.
      operationId: commit_document_v2
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/coreapi.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Commits a pending document.
      tags:
      - Documents
  /v2/documents/{document_id}/committed:
    get:
      description: Returns the latest committed document associated with docID.
      operationId: get_committed_document
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the latest committed document associated with docID.
      tags:
      - Documents
  /v2/documents/{document_id}/pending:
    get:
      description: Returns the pending document associated with docID.
      operationId: get_pending_document
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the pending document associated with docID.
      tags:
      - Documents
  /v2/documents/{document_id}/roles:
    post:
      description: Adds a new role to the document.
      operationId: add_role
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Add Role Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v2.AddRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Adds a new role to the document.
      tags:
      - Documents
  /v2/documents/{document_id}/roles/{role_id}:
    get:
      description: Returns the role associated with the role ID in the document.
      operationId: get_role
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the role associated with the role ID in the document.
      tags:
      - Documents
    patch:
      description: Updates an existing role on the document.
      operationId: update_role
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      - description: Update Role Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v2.UpdateRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Updates an existing role on the document.
      tags:
      - Documents
  /v2/documents/{document_id}/signed_attribute:
    post:
      consumes:
      - application/json
      description: Signs the given payload and add it the pending document.
      operationId: add_signed_attribute
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Signed Attribute request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/v2.SignedAttributeRequest'
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Signs the given payload and add it the pending document.
      tags:
      - Documents
  /v2/documents/{document_id}/transition_rules:
    post:
      description: Adds a new transition rules to the document.
      operationId: add_transition_rule
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Add Transition rules Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pending.AddTransitionRules'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.TransitionRules'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Adds a transition new rules to the document.
      tags:
      - Documents
  /v2/documents/{document_id}/transition_rules/{rule_id}:
    delete:
      description: Deletes the transition rule associated with ruleID from the document.
      operationId: delete_transition_rule
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Transition rule ID
        in: path
        name: rule_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Deletes the transition rule associated with ruleID from the document.
      tags:
      - Documents
    get:
      description: Returns the rule associated with the ruleID in the document.
      operationId: get_transition_rule
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Transition rule ID
        in: path
        name: rule_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.TransitionRule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the rule associated with the ruleID in the document.
      tags:
      - Documents
  /v2/documents/{document_id}/versions/{version_id}:
    get:
      description: Returns the specific version of the document.
      operationId: get_document_version_v2
      parameters:
      - description: Hex encoded centrifuge ID of the account for the intended API action
        in: header
        name: authorization
        required: true
        type: string
      - description: Document Identifier
        in: path
        name: document_id
        required: true
        type: string
      - description: Document Version Identifier
        in: path
        name: version_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coreapi.DocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Returns the specific version of the document.
      tags:
      - Documents
  /webhook:
    post:
      consumes:
      - application/json
      description: Webhook is a place holder to describe webhook response in swagger.
      operationId: webhook
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/notification.Message'
      summary: Webhook is a place holder to describe webhook response in swagger.
      tags:
      - Webhook
schemes:
- http
swagger: "2.0"
