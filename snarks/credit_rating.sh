#!/usr/bin/env sh
set -ex

# CREDIT RATING TREE GENERATOR
# This script creates a Merkle tree with 4 leaves that each represent a buyer with an identifier, a public
# key used and a credit score ranging from 0-100. It generates a json file with a proof for each buyer and
# the calculated root hash that can be used with the proof.

OUT=out/

PYCRYPTOBIN=${PYCRYPTOBIN:-"$HOME/zksnarks/zokrates-pycrypto/cli.py"}

PYCRYPTO="python3 $PYCRYPTOBIN"

SHA256SUM="shasum -a 256"

loadRatings() {
    local keys

    keys=$(jq -r "keys_unsorted[]" "$1")
    for KEY in $keys; do
        VALUE=$(jq -r ".$KEY" "$1")
        eval "export $KEY=$VALUE"
    done
}


# Below data is autogenerated and should be replaced with actual keys used in the NFT registry.
BUYER1=$(printf "%040d" 1)
BUYER1_KEY=$($PYCRYPTO keygen)
BUYER1_PUB=$(echo $BUYER1_KEY | cut -d' ' -f2)
BUYER1_PRIV=$(echo $BUYER1_KEY | cut -d' ' -f1)
BUYER1_RATING="64" # 100 in decimal

BUYER2=$(printf "%040d" 2)
BUYER2_KEY=$($PYCRYPTO keygen)
BUYER2_PUB=$(echo $BUYER2_KEY | cut -d' ' -f2)
BUYER2_PRIV=$(echo $BUYER2_KEY | cut -d' ' -f1)
BUYER2_RATING="0a" # 10 in decimal

BUYER3=$(printf "%040d" 3)
BUYER3_KEY=$($PYCRYPTO keygen)
BUYER3_PUB=$(echo $BUYER3_KEY | cut -d' ' -f2)
BUYER3_PRIV=$(echo $BUYER3_KEY | cut -d' ' -f1)
BUYER3_RATING="0a" # 10 in decimal

BUYER4=$(printf "%040d" 4)
BUYER4_KEY=$($PYCRYPTO keygen)
BUYER4_PUB=$(echo $BUYER4_KEY | cut -d' ' -f2)
BUYER4_PRIV=$(echo $BUYER4_KEY | cut -d' ' -f1)
BUYER4_RATING="60" # 96 in decimal

# Uncomment the line below to overwrite any of the above variables from a predefined json file. Requires `jq`
loadRatings "ratings.json"

BUYER1_VAL=$BUYER1$BUYER1_PUB$BUYER1_RATING
BUYER2_VAL=$BUYER2$BUYER2_PUB$BUYER2_RATING
BUYER3_VAL=$BUYER3$BUYER3_PUB$BUYER3_RATING
BUYER4_VAL=$BUYER4$BUYER4_PUB$BUYER4_RATING

BUYER1_HASH=$(echo -n "$BUYER1_VAL" | xxd -r -p | $SHA256SUM | cut -d' ' -f1)
BUYER2_HASH=$(echo -n "$BUYER2_VAL" | xxd -r -p | $SHA256SUM | cut -d' ' -f1)
BUYER3_HASH=$(echo -n "$BUYER3_VAL" | xxd -r -p | $SHA256SUM | cut -d' ' -f1)
BUYER4_HASH=$(echo -n "$BUYER4_VAL" | xxd -r -p | $SHA256SUM | cut -d' ' -f1)

BUYER_NODE1=$($PYCRYPTO hash $BUYER1_HASH$BUYER2_HASH)
BUYER_NODE2=$($PYCRYPTO hash $BUYER3_HASH$BUYER4_HASH)
BUYER_ROOT=$($PYCRYPTO hash $BUYER_NODE1$BUYER_NODE2)

mkdir -p $OUT

cat > "$OUT/credit_rating.json" << EOF
{
    "credit_rating_roothash": "$BUYER_ROOT",
    "buyers": {
      "$BUYER1": {
        "right": [true, true],
        "hashes": ["$BUYER2_HASH", "$BUYER_NODE2"],
        "value": "$BUYER1_VAL"
      },
      "$BUYER2": {
        "right":[false, true],
        "hashes": ["$BUYER1_HASH", "$BUYER_NODE2"],
        "value": "$BUYER2_VAL"
      },
      "$BUYER3": {
        "right":[true, false],
        "hashes": ["$BUYER4_HASH", "$BUYER_NODE1"],
        "value": "$BUYER3_VAL"
      },
      "$BUYER4": {
        "right":[false, false],
        "hashes": ["$BUYER3_HASH", "$BUYER_NODE1"],
        "value": "$BUYER4_VAL"
      }
    }
}
EOF
