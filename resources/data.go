// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x59\x73\x1b\x37\x90\x7e\xe7\xaf\xe8\x92\x5e\x92\xaa\x1d\x6a\xee\x83\x55\xa9\x2d\x5e\xb2\x1d\xcb\x0a\x75\x45\xb1\x5e\xd6\x18\xa0\x87\x84\x35\x04\xc6\x00\x86\x87\x7f\xfd\x16\x30\x43\x99\xb6\x2c\x67\x37\xa9\x64\x1f\xd6\x2f\x32\x7b\xd0\x8d\x3e\xbe\xfe\xd0\xc0\x29\xcc\xb0\x22\x6d\x6d\x80\xe1\x06\x6b\xd9\xac\x51\x18\x30\xa8\x8d\x40\x03\x64\x49\xb8\xd0\x06\x14\x17\x8f\x58\xee\x07\x14\x85\x51\xbc\x6a\x97\x78\x89\x66\x2b\xd5\xe3\x08\x54\xab\x35\x27\x62\xc5\xeb\x7a\xe0\x8c\x71\x81\x60\x56\x08\xac\xb7\x2b\xba\x95\x1a\xcc\x8a\x18\x98\x3e\x59\x80\x35\xe1\xc2\x58\xfb\x83\xc3\x92\xd1\x00\xe0\x14\x2e\x24\x25\xb5\x73\x81\x8b\x25\x50\x29\x8c\x22\xd4\x00\x61\x4c\xa1\xd6\xa8\x41\x20\x32\x30\x12\x4a\x04\x8d\x06\xb6\xdc\xac\x00\xc5\x06\x36\x44\x71\x52\xd6\xa8\x87\x03\x38\xe8\x5b\x93\x00\x9c\x8d\x20\x8a\x22\xf7\x7f\x34\x2b\x54\xd8\xae\xfb\x08\xde\xb0\x11\xe4\x51\xde\x7d\x2b\xa5\x34\xda\x28\xd2\x2c\x10\x95\xee\x74\x3d\x38\x39\xe3\x4d\x7c\x16\x84\xd9\xd0\x1f\xfa\xc3\xe0\xcc\xd0\xe6\x2c\xca\x43\x3f\x3c\xe3\x4d\xa5\xcf\xae\xd6\xb7\x57\xbb\x72\xfb\xd8\x3e\xbc\x7f\x3f\xab\xda\xcf\xb7\xe5\x6e\x3e\xbe\xc6\xdb\xcb\xe9\x85\xfc\xbc\xdf\x27\x49\xbe\xb9\x12\xcb\xdf\x37\x8b\x77\x1f\x2f\xde\x3f\x9e\xfc\x89\xd1\xe8\x60\xf4\xf7\x2a\x9d\x5f\xa6\xeb\xc7\x4f\xf7\xf8\xf1\xfe\xed\x7d\xf8\x69\xd1\x06\xe9\x1f\x0d\x7b\x15\x3d\xfe\x2a\x83\xdb\x68\xbd\x22\xab\xc5\x24\xb9\xc1\x44\x04\x9d\xd1\x43\xaa\xc6\x87\x4c\x75\x01\xd8\xf0\x51\x18\x6e\xf6\xe7\x84\x1a\xa9\xf6\x23\x38\x39\xe9\xbf\x10\x41\x57\x52\x5d\x63\x23\x35\xff\xe6\x13\x17\x1b\xc9\x29\xde\x89\x86\xd8\xf4\x9d\x9c\x0c\x5c\x75\xde\x11\x2e\xbe\x8b\x95\xbe\x88\xf0\xd3\x75\x07\x96\x9f\x07\x70\x0c\x8e\xce\x97\x53\xb8\x6c\xd7\xa8\x38\x85\x37\x33\x90\x95\x03\xca\x11\x24\x7a\x1b\x4f\x35\x4b\x82\x5e\x6b\x72\x28\x0c\xd4\x5c\x1b\xab\x29\x24\xc3\xe7\x98\x6a\x94\xdc\x70\xf7\x41\x3a\xdb\x47\x0e\x1c\x1c\xfd\xd3\x42\x47\xc9\x30\x0c\x93\x61\xe8\xfb\xc3\x38\xfc\xb6\xd8\x41\x38\x8b\xde\x4a\x79\x7f\xc1\x39\xbd\xfa\x7d\x7b\xbb\xba\x9d\xbc\x4f\x77\x6f\xe9\x42\x5e\x54\xe9\xf5\xd5\xfb\x5f\xcf\x9b\x6d\x15\xa8\x2c\xd9\x5e\xec\xc2\x87\xeb\xa8\x99\xb2\xe0\xe4\x7b\xe6\xf3\x74\x18\x06\xfe\x4b\xe6\xaf\x1e\xde\x8d\xf3\x57\x8b\xd7\x6a\x33\x7f\x98\x14\x5b\xf6\x28\xef\xe8\x78\xbc\x9e\x3e\xbc\x6e\x0a\xdc\xef\x1f\xe2\x9b\x79\xbe\x3c\x57\xd1\xea\xf6\xf2\x8f\x93\x3e\x47\xf3\x1e\xd8\x4f\x95\x78\x33\x03\x0f\xfa\x6a\xbc\x04\xfd\xb8\x57\xbe\x20\x36\x3d\xc0\xb0\xa9\xe5\x1e\x19\xdc\xac\x89\x32\x30\xed\x11\xa5\xa1\x92\xca\x25\x74\xc9\x37\x28\xbe\x4a\xe5\x73\xd4\xc1\x8b\xb0\xf3\x77\x05\x96\xb3\x59\x3e\xc9\xca\x10\x33\x3f\xa0\x45\x95\xb1\xc2\x3f\xcf\x03\x52\x64\x41\x9a\xa4\x21\x1d\x4f\x93\x24\x2e\xa3\x1f\x00\xd4\xdf\x45\x29\x46\x65\x5e\x16\x55\x55\xa5\xfe\x38\x40\x3f\x0a\x2a\xe6\x67\x69\x16\x84\x45\xce\xfc\x24\x8b\x13\x5a\x4d\x48\xf8\x12\x94\xfd\xdd\x3c\x48\xc3\x78\x3c\x8f\xb3\x34\xc5\x2a\x22\xe3\x38\xf2\xfd\x20\x0c\x67\xc9\x7c\x4c\x12\x12\xe3\x38\xab\xa6\x49\x91\xe5\x3d\xe8\xdf\xca\x0d\xe9\xa2\x3e\x82\x68\x89\x4a\x90\x7a\x85\x7c\xb9\x32\x3d\x84\x4e\x4f\x4f\xfb\x7c\x76\x1a\xe7\xe3\xab\xfe\xb7\x07\xf7\x96\xa6\xb8\xa8\x5a\x45\x60\x2f\x5b\x58\x5a\x7e\x15\x80\x4a\x49\x65\xc1\x71\xbb\xe2\x1a\x14\x7e\x6a\xed\x2e\x5c\x83\x90\x06\x74\xdb\x34\x52\x19\x64\x50\x22\x25\xad\x46\xab\xa9\x1c\xf6\xed\x12\xd5\x0a\x61\x39\xd2\x31\xa0\x36\xc4\xd8\x06\x68\xad\x68\x08\xd7\xad\xe8\xe4\x9e\xd7\xcb\x7e\x21\x8a\xae\xf8\x06\x87\x27\xff\xd1\x3b\x05\xb0\xb5\xfd\x63\x24\x30\xf9\x9f\x4e\x83\x40\xed\xd8\xb7\x21\x8a\x9b\x7d\xb7\x91\xb3\xf2\xe8\xe2\xc1\xe5\xa8\xfb\xf9\xa1\x5f\xe0\x79\x74\x45\xb8\xf8\xa5\xfb\xec\x79\xd6\xdb\x5f\x22\x3f\xf2\x63\xf0\xbc\x2d\x51\x4d\xff\xc7\x2b\x89\x52\x1c\x15\x24\x69\xee\xfb\xbe\x0f\x9e\x27\xa4\x47\x04\xe5\x28\x8c\x57\xd6\x92\x3e\xea\x4e\xa6\x51\x6d\xd0\xab\x6d\x52\xc1\xf3\xd6\x64\xe7\x35\xb6\x45\x21\x4c\xac\x92\x16\xa4\xd1\x2b\x69\x7a\xa1\x93\xad\xb9\xf8\xea\xa7\xf5\x99\x50\xc3\x37\x08\x9e\x67\xa1\x69\x53\x24\xab\xea\x79\x26\xc0\xf3\x58\xe9\x51\xb9\x6e\xec\x7a\x29\x40\x6b\x66\x43\x22\x74\x85\x9e\xe6\x9f\x11\x62\xbf\x48\xc1\xf3\x3e\x6a\x29\x54\x43\xbd\x95\xd4\x46\x03\xa9\xeb\x23\x19\x17\x06\x55\x45\x28\x5a\xf9\x87\xaf\xcb\xfd\x3c\x99\xdf\xab\xfc\xc4\x86\x8f\xcc\x76\x92\xc0\xce\x11\x23\xe1\x1e\xcb\x1b\x2b\x37\x1a\x5c\x4e\x14\x54\x4a\xae\xa1\x15\x46\xb5\xda\x42\x42\x2a\xbe\xe4\x62\x04\xc3\xe1\xc9\x8b\xf5\xb4\x2d\xfb\xac\x96\x1f\x3c\xaf\x15\x9a\x54\xe8\xe1\xae\x91\x1a\x3f\x40\x55\x93\xe5\x37\x00\xfe\xdf\xf1\x74\xf8\x37\x79\xfa\xab\x5e\xfa\x1f\x33\x75\xe0\xc7\xc3\x20\x89\x87\x41\x3e\x4c\x9e\x1d\xcb\x07\x2a\x5d\xe8\x94\x13\xbc\x6b\xcf\x1f\x2e\xdb\xe0\xd5\x6e\xa3\xf7\x93\xdb\x1b\x75\xab\x8b\x8d\x99\xa4\xa5\x79\x37\x16\xaf\xcf\xe5\xc5\xc7\xf2\xf1\xf3\x94\x9c\x7c\xc7\x7c\x32\x0c\xf2\x64\x18\x46\xd9\x8b\x1b\x4c\x5f\xd1\x2d\xbf\xfd\x28\xdf\xde\xbf\xae\x26\x24\xce\xc3\xbb\x85\x21\x78\xb7\xbb\xbc\xd8\xb2\xfc\x73\x29\x26\xc1\x4d\xb6\xc5\xf1\xc3\xdd\xee\xe1\xc7\x5c\xed\x48\xe3\x45\xa6\x0e\xff\x01\xaa\xfe\x01\x53\x47\x69\x5a\xc6\x41\x90\x86\x24\x89\x2a\x96\x25\xac\x48\x58\x14\xb0\x59\xca\x82\x69\xcc\xf2\xa8\x9c\xc5\x51\x3a\x99\xe0\x0f\x99\x3a\x4b\x26\x84\x4e\x8a\x70\x1c\xf9\x98\xcd\xab\x60\x16\xe5\x34\x24\x51\x30\x89\xcf\xc3\x22\x4a\x58\x54\x9c\xa7\x59\x4e\x7f\xc0\xd4\x79\x96\xfb\x18\x04\x71\xe4\x47\x69\x19\xd3\x22\x2b\xaa\x79\x98\x44\x41\x98\x93\x38\xf7\xb3\xd8\x2f\xa2\x2a\x28\xf2\xac\x67\xea\x6b\xd9\x68\x83\xcf\xb8\x9a\xc9\x65\x43\x0c\x5d\xfd\xb5\x29\x24\xfa\x9b\xe8\x3e\xec\x0e\x3f\xdd\xfe\x36\xfb\x0d\xa8\x42\x4b\xd5\xaa\x77\xd5\x22\xdc\xd9\xf9\xf9\x45\xc0\xff\xe3\xc3\xc9\xff\xdd\x78\xd2\x25\xe1\x25\xd0\x47\xff\x2e\xe6\x7d\x16\x15\xc1\x3c\x0b\xa3\x30\x99\x22\x9b\xc6\xc1\x3c\xce\xfd\x24\x9a\x67\x59\x98\xe7\x24\x2f\xce\xc3\x79\x14\x04\x41\xf2\x43\xcc\x87\xd3\xdc\x3f\x0f\x66\xa4\x9a\x91\x8c\x8c\x67\x58\x86\xd3\x20\x4b\x58\x3c\x89\xa3\x71\x9e\xe4\x71\x16\xcd\x83\x20\x0b\xa2\x97\x31\x9f\x96\x53\x3f\x48\x8b\x59\x9c\x54\x51\x85\xd9\x98\x55\xf1\x24\x09\x26\x71\x9c\xcc\xfc\x30\x9a\x07\x21\x46\x25\xfa\x2c\x3d\x1e\xc9\xed\x08\xfe\x0d\xe8\x71\x5d\x12\x45\x09\x43\x25\xed\x97\xbf\x84\xfd\xc0\xff\x7f\x08\x4a\x7b\x33\x3d\xe0\xe7\x3b\xa0\x0c\xfe\x5d\x50\x8e\xcf\xe3\x24\xa5\x41\x1a\xe5\x29\x49\xe3\x8a\xc5\xe7\x71\x99\x16\xa4\x0a\x22\x92\xa7\xb3\xca\x9f\x24\x69\x38\x26\xbe\xff\x43\x50\xa6\x51\x36\xc9\xa7\xd1\x2c\x1c\x8f\xa3\x29\x0d\xfd\x74\x56\xc4\x49\x50\x94\x49\x9c\x17\xa1\x9f\x17\xb4\x98\xa7\x59\x51\xf8\x2f\x83\x32\x0a\xd3\x3c\x4e\x93\x71\x3c\xf5\x83\xa9\x4f\xb2\x74\xca\x4a\x3f\x9a\xd1\x32\xce\xe2\xdc\x27\x53\x12\x63\xe8\xcf\x7c\x3c\x19\x0c\x4e\x61\x46\x0c\x81\x1b\x23\x15\x59\xe2\x40\x77\x7f\xbb\xdb\xfd\x82\x98\x95\xcb\x4c\x6d\xef\x90\xb3\x09\x54\xbc\xc6\x01\x40\x43\xcc\x6a\x04\x67\x66\xdd\x9c\x7d\x79\x65\xf8\x2f\x46\x0c\x19\xba\x95\xac\xb4\x76\xa7\x52\x54\x7c\xd9\x2a\xe2\xa6\xa4\xc3\x06\xd4\x49\x6f\xfe\xfa\x36\x9d\x81\x67\xbb\x8d\x29\x95\xad\x30\x1a\x1e\x71\x0f\x7d\x14\x03\xd2\x0b\xed\x3e\x8f\xb8\xb7\x62\xec\x2d\x1e\x3e\x59\xdd\x37\x4f\x63\xe1\xd6\x02\xc8\x01\x61\xbc\x78\x03\x44\x30\x58\x84\x0b\xb8\xe9\x66\x3a\x7b\x90\xa0\xb0\x27\xc5\xc0\x9e\x01\xaf\xa5\x36\x82\xac\x71\x04\x4f\x2f\x03\x83\x53\x58\x48\x65\x7a\x33\xd6\xc4\xf7\x55\xed\xa2\x11\xe4\x7e\x1e\xda\xed\x6d\x9f\x7a\x46\xba\xc1\x18\xe8\x71\xd6\xf4\xa0\x09\x9b\x2e\x49\x37\x0d\x52\x5e\xed\x61\xbe\x33\x6e\xfe\x82\x37\x8b\x23\x6f\xdd\xc0\x48\x89\x80\x12\x41\xa1\x9d\x89\x19\x10\x03\xbc\x82\x12\x57\x5c\x30\xb8\x1c\xdf\x5a\x33\xd8\x6b\xbf\x59\x8c\x60\x3b\xdc\x0d\xf7\xc3\xcf\x5d\x09\xac\xd7\xad\x46\xf6\xd4\x08\x36\xee\x9a\xec\x51\xd9\x42\x38\x77\x5d\x1b\xbb\xd5\xb7\x7c\x8d\xb2\x75\x61\x0a\x90\x0d\x8a\xfe\xf1\xa7\x9f\x88\xdd\x59\xea\xa6\xfc\x01\x1c\xc4\xbd\xca\x08\x4e\x22\x5f\x3b\xd8\x5d\xb5\xd8\xe2\x37\xe1\xba\xdd\x89\xde\x0b\xba\x52\x52\xc8\x56\xdb\xe3\x99\xa2\xd6\x5c\x2c\x07\x9f\xac\x42\x97\x8c\xee\xe9\x4a\x77\xa1\xb7\xeb\x12\x95\xa5\x47\xdb\xf3\xa8\xf4\x19\x95\x42\x5b\xde\xec\x0f\xfb\x2d\xaf\x6b\x9b\x17\x52\xdb\x11\xdf\x74\x99\xd1\x86\x28\xd3\x36\x03\xb0\xfa\xf7\x9d\xa2\x65\x50\xdf\xd9\x3f\x57\x88\x1a\xda\x06\xa6\x8b\x3b\xa0\x7b\x5a\xa3\xee\x82\xed\xb6\xb0\xf7\xb9\x2d\xe1\xee\xcd\xcb\x7a\x8c\x1b\xb4\x48\x82\xfe\xf3\x3d\xe1\x2e\xde\x77\x37\x1d\xff\x38\x1a\xef\x7d\x54\x68\x14\x47\x77\x2f\x91\xdb\x3e\xdd\x04\x0c\xd1\x96\xc6\xed\x9f\xeb\x6e\x81\x63\xf3\xc1\x11\xe9\x69\x57\x7f\x4e\xbf\xce\xd8\xe0\x40\x79\x3d\x48\xb0\x46\xcb\x66\xdb\x15\xa7\xab\x27\x3a\x84\x1e\xeb\xb6\x2c\xf6\x5e\xda\x9f\x24\xd2\x66\xb0\x1f\x7f\x18\xf0\xee\x02\x42\x5b\x6d\xe4\xba\xdf\xe4\xd0\x88\xfd\xf3\x60\xdf\x62\x97\x0e\xf3\x27\x96\x78\x4f\x9e\x1e\x01\x5d\x8f\xf7\x86\x9f\xf6\xa5\xb5\xbd\x32\x76\xe0\xfc\x69\x8b\xee\xc6\xcc\x15\xc2\x56\x83\x54\xc0\x1b\xda\xbf\x0c\x92\xb2\x46\xfb\x5f\xea\x06\xaf\x2e\x9b\x76\xc0\xb2\x8a\x77\xd7\x17\x23\x58\x19\xd3\x8c\xce\xce\xdc\x15\xcd\xde\xeb\x46\x45\x12\x27\x6e\xef\x35\xd9\xf1\xb5\x0d\xb1\xcf\xe7\x92\xd8\x98\x38\x75\xf6\x1a\xb2\x3f\x24\x58\x11\xa1\xfb\x8b\x23\x17\xb0\x45\xee\xb4\x43\x1f\x5e\x6d\x91\x83\x90\xdb\x01\x58\x5b\xaf\x88\x5e\x58\xed\x11\x84\xfe\xd3\x3f\xb7\xf4\x15\xd1\x50\xf3\x35\xef\xcf\x0a\xc6\xab\x0a\x95\x8d\xee\xa9\x42\xb2\xc1\x43\xd7\x82\xf5\xe3\xc2\xad\x3e\x3c\x6a\x4e\xdd\x20\xe9\x20\xd6\xdb\xb4\xd2\x31\x63\x6f\x71\x3f\x82\xe8\x58\x78\x8d\x1b\xf9\x88\x4e\x9e\x24\x07\x71\x77\x52\x4c\xe5\x7a\xcd\x2d\x75\x7c\x23\x5f\x28\x3c\x7c\x0a\xbe\x98\x12\x95\x79\xc7\x85\x19\x41\xf1\x25\x8e\x43\xef\x1a\xe9\x20\xdc\xe5\x47\x7c\xa9\xd9\x71\xa6\xfa\xea\x30\xd6\xbd\xe1\x12\x70\x97\x7f\x47\x8b\x5d\x91\xc0\x28\xbe\x5c\xa2\x42\xd6\x75\xba\xc1\x9d\x39\xa0\xbf\xeb\xf6\xd4\xb7\xed\xfe\xd2\xc6\x0a\x09\x03\x29\xea\xfd\x51\xf2\x9e\x1e\xb2\x0f\x2e\x7d\x31\x7d\x8d\x84\x7d\x6d\x3e\x48\x7a\xeb\x97\x16\x63\xc7\xbe\x37\x52\xd6\xb6\xa2\x4f\x1d\x67\x24\x68\x14\xec\x1b\x30\xc8\x8d\x63\xb8\x35\xd9\x3d\x35\x5e\xd8\x67\xea\xfb\x26\xdd\x13\xc2\x86\xd4\xce\xee\xbe\x63\x05\x62\x1d\xa4\xad\x72\x78\x38\xd6\x58\x11\x0d\x25\xa2\x00\x86\x06\xa9\x71\x69\x3a\x18\xb0\xfb\xd9\xf3\x3e\xec\x23\x98\x71\xed\xfa\xc0\x59\xd4\x72\xfd\xac\x8f\x34\x30\x79\xfc\xd2\x04\x66\xe7\x3c\x22\x8d\x05\xb3\xd9\x2d\xa4\xac\xc7\xd4\xb2\xe5\x5c\x58\x4b\x6c\x04\x46\xb5\x68\x59\x84\x88\x3d\x30\x2c\xdb\xe5\xb2\x67\x6a\xdb\xdc\x8e\x17\x97\x12\xec\x26\x03\xf7\xb5\x23\x91\xa6\x51\xb2\xea\x40\x7e\x50\xb1\x67\x80\x95\x8e\xa0\x22\xb5\xc6\xc1\xa0\x43\x5d\xff\x66\xdf\x28\xa4\x3d\xf8\xdc\x86\xff\x1d\x00\x00\xff\xff\xe8\xe9\xfe\xe2\xa8\x18\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6312, mode: os.FileMode(420), modTime: time.Unix(1554722310, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1552945185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
