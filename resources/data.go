// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\x59\x73\xdb\x3a\xb2\xc7\xdf\xf5\x29\xfa\x2a\x2f\xc9\xad\x13\x99\x00\x77\x55\xdd\x07\x6a\x73\x12\xc7\x8e\x6c\x79\x39\xf1\xcb\x2d\x90\x6c\x4a\x88\x49\x82\x01\xa0\xcd\x9f\x7e\x0a\x20\xa5\x38\x8b\x73\xa6\x72\xe6\x9c\xaa\xa9\x99\xbc\x58\x85\xe5\x8f\x46\xf7\xaf\x1b\x20\xf2\x02\x26\x58\xb0\x75\xa9\x21\xc7\x0d\x96\xa2\xa9\xb0\xd6\xa0\x51\xe9\x1a\x35\xb0\x25\xe3\xb5\xd2\x20\x79\xfd\x80\xe9\xbe\x97\x61\xad\x25\x2f\xd6\x4b\xbc\x40\xbd\x15\xf2\x61\x08\x72\xad\x14\x67\xf5\x8a\x97\x65\xcf\x8a\xf1\x1a\x41\xaf\x10\xf2\x4e\xb7\x6e\x47\x2a\xd0\x2b\xa6\x61\x7c\x54\x80\x8a\xf1\x5a\x1b\xfd\xde\x61\xc8\xb0\x07\xf0\x02\xde\x8b\x8c\x95\xd6\x04\x5e\x2f\x21\x13\xb5\x96\x2c\xd3\xc0\xf2\x5c\xa2\x52\xa8\xa0\x46\xcc\x41\x0b\x48\x11\x14\x6a\xd8\x72\xbd\x02\xac\x37\xb0\x61\x92\xb3\xb4\x44\x35\xe8\xc1\x61\xbe\x91\x04\xe0\xf9\x10\x5c\xd7\xb5\xbf\x51\xaf\x50\xe2\xba\xea\x76\xf0\x36\x1f\x42\xe4\x46\x6d\x5f\x2a\x84\x56\x5a\xb2\x66\x8e\x28\x55\x3b\xf7\x35\xf4\x4f\x78\xe3\x9d\x10\x1a\x0e\x9c\x81\x33\x20\x27\x3a\x6b\x4e\xdc\x88\x3a\xf4\x84\x37\x85\x3a\xb9\xac\xae\x2f\x77\xe9\xf6\x61\x7d\xff\xf1\xe3\xa4\x58\x3f\x5e\xa7\xbb\x69\x72\x85\xd7\x17\xe3\xf7\xe2\x71\xbf\xf7\xfd\x68\x73\x59\x2f\x6f\x37\xf3\xf3\x4f\xef\x3f\x3e\xf4\xff\x40\xd4\x3d\x88\xde\x16\xc1\xf4\x22\xa8\x1e\x3e\xdf\xe1\xa7\xbb\xb3\x3b\xfa\x79\xbe\x26\xc1\xef\x4d\x7e\xea\x3e\xbc\x13\xe4\xda\xad\x56\x6c\x35\x1f\xf9\x0b\xf4\x6b\xd2\x8a\x1e\x5c\x95\x1c\x3c\xd5\x6e\xc0\x6c\x1f\x6b\xcd\xf5\x7e\xc6\x32\x2d\xe4\x7e\x08\xfd\x7e\xd7\xc3\xea\x6c\x25\xe4\x15\x36\x42\xf1\x6f\xba\x78\xbd\x11\x3c\xc3\x9b\xba\x61\xc6\x7d\xfd\x7e\xcf\x46\xe7\x9c\xf1\xfa\x87\xac\x74\x41\x84\x97\x57\x2d\x2c\xaf\x7a\xf0\x14\x8e\xd6\x96\x17\x70\xb1\xae\x50\xf2\x0c\xde\x4e\x40\x14\x16\x94\x27\x48\x74\x1a\xc7\x98\xf9\xa4\x9b\x35\x3a\x04\x06\x4a\xae\xb4\x99\x59\x8b\x1c\xbf\x67\xaa\x91\x62\xc3\x6d\x87\xb0\xda\x4f\x0c\x38\x18\xfa\x87\x81\x76\xfd\x01\xa5\xfe\x80\x3a\xce\xc0\xa3\xdf\x06\x9b\xd0\x89\x7b\x26\xc4\xdd\x85\xba\x57\x77\xe1\x75\x9a\xdd\xfb\xd1\x45\x48\x6e\x2e\x17\x67\xfe\xe4\xd3\xfd\xe7\x6a\xf6\xf0\x66\xfe\x66\xbb\x9b\x9d\x5d\x27\x7b\x71\x73\x33\x89\xf2\xa2\xff\x23\xf9\x28\x18\x50\xe2\x3c\x27\x3f\x41\xaa\xb6\x77\x53\xb7\xa0\xfc\x5d\x7a\x83\x97\xf1\xe9\xcd\xcd\xe5\xe8\xcd\x58\xde\xbd\x4f\x47\x19\x8b\xcf\x4f\xcf\x3f\x17\x55\x3a\x5e\xca\x75\xda\xef\x7c\x34\xed\xc0\x3e\x46\xe2\xed\x04\x5e\x43\x17\x8d\xe7\xd0\xf7\xba\xc9\xef\x99\x71\x0f\xe4\xd8\x94\x62\x8f\x39\x2c\x2a\x26\x35\x8c\x3b\xa2\x14\x14\x42\x5a\x87\x2e\xf9\x06\xeb\xaf\x5c\xf9\x3d\x75\xf0\x2c\x76\xce\xae\x88\x22\x27\x8d\x02\x87\x38\x6e\x9a\x7b\x3e\xf3\xa9\xeb\x87\x5e\x82\x38\x76\xc2\xb1\x17\x53\xc7\x25\x85\x17\x46\xe4\x27\x80\x3a\xbb\x98\x26\x13\xcf\x1b\x8d\xa2\x19\x75\x27\x7e\x4e\x68\x8c\xa3\x88\x32\xdf\xc9\xdd\x28\x88\xd2\x91\x97\x92\x0c\x67\x64\xf6\x1c\xca\xce\xae\xf0\x53\x1a\xc7\x39\x09\x27\x41\xea\x23\xc9\xc7\x8e\x1b\x04\xc4\xf5\xb2\xdc\x8f\x46\xf1\xc8\x9b\x26\x24\x76\x48\xe4\x75\xd0\x9f\x89\x0d\x6b\x77\xfd\x04\xd1\x14\x65\xcd\xca\x15\xf2\xe5\x4a\xab\x5f\xc3\x9b\xfe\x49\xbc\xbf\x32\xe1\x9f\x06\x9c\x38\xde\x80\xf8\xde\x80\x44\x03\xff\xbb\x6a\x76\x20\x70\x91\xee\xd2\xb3\x71\x7a\xbf\x8a\xdf\xdd\x6a\x75\xb9\xbf\x3d\xcd\xaf\xe7\x92\x79\x57\xcd\x22\xf1\x74\xba\x51\x01\xab\x09\xf9\xb4\x3d\x4d\xe8\x63\xff\x07\xf2\xfe\x80\x44\xfe\x80\xba\xe1\x73\x0b\x5c\x56\x34\x5b\x54\x72\xca\xd9\xe2\xfc\xd6\x5b\xde\x6c\xc2\xbb\xd3\x55\xb3\xbc\xda\x8a\x68\x2b\x66\x0b\xf5\x66\x75\x7f\x9a\x9e\x72\x97\x25\xd1\xee\xe7\x88\xdb\xe8\x3c\x0b\x38\xfd\x0b\x08\xff\x09\xe0\xc4\x0d\xe8\x34\x1b\x15\x51\x10\xc6\xd4\x73\xa7\xd4\x2b\x12\x67\x3a\xf6\xa8\x9f\x53\x24\x4e\xe2\x44\x94\xba\x59\x38\xf9\x29\xe0\x21\x89\x9c\x49\x18\xba\xc4\xc9\x31\x8b\x92\x11\x8d\x12\x16\x39\x74\x9a\x39\xf1\xac\x48\xe8\x64\x16\x78\x18\x3b\x61\xf6\x3c\xe0\x24\x72\x49\xe8\x78\x11\x09\xbc\xa8\xc0\xa2\x40\x2f\xf6\x9c\x99\x3b\x49\x92\xdc\x65\x61\x9a\xa5\xa9\x93\xf9\x49\x32\xeb\x00\xbf\x12\x8d\xd2\xf8\x1d\xe2\xb9\x58\x36\x4c\x67\xab\x5f\xa3\xdb\xfd\x93\x74\x1f\x56\x87\x97\xd7\x1f\x26\x1f\x20\x93\xc8\x34\x82\xec\x4c\x35\x84\x5b\x9d\x57\xff\x69\x15\xbd\x75\xc0\x73\xc0\xbb\x7f\x2f\xef\x4e\xee\xc6\x64\x1a\x52\x97\xfa\x63\xcc\xc7\x1e\x99\x7a\x91\xe3\xbb\xd3\x30\xa4\x51\xc4\xa2\x78\x46\xa7\x2e\x21\xc4\xff\x29\xef\x74\x1c\x39\x33\x32\x61\xc5\x84\x85\x2c\x99\x60\x4a\xc7\x24\xf4\x73\x6f\xe4\xb9\x49\xe4\x47\x5e\xe8\x4e\x09\x09\x89\xfb\x3c\xef\x5e\x9c\x62\xec\x3a\xce\xd8\x0d\xc6\x85\x4f\xdd\x28\x9d\x05\xf1\xd4\x1b\x7b\xb1\x1f\x38\xb3\x59\x54\x84\xb3\x20\xa4\x53\xef\xc9\x2d\xc6\x5c\x5a\x9e\xf2\x0e\x93\x0f\x70\xf1\xe1\x1a\x6e\x16\xd3\xff\xe9\x01\x60\x95\x32\x99\xb1\x1c\xa5\x30\xa3\x7e\x29\x05\x88\xf3\x2c\x9b\x5f\xe1\x43\xe2\x68\x40\x28\x1d\x10\xf2\x6c\xb9\x4c\x96\xee\x34\x4b\xb4\xfc\x78\x3b\xde\x6d\x1f\x83\x87\x40\x5d\xc7\xfc\x7e\x71\xf5\xa8\x1f\xe3\x49\xb8\xbf\x79\x6c\x46\xf3\xab\xe9\xec\x51\xde\x88\xdb\xfe\xf7\x2b\x50\x8f\x0e\x28\x25\x03\x42\x9e\xad\xf8\x67\xa7\x5b\xbe\xfb\x1d\xeb\xf5\xef\xc9\xed\xe7\x87\x77\x67\x55\xfd\x66\x91\xbc\x9b\x7c\x7a\x2c\x42\x3c\x3d\x17\x81\x96\x82\x2f\xef\x77\x55\x98\xf8\x57\x3f\x27\xb4\x6a\xbd\xfb\x1c\xa1\xe4\xef\x25\x34\x99\x79\x7e\x90\x91\xc0\x8d\x02\x16\x78\x45\xee\xcd\xbc\x34\x88\x59\x41\x5c\x16\x05\x93\xc2\x19\xf9\x01\x4d\x98\xe3\xfc\x94\xd0\xc0\x0d\x47\xd1\xd8\x9d\xd0\x24\x71\xc7\x19\x75\x82\x49\xec\xf9\x24\x4e\x7d\x2f\x8a\xa9\x13\xc5\x59\x3c\x0d\xc2\x38\x76\x9e\x27\x74\xe4\xa3\x47\xdd\x7c\x9c\x85\x9e\x93\x8e\xc6\x91\x53\xc4\x4e\x40\x5c\x17\x89\x1f\x38\xa4\x88\x23\x27\x8e\x23\xd7\x0f\xbe\x21\xf4\x0b\x52\x4f\x80\xfc\x57\xc3\xf8\x57\xa3\xf8\x5f\x10\xff\x3d\x41\x7c\x01\x13\xa6\x19\x2c\xb4\x90\x6c\x89\x3d\xd5\xfe\x6d\x3f\xd3\xe7\x4c\xaf\xac\x67\x4a\xf3\x31\x38\x19\x41\xc1\x4b\xec\x01\x34\x4c\xaf\x86\x70\xa2\xab\xe6\xe4\xcb\x73\xc1\xff\xe7\x4c\xb3\x81\x1d\x99\xa7\x46\x77\x2c\xea\x82\x2f\xd7\x92\x69\x2e\xea\xe3\x02\x99\x6d\x5d\xfc\xfa\x32\xad\xc0\x77\xab\x25\x59\x26\xd6\xb5\x56\xf0\x80\x7b\xe8\x76\xd1\x63\x5d\xa3\x59\xe7\x01\xf7\xa6\x19\x3b\xc5\x43\x97\x99\xfb\xb6\xd6\x28\x0b\x96\x21\x6c\x0d\x40\x16\x84\x64\xfe\x16\x58\x9d\xc3\x9c\xce\x61\x81\x72\x83\xd2\x5e\x6d\xb0\x36\x77\x97\x9e\xb9\x95\xbc\x11\x4a\xd7\xac\xc2\x21\x1c\x3f\xf1\x7b\x2f\x60\x2e\xa4\xee\x64\x8c\xc4\x8f\xa7\x9a\x41\x43\x88\x9c\x88\x9a\xe5\x4d\x96\xbe\xd6\xe2\x75\x83\x28\x21\x7b\xea\x35\xd5\x6b\x68\xd3\x3a\x69\xd1\x60\xc6\x8b\x3d\x4c\x77\xda\x7e\x11\xc0\xdb\xf9\x13\x6b\x8d\x28\x64\xac\x86\x14\x41\x22\xcb\x56\x98\x03\xd3\xc0\x0b\x48\x71\xc5\xeb\x1c\x2e\x92\x6b\x23\x83\xdd\xec\xb7\xf3\x21\x6c\x07\xbb\xc1\x7e\xf0\xd8\x86\xc0\x58\xbd\x56\x98\x1f\x13\xc1\xec\xbb\x64\x7b\x94\x26\x10\xd6\x5c\x9b\xc6\x76\xf4\x35\xaf\x50\xac\xed\x36\x6b\x10\x0d\xd6\xdd\x2b\x4e\x8d\x99\xb5\xda\xdc\xee\xcc\x66\x54\x0f\x0e\xcd\xdd\x94\x21\xf4\x5d\x47\xf5\xad\x4a\xc5\x6b\x5e\xad\x2b\xc8\xb1\x64\x7b\xbb\x2e\x6e\x50\xee\xa1\xa1\x0d\x48\x54\x8d\xa8\x15\x1a\x25\xb6\x11\x3c\x07\xcd\x2b\xb3\x0a\xd3\x9a\x65\x0f\xca\x0a\xb0\xfc\xd3\x5a\x69\x48\x99\xb1\x5b\xd4\xb0\x12\x4a\x9b\x99\x62\x2d\x33\x54\xf0\x72\xb1\x98\xfc\x06\xe3\xf9\xcd\x6f\x90\x09\x89\x0a\x06\x83\xc1\xab\xee\xf9\x49\x3c\x00\xaf\xa1\x14\x4b\x9b\xf9\x43\xe8\x1b\xfb\x8c\xad\x6a\x5d\x61\x0e\xe9\xde\x6c\xab\x8d\x41\xdf\x78\x71\xf7\x7f\x2f\x37\xac\x5c\xe3\x15\xb2\x1c\xfe\x17\xe8\x2b\xe0\x0a\x4a\x54\xf6\x86\x5b\x83\xed\x83\x14\x4b\xb1\xfd\xcd\x78\xaf\x86\x6c\xc5\xea\x25\x1e\xf7\x31\xb1\x7b\xd4\x02\x76\x3d\xf8\xba\x71\x08\x7d\xdf\x71\x2a\x65\x53\xf1\x72\x8d\x6b\xfc\x06\x01\xeb\x19\xa6\xf6\x75\xb6\x92\xa2\x16\x6b\x65\x2e\xd1\x19\x2a\xc5\xeb\x65\xef\xb3\x99\xd0\x02\xd2\xbe\xcb\xa9\x16\x87\x75\x95\xa2\x34\x07\x86\xa9\x83\x28\xd5\x49\xb7\x35\xd9\x5d\xc9\xb7\xbc\x2c\x0d\x2b\xac\x2c\x45\xc6\x74\x4b\x8b\xd2\x4c\xea\x75\xd3\x03\x33\xff\xae\x9d\x68\xce\x14\xc7\xea\xcf\x24\xa2\x82\x75\x63\x3c\x0a\xd9\x3e\x2b\x51\xb5\x00\xb4\x4b\x18\x87\x6c\x19\xb7\x0f\x7a\x5d\x2c\x4d\x76\x41\xd7\x7d\xc7\xb8\x65\xe0\x7c\xd1\xd6\x64\x7b\xb0\x75\x36\x4a\xd4\x92\xa3\xb2\xc6\x6c\x3b\x04\x19\x68\xa6\xcc\xc1\x66\xfe\x5c\xb5\x03\xec\xf9\xd6\x7b\x72\x10\x28\x9b\x13\x3c\xfb\xda\x63\xbd\xc3\x31\xd0\x25\x0e\x96\x68\x2a\xfc\x76\xc5\xb3\xd5\xf1\x88\x80\x2e\xff\x4d\x4c\xd6\x0a\x0f\x67\xab\x30\x1e\xec\x3e\x52\x72\x83\x88\x69\xcc\xd6\x4a\x8b\xaa\x5b\xe4\x50\x9c\xba\xb7\xcf\xae\xec\x5c\xd8\x3a\xd0\x37\x87\x51\xff\xf8\xc2\x69\xeb\x5e\x27\x7c\x5c\x37\x2b\x39\xd6\xba\x4d\xd8\x97\x5b\x43\xc8\xe7\x35\x97\x08\x5b\x05\x42\x02\x6f\xb2\xee\xd9\x93\xa5\xa5\xa5\x3f\xb3\x9f\x47\xad\x37\x0d\xbd\x66\xe2\xcd\xd5\xfb\x21\xac\xb4\x6e\x86\x27\x27\x26\x7e\xa5\x21\x7f\x18\xfb\x9e\xdf\x26\x16\xdb\xd9\xc4\x3a\xf8\x73\xc9\xcc\x9e\x78\x66\xf5\x9a\x2e\xd7\x18\x68\xc9\x6a\xc5\x6c\xc6\x9a\x9d\x6e\x91\xdb\xd9\xd4\x81\xd3\x2d\x72\xa8\xc5\xb6\x07\x46\xeb\x94\xa9\xb9\x99\x3d\x04\xea\x1c\xff\xd9\xa1\xa7\x4c\x41\xc9\x2b\xde\x9d\x9f\x39\x2f\x0a\x94\x66\x77\xc7\x08\x1d\xb3\xc8\x90\xb0\x64\xea\xbd\x1d\x7d\x78\xb1\x1d\xdb\xcf\x3d\x8b\x58\xa7\x69\x5a\x93\x3c\x3f\xc3\xfd\x10\xdc\xa7\x8d\x57\xb8\x11\x0f\x68\xdb\x7d\xff\xd0\xdc\x9e\x9e\x63\x51\x55\xdc\x94\xd3\x6f\xda\xe7\x12\x0f\x5d\xe4\x8b\x54\x5d\xe8\x73\x5e\xeb\xe3\x66\xbe\x2a\x68\x5a\x58\x86\x5b\x07\xd5\x5f\x82\xf6\xd4\x55\x5d\x78\xf2\xbc\x7d\xa1\x66\x90\x96\x22\x7b\xb0\x67\x45\x1b\x25\xd0\x92\x2f\x97\x28\x31\x6f\xcb\x9f\xc6\x9d\x3e\xe0\xdf\x96\xc0\xc0\x39\xd4\xc0\x1f\x2d\x2c\x4d\x8d\x11\x75\xf9\xa4\x06\xa9\xe3\x33\xfd\xc1\xa4\x2f\xd2\xa6\x24\x7d\x2d\x4f\xfc\x4e\xfd\xc2\x40\xf6\xd4\xf6\x46\x88\xd2\x84\xf4\x98\x72\x5a\x80\xc2\x3a\xff\x86\x06\xb1\xb1\x65\xbf\x62\xbb\x63\xe6\xd1\xce\x53\x3f\x96\xe4\xe6\x00\xdd\xb0\xd2\xea\xee\xdb\xb2\xc0\x8c\x81\xd9\x5a\x5a\x20\x9e\xce\x58\x31\x05\x29\x62\x0d\x39\x6a\xcc\xb4\x75\xd3\x41\xc0\xac\x67\x4a\x22\x6d\xeb\x21\xab\xf7\x90\x63\xba\x5e\x2e\xbb\x13\xc6\x24\xa0\xad\x5d\x4b\x01\xc6\x11\x3d\xdb\xdb\x26\x3a\xd6\x36\x67\x6c\x8b\x29\xed\x66\x4e\x0f\xcc\xaf\x21\x14\xac\x54\x68\x47\x35\x8d\x14\x45\x8b\xeb\x41\xd8\x9c\x70\xa6\xf5\x30\xac\xd7\xf2\xd3\xfd\xd7\x42\x23\x31\xeb\x30\xea\xdb\xfe\x7e\xef\x1f\x01\x00\x00\xff\xff\x23\xe9\x88\xbc\x52\x19\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6482, mode: os.FileMode(420), modTime: time.Unix(1561216111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1554467633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

