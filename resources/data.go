// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x59\x73\xdb\xba\x15\x7e\xd7\xaf\x38\x23\xbf\xb4\x33\xa5\xcc\x7d\xd1\xcc\x9d\x8e\xbc\x25\xb9\x71\x5c\xd9\x96\xe3\x1b\xbf\x34\x20\x70\x28\x22\xa6\x00\x06\x00\xb5\xe4\xd7\x77\x00\x52\x8e\x1d\x2f\xb7\xcb\x34\x2f\xa6\x00\x9c\xfd\x3b\x1f\x0e\x72\x00\x27\x58\x91\xae\x31\xc0\x70\x8d\x8d\x6c\x57\x28\x0c\x18\xd4\x46\xa0\x01\xb2\x24\x5c\x68\x03\x8a\x8b\x7b\x2c\x77\x23\x8a\xc2\x28\x5e\x75\x4b\xbc\x40\xb3\x91\xea\x7e\x0a\xaa\xd3\x9a\x13\x51\xf3\xa6\x19\x39\x65\x5c\x20\x98\x1a\x81\x0d\x7a\x45\x7f\x52\x83\xa9\x89\x81\xe3\x07\x0d\xb0\x22\x5c\x18\xab\x7f\xb4\x3f\x32\x1d\x01\x1c\xc0\xb9\xa4\xa4\x71\x2e\x70\xb1\x04\x2a\x85\x51\x84\x1a\x20\x8c\x29\xd4\x1a\x35\x08\x44\x06\x46\x42\x89\xa0\xd1\xc0\x86\x9b\x1a\x50\xac\x61\x4d\x14\x27\x65\x83\x7a\x32\x82\xbd\xbc\x55\x09\xc0\xd9\x14\xa2\x28\x72\xdf\x68\x6a\x54\xd8\xad\x86\x08\x3e\xb0\x29\xe4\x51\xde\xef\x95\x52\x1a\x6d\x14\x69\xe7\x88\x4a\xf7\xb2\x1e\x8c\x0f\x79\x1b\x1f\x06\x61\x36\xf1\x27\xfe\x24\x38\x34\xb4\x3d\x8c\xf2\xd0\x0f\x0f\x79\x5b\xe9\xc3\xcb\xd5\xe2\x72\x5b\x6e\xee\xbb\xbb\x2f\x5f\x4e\xaa\xee\xc7\xa2\xdc\x9e\xce\xae\x70\x71\x71\x7c\x2e\x7f\xec\x76\x49\x92\xaf\x2f\xc5\xf2\xf3\x7a\xfe\xe9\xdb\xf9\x97\xfb\xf1\x9f\x28\x8d\xf6\x4a\x3f\x57\xe9\xe9\x45\xba\xba\xff\x7e\x8b\xdf\x6e\x3f\xde\x86\xdf\xe7\x5d\x90\xfe\xd1\xb2\x77\xd1\xfd\xef\x32\x58\x44\xab\x9a\xd4\xf3\xa3\xe4\x1a\x13\x11\xf4\x4a\xf7\xa9\x9a\xed\x33\xd5\x07\x60\xc3\x47\x61\xb8\xd9\x9d\x11\x6a\xa4\xda\x4d\x61\x3c\xfe\x65\xe7\x0a\x97\x5c\x9b\x27\x5b\x44\xd0\x5a\xaa\x2b\x6c\xa5\xe6\xbf\x48\xb5\x64\x67\x61\xf2\x8f\xb2\xe1\x4b\x62\xb8\x14\x6e\xcf\x15\xef\x13\xe1\xe2\x45\x28\x0d\x35\x1e\xc1\x63\xc4\xf4\x0e\x1e\xc0\x45\xb7\x42\xc5\x29\x7c\x38\x01\x59\x39\xf4\x3c\xc2\xc9\x4f\xc9\xbe\x90\x49\x30\x48\x1d\xed\xab\x05\x0d\xd7\xc6\x4a\x0a\xc9\xf0\x39\xd0\x5a\x25\xd7\xdc\x6d\x48\xa7\xfb\x91\x03\x7b\xf7\xfe\xb4\xfa\x51\x32\x09\xc3\x64\x12\xfa\xfe\x24\x0e\x7f\x45\x40\x10\x9e\x44\x1f\xa5\xbc\x3d\xe7\x9c\x5e\x7e\xde\x2c\xea\xc5\xd1\x97\x74\xfb\x91\xce\xe5\x79\x95\x5e\x5d\x7e\xf9\xfd\xac\xdd\x54\x81\xca\x92\xcd\xf9\x36\xbc\xbb\x8a\xda\x63\x16\x8c\x5f\x52\x9f\xa7\x93\x30\xf0\x5f\x53\x7f\x79\xf7\x69\x96\xbf\x9b\xbf\x57\xeb\xd3\xbb\xa3\x62\xc3\xee\xe5\x0d\x9d\xcd\x56\xc7\x77\xef\xdb\x02\x77\xbb\xbb\xf8\xfa\x34\x5f\x9e\xa9\xa8\x5e\x5c\xfc\x31\x1e\x72\x74\x3a\xa0\x7d\x9f\x45\x9b\x62\x0f\xae\x86\x7e\x7e\xa5\x1f\xe2\x41\xf8\x9c\xd8\xf4\x00\xc3\xb6\x91\x3b\x64\x70\xbd\x22\xca\xc0\xf1\x00\x33\x0d\x95\x54\x2e\xa1\x4b\xbe\x46\xf1\x24\x95\xcf\xa1\x08\xaf\x62\xd1\xdf\x16\x3e\x0b\x8b\x38\xc9\x02\xcc\xa2\x3c\x0e\xd3\x22\x23\x69\x5a\x66\xa4\x28\x88\x5f\x30\x96\xd2\x2c\x62\x51\x92\xb2\x37\x50\xeb\x6f\x8b\x34\xf5\xa9\x1f\x15\x2c\x0a\x82\x38\x89\x48\xe5\xb3\x24\xa7\x49\x9a\xa6\x59\x18\xb1\x82\x86\x15\xc9\x58\x8a\xf4\x0d\x7c\xfb\xdb\xac\xca\x93\x98\x55\xa4\xc8\xfd\x20\x64\x59\x45\x92\x84\xe6\x7e\x54\x96\x24\x0c\x53\xbf\xa4\x0c\x31\x2e\x13\x64\x6f\x75\x82\xbf\x65\xa5\x9f\xe4\xc1\xac\x88\xc2\x3c\x4d\xe3\x3c\x49\xa2\x30\x9f\xb1\x93\xd2\x3f\x0d\x93\x20\xc8\xe3\x34\xf6\xab\x02\x93\x13\xd7\x33\x25\x2a\x41\x9a\x1a\xf9\xb2\x36\x03\xe8\x0e\x0e\x0e\x86\x0a\x7c\x94\x6b\x22\xe0\x6c\x76\x39\xfc\xf6\xe0\xd6\xb2\x1d\x17\x55\xa7\x08\xec\x64\x07\x4b\x4b\xd3\x02\x50\x29\xa9\x2c\x9c\x16\x35\xd7\xa0\xf0\x7b\x67\x2b\xc7\x35\x08\x69\x40\x77\x6d\x2b\x95\x41\x06\x25\x52\xd2\x69\xb4\x92\xca\x75\x8b\x3d\xa2\x3a\x21\x2c\xd5\x3a\x22\xd5\x86\x18\xdb\x32\x9d\x5d\x9a\xc0\x55\x27\xfa\x75\xcf\x1b\xd6\x7e\x23\x8a\xd6\x7c\x8d\x93\xf1\xdf\x06\xa7\x00\x36\xb6\xe3\x8c\x04\x26\xff\xee\x24\x08\x34\x8e\xc4\x5b\xa2\xb8\xd9\xf5\x86\x9c\x96\x7b\x17\x0f\x2e\xa7\xfd\xcf\xaf\xc3\x01\xcf\xa3\x35\xe1\xe2\xb7\x7e\xdb\xf3\xac\xb7\xbf\x45\x7e\xe4\xc7\xe0\x79\x1b\xa2\xda\xe1\x8f\x57\x12\xa5\x38\x2a\x48\xd2\xdc\xf7\x7d\x1f\x3c\x4f\x48\x8f\x08\xca\x51\x18\xaf\x6c\x24\xbd\xd7\xfd\x9a\x46\xb5\x46\xaf\xb1\x49\x05\xcf\x5b\x91\xad\xd7\xda\xa6\x86\x30\xb1\x42\x5a\x90\x56\xd7\xd2\x0c\x8b\x6e\x6d\xc5\xc5\x93\x9f\xd6\x67\x42\x0d\x5f\x23\x78\x9e\x05\xb3\x4d\x91\xac\xaa\xe7\x99\x00\xcf\x63\xa5\x47\xe5\xaa\xb5\xe7\xa5\x00\xad\x99\x0d\x89\xd0\x1a\x3d\xcd\x7f\x20\xc4\x7e\x91\x82\xe7\x7d\xd3\x52\xa8\x96\x7a\xb5\xd4\x46\x03\x69\x9a\x47\x6b\x5c\x18\x54\x15\xa1\x68\xd7\xbf\x3e\x2d\xf7\xf3\x64\xbe\x54\xf9\x23\x1b\x3e\x32\xdb\x7b\x02\x7b\x47\x8c\x84\x5b\x2c\xaf\xed\xba\xd1\xe0\x72\xa2\xa0\x52\x72\x05\x9d\x30\xaa\xd3\x16\x12\x52\xf1\x25\x17\x53\x98\x4c\xc6\xaf\xd6\xd3\x36\xf9\xb3\x5a\x7e\xf5\xbc\x4e\x68\x52\xa1\x87\xdb\x56\x6a\xfc\x0a\x55\x43\x96\xbf\x00\xf8\x3f\x63\xf6\xf0\x7f\x64\xf6\x27\xbd\xf4\x6f\x73\x7b\xe0\xc7\x93\x20\x89\x27\x41\x3e\x49\x9e\xdd\xee\x7b\xf2\x9d\xeb\x94\x13\xbc\xe9\xce\xee\x2e\xba\xe0\xdd\x76\xad\x77\x47\x8b\x6b\xb5\xd0\xc5\xda\x1c\xa5\xa5\xf9\x34\x13\xef\xcf\xe4\xf9\xb7\xf2\xfe\xc7\x31\x19\xbf\xa0\x3e\x99\x04\x79\x32\x09\xa3\xec\x55\x03\xc7\xef\xe8\x86\x2f\xbe\xc9\x8f\xb7\xef\xab\x23\x12\xe7\xe1\xcd\xdc\x10\xbc\xd9\x5e\x9c\x6f\x58\xfe\xa3\x14\x47\xc1\x75\xb6\xc1\xd9\xdd\xcd\xf6\xee\x6d\x76\x77\xa4\xf1\x2a\xb7\x87\xff\x07\x72\x7f\x83\xdb\xf3\xa4\x8c\xc2\x2a\x23\x51\x15\xfb\x71\x1e\x54\x41\x18\x45\xb1\x1f\x07\x69\xe6\xd3\x9c\x96\xe8\x67\x55\xc6\xb2\x82\xbe\xc9\xed\x49\x4c\x30\xca\xa2\xca\x2f\xd2\x8a\x54\x21\x2b\xd3\x32\x27\x71\x9a\x05\x19\xf5\xcb\x22\x47\x5a\x11\x3f\x4b\x18\x7b\x93\xdb\xe3\x38\xae\xd2\xb8\xc0\xc8\xcf\xe2\x38\xc4\x2c\xa5\xb4\xca\xa2\x2c\x4e\x53\x4c\xc2\x2a\x48\xfd\xa2\x2c\xf2\x30\xf5\xdf\xe6\x76\x3f\x0e\x32\x2c\xa3\xac\x88\x83\x20\x8d\xa3\x34\x8f\xfd\xe0\x24\x4d\xd3\x22\x8f\xe9\xe9\x49\x96\x16\xf1\xec\x88\x1e\x95\xc1\x78\x64\xc7\x61\x62\x08\x5c\x1b\xa9\xc8\x12\x47\xba\xff\xdb\x0f\xb9\x73\x62\x6a\x97\xe2\xc6\xce\x4a\x27\x47\x50\xf1\x06\x47\xd6\xa8\xa9\xa7\x70\x68\x56\xed\xe1\xcf\x61\xfb\x9f\x8c\x18\x32\x71\x27\x59\x69\xf5\x1e\x4b\x51\xf1\x65\xa7\x9c\x5b\x0f\x06\xa8\x5b\xbd\xfe\xef\xcd\xf4\x0a\x9e\x59\x9b\x51\x2a\x3b\x61\x34\xdc\xe3\x0e\x86\x28\x46\x64\x58\xb4\x76\xee\x71\x67\x97\x71\xd0\xb8\xdf\xb2\xb2\x1f\x1e\x68\x6d\x63\xa1\xe8\x10\x35\x9b\x7f\x00\x22\x18\xcc\xc3\x39\x5c\xf7\x9c\x64\xdb\x1c\x85\xed\xe3\x91\xed\xf4\xf7\x52\x1b\x41\x56\x38\x05\xdf\x8d\xc7\xfe\xe8\x00\xe6\x52\x99\x41\x89\x55\xf0\xb2\xa0\x3d\x34\x85\xdc\xcf\x43\x6b\xdc\xf6\xba\x67\xa4\xa3\x75\xa0\x8f\x73\xa6\x47\x6d\xd8\xf6\x29\xba\x6e\x91\xf2\x6a\x07\xa7\x5b\xe3\xd8\x03\x3e\xcc\x1f\xf9\xea\xe8\x8e\x12\x61\x1f\x1b\x0a\x2d\xa3\x33\x20\x06\x78\x05\x25\xd6\x5c\x30\xb8\x98\x2d\xac\x1a\x1c\xa4\x3f\xcc\xa7\xb0\x99\x6c\x27\xbb\xc9\x8f\xbe\x00\xd6\xeb\x4e\x23\x7b\xe8\x27\x1b\x75\x43\x76\xa8\x6c\x19\x9c\xbb\x8e\x0c\xdc\xe9\x05\x5f\xa1\xec\x5c\x98\x02\x64\x8b\x62\x78\x01\x0d\x7c\xee\x78\xce\xdd\x51\x23\xd8\x2f\x0f\x22\x53\x18\x47\xbe\x76\xa0\xbb\xec\xb0\xc3\x5f\xc2\x75\xd6\x89\xde\x09\x5a\x2b\x29\x64\xa7\x2d\x75\x52\xd4\x9a\x8b\xe5\xe8\xbb\x15\xe8\x93\xd1\xbf\xdf\x74\x1f\x7a\xb7\x2a\x51\x59\xf2\xb5\xdc\x81\x4a\x1f\x52\x29\xb4\xe5\xf3\x81\x88\x37\x76\x80\x2e\xdd\x85\x25\x29\x31\x7d\x66\xb4\x21\xca\x74\xed\x08\xac\xfc\x6d\x2f\x38\x85\x3e\xbc\x33\x85\xa8\xa1\x6b\xe1\x78\x7e\x03\x74\x47\x1b\xd4\x7d\xa8\xbd\x01\x3b\x8b\x6c\x08\x77\xcf\x3e\xeb\x2f\xae\xd1\xa2\x08\x86\xed\x5b\xc2\x5d\xb4\x9f\xae\xa7\x10\xd8\x40\x1f\xd8\x4f\xbb\x12\x72\xfa\x34\xe8\xd1\x9e\xfd\x86\x3a\x63\x83\x96\xd7\x36\x35\xa7\xf5\x03\x33\xc2\x00\x56\x9b\x59\x3b\x18\x0d\x97\x94\xb4\x49\x18\x6e\x17\x06\xbc\xbf\x01\x69\xa7\x8d\x5c\x0d\x46\xf6\x9d\x34\x3c\x73\x87\x1e\xb9\x70\xa0\x1d\xdb\xa7\xed\xf8\xe1\x31\xeb\x9a\x74\x50\xfc\x60\x97\x36\x76\x66\xe9\xf1\xf5\x97\x0d\xba\x91\x8d\x2b\x84\x8d\x06\xa9\x80\xb7\x74\x78\xe1\xda\x07\xad\xfd\xa4\xc4\x58\xb7\x5d\x4a\xfe\x6a\xb3\x2b\x19\xde\x5c\x9d\x4f\xa1\x36\xa6\x9d\x1e\x1e\xba\x19\xc1\x0e\x16\xd3\x22\x89\x93\x7d\x31\xdd\x0b\x7c\x49\x6c\x2c\x9c\x5a\x77\x97\x44\xcf\xed\xe7\x14\x02\x7f\xff\xef\xd9\xe1\x86\xaf\xb8\xe9\x0f\x9f\xdb\xcf\x29\xc4\x59\x10\x46\x79\xfe\x04\xa4\x46\xba\x6a\xf5\xd0\x12\x3f\x23\x33\x8a\x08\x4d\x1e\x06\x10\x1b\x03\x63\xfd\x8b\x9d\x80\x9b\xd1\x5c\xf7\xf7\xa1\x80\x51\x7c\xb9\x44\x85\xac\x87\xb4\xc1\xad\xd9\x17\xba\x87\x75\xea\x5b\x5c\xbf\x66\x58\x21\x61\x20\x45\xb3\xb3\xed\xb2\x07\xfb\xfe\xbf\x2d\xf6\x2e\xfd\x54\x7d\x85\x84\x3d\x55\x1f\x24\x83\xf6\x0b\x5b\x89\xc7\xbe\xb7\x52\x36\xb0\x22\x5b\x50\x68\x14\xef\x87\x0c\x8d\x82\x01\x79\x72\x4c\xae\x5d\x2b\xaf\xc8\xf6\xaa\x3f\x37\x85\x70\xc8\xe9\xcb\x2a\xdd\xa4\xb7\x26\x8d\xd3\xbb\xeb\x1b\x80\x58\x07\x69\xa7\x94\x7b\x32\x3f\x92\xa8\x89\x86\x12\xd1\xbe\xa9\x0d\x52\xe3\xd2\xb4\x57\x60\xed\xd9\xab\x2d\x1c\x22\x38\xe1\xda\xa1\xc5\x69\xd4\x72\xf5\x0c\x6d\x1a\x98\x7c\xfc\x20\x00\xb3\x75\x1e\x91\x96\x8f\x00\xcc\x76\x2e\x65\x33\xa3\x96\x16\x4e\x85\xd5\xc4\xa6\x60\x54\x87\xb6\xd7\x88\xd8\x01\xc3\xb2\x5b\x2e\x07\x4a\xb2\x2d\xe0\x08\x60\x29\xc1\x1a\x19\xb9\xdd\xbe\xd5\xda\x56\xc9\xca\x95\xe7\x41\xc4\x92\x9d\x5d\x9d\x42\x45\x1a\x8d\xa3\x7f\x05\x00\x00\xff\xff\x80\x6a\xa2\xe3\x78\x12\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 4728, mode: os.FileMode(420), modTime: time.Unix(1547653425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x3b\x6f\xe4\x36\x10\xee\xf5\x2b\x88\x49\xe1\x66\x1f\x7c\x8a\x8f\x2e\x65\x70\x48\x9a\x04\xb8\x7a\x48\x0e\xd7\xc2\x7a\xb5\x0a\x49\xd9\xb7\x38\xdc\x7f\x0f\xb4\xb7\x8e\x53\x3a\x50\x33\x33\xfa\x1e\x33\xd2\x97\x68\xee\x75\x2a\xeb\x89\xfe\xa0\xfe\x76\xad\xe7\xc0\x3a\xb5\x3e\xcd\xa7\x81\xfa\x33\x55\x5a\x2f\x61\x60\x0c\x53\xba\xae\x73\x6f\x5b\xcd\xd8\x05\xa7\x39\xb0\x7b\xc9\xd8\x99\x6e\x81\x3d\x7d\x07\xcc\xb9\x52\x6b\x10\xc0\xf9\xc8\xd1\x8d\xc6\xa9\xa4\xb5\xd6\x98\x4a\xb6\x22\xea\x51\x11\xcf\x2a\x19\x83\x24\xb4\x90\x68\x60\x07\xa9\xde\x96\x7e\x85\xf0\x1d\xd2\xb4\x3c\x53\x85\x00\x48\x6d\x2f\xa4\xdb\xa7\x5e\x37\xc0\x7d\xdc\xe9\x5b\x87\x00\xc9\x5a\x5f\x9c\xb2\x3e\x5b\xcb\xb3\x97\xa9\x24\x91\x73\xd6\xe8\x8a\x12\xd9\x20\xc7\x9c\x5c\x91\xc8\xa3\x44\xa1\xb9\x50\x96\x67\x35\x2a\x5e\x94\x4b\x3c\x39\xfc\x57\x6f\xc1\x8a\x97\xb6\xd9\x4e\xaf\x10\x40\x8d\x49\x8c\x8e\xac\x8a\xc5\x3b\x5e\xc8\x9a\xc8\xad\xb4\xc5\x79\x8e\x56\x60\x86\x1f\x3b\x38\xe7\x02\x01\xda\x7d\x61\xb8\xb7\x1f\x22\xf9\xfc\x42\x33\x04\x25\x77\x30\x43\x90\xa3\x14\x5a\xef\x60\x81\x20\x76\x50\x21\xb8\x1d\x34\x7c\xd9\x0e\xc8\x24\x22\x89\x91\x54\xf2\x4e\x78\xad\xb3\xa0\x84\x32\xba\x28\x2d\x69\x1a\x89\x47\x13\x4b\xd4\x2a\x12\x57\x76\x44\x93\x9d\x73\xbe\xe0\x68\x3d\x4a\x27\xa4\xdc\x16\xb9\x60\xda\x3e\x45\x12\xd2\x45\x27\x8c\x31\x26\xa2\x20\xcc\x36\x21\x79\x3e\x72\x72\x4e\x4b\x2c\x09\x9d\x32\x63\xe6\xa3\x36\x26\x66\x8f\xc6\x1a\x19\x71\x2c\x29\x71\x2f\xa9\x6c\x4a\x53\x86\x00\xda\x10\x1f\x39\x8e\xfb\x2c\x91\xf6\x5a\x45\xb7\xf7\x52\x96\xbd\xd6\x4e\x7a\xed\x7d\x56\x36\xc3\x0e\x5e\xa9\xb6\xe9\xba\x1d\xf9\xe3\xe9\xf1\xe3\x17\x6c\xed\xed\x5a\x73\x60\x4f\xef\xa3\x47\x06\x02\xfb\x6c\x04\x86\x61\xca\x34\xf7\xa9\xdf\x7e\xcb\x81\x01\xff\xc6\xc5\xc7\x03\xc3\xf0\x0b\xfb\xf5\x91\xbc\x2d\x67\xac\xf5\x6b\xc5\x13\x0d\xff\x8d\xe3\x99\x6e\xdb\x98\x02\x3b\xf6\xcb\x72\x7c\x7f\x35\x0c\x7f\xaf\xb4\xd2\x86\x98\xd7\xcb\xd7\x6b\x3d\x53\x6d\x81\xc9\x81\xb1\xb7\x7b\xf3\x15\xa7\xfe\xd7\x74\xa1\xdf\xff\x0c\x4c\x0c\xc3\x26\xb3\x81\xdb\x74\x9a\xa7\xf9\xf4\x33\xe8\xcb\x1a\x5f\xa6\xf4\x65\x4b\xf8\xe1\x70\x3c\x1c\x8e\x71\x9d\x5e\xf2\xb1\x52\xbb\xae\x35\x51\x3b\x3e\xd0\x5f\xe8\x76\x58\xd6\x78\x58\xe8\xf2\x93\x57\xa7\x57\xec\xf4\x39\xe2\x79\x23\xdf\x89\xd4\x9f\x71\xed\xcf\x9f\xf4\x7e\xa0\xff\xa7\xf1\x3b\xeb\xdd\xf5\x9f\x00\x00\x00\xff\xff\x6a\x9a\xa9\xc9\x01\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1025, mode: os.FileMode(420), modTime: time.Unix(1547653425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
