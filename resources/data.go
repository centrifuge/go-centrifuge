// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\x59\x73\xdb\x3a\xb2\xc7\xdf\xf5\x29\xfa\x2a\x2f\xc9\xad\x13\x99\x04\x77\x55\xdd\x07\x6a\x73\x12\xc7\x8e\x6c\x79\x39\xf1\xcb\x2d\x90\x6c\x4a\x88\x48\x82\x01\x40\x2d\xfe\xf4\x53\x00\x29\x45\x59\x9c\x33\x95\x33\xe7\x54\x4d\xcd\xe4\xc5\x2a\x2c\x7f\x34\xba\x7f\xdd\x00\x91\x17\x30\xc1\x9c\x36\x85\x82\x0c\x37\x58\xf0\xba\xc4\x4a\x81\x42\xa9\x2a\x54\x40\x97\x94\x55\x52\x81\x60\xd5\x1a\x93\x7d\x2f\xc5\x4a\x09\x96\x37\x4b\xbc\x42\xb5\xe5\x62\x3d\x04\xd1\x48\xc9\x68\xb5\x62\x45\xd1\x33\x62\xac\x42\x50\x2b\x84\xac\xd3\xad\xda\x91\x12\xd4\x8a\x2a\x18\x1f\x15\xa0\xa4\xac\x52\x5a\xbf\x77\x18\x32\xec\x01\xbc\x80\xf7\x3c\xa5\x85\x31\x81\x55\x4b\x48\x79\xa5\x04\x4d\x15\xd0\x2c\x13\x28\x25\x4a\xa8\x10\x33\x50\x1c\x12\x04\x89\x0a\xb6\x4c\xad\x00\xab\x0d\x6c\xa8\x60\x34\x29\x50\x0e\x7a\x70\x98\xaf\x25\x01\x58\x36\x04\xc7\x71\xcc\x6f\x54\x2b\x14\xd8\x94\xdd\x0e\xde\x66\x43\x08\x9d\xb0\xed\x4b\x38\x57\x52\x09\x5a\xcf\x11\x85\x6c\xe7\xbe\x86\xfe\x19\xab\xdd\x33\x9b\x04\x03\x6b\x60\x0d\xec\x33\x95\xd6\x67\x4e\x48\x2c\x72\xc6\xea\x5c\x9e\x5d\x97\xb7\xd7\xbb\x64\xbb\x6e\x1e\x3f\x7e\x9c\xe4\xcd\xd3\x6d\xb2\x9b\xc6\x37\x78\x7b\x35\x7e\xcf\x9f\xf6\x7b\xcf\x0b\x37\xd7\xd5\xf2\x7e\x33\xbf\xfc\xf4\xfe\xe3\xba\xff\x07\xa2\xce\x41\xf4\x3e\xf7\xa7\x57\x7e\xb9\xfe\xfc\x80\x9f\x1e\x2e\x1e\xc8\xe7\x79\x63\xfb\xbf\xd7\xd9\xb9\xb3\x7e\xc7\xed\x5b\xa7\x5c\xd1\xd5\x7c\xe4\x2d\xd0\xab\xec\x56\xf4\xe0\xaa\xf8\xe0\xa9\x76\x03\x7a\xfb\x58\x29\xa6\xf6\x33\x9a\x2a\x2e\xf6\x43\xe8\xf7\xbb\x1e\x5a\xa5\x2b\x2e\x6e\xb0\xe6\x92\x7d\xd3\xc5\xaa\x0d\x67\x29\xde\x55\x35\xd5\xee\xeb\xf7\x7b\x26\x3a\x97\x94\x55\x3f\x64\xa5\x0b\x22\xbc\xbc\x69\x61\x79\xd5\x83\x53\x38\x5a\x5b\x5e\xc0\x55\x53\xa2\x60\x29\xbc\x9d\x00\xcf\x0d\x28\x27\x48\x74\x1a\xc7\x98\x79\x76\x37\x6b\x74\x08\x0c\x14\x4c\x2a\x3d\xb3\xe2\x19\x7e\xcf\x54\x2d\xf8\x86\x99\x0e\x6e\xb4\x4f\x0c\x38\x18\xfa\x87\x81\x76\xbc\x01\x21\xde\x80\x58\xd6\xc0\x25\xdf\x06\xdb\x26\x13\xe7\x82\xf3\x87\x2b\xf9\x28\x1f\x82\xdb\x24\x7d\xf4\xc2\xab\xc0\xbe\xbb\x5e\x5c\x78\x93\x4f\x8f\x9f\xcb\xd9\xfa\xcd\xfc\xcd\x76\x37\xbb\xb8\x8d\xf7\xfc\xee\x6e\x12\x66\x79\xff\x47\xf2\xa1\x3f\x20\xb6\xf5\x9c\xfc\x04\x89\xdc\x3e\x4c\x9d\x9c\xb0\x77\xc9\x1d\x5e\x47\xe7\x77\x77\xd7\xa3\x37\x63\xf1\xf0\x3e\x19\xa5\x34\xba\x3c\xbf\xfc\x9c\x97\xc9\x78\x29\x9a\xa4\xdf\xf9\x68\xda\x81\x7d\x8c\xc4\xdb\x09\xbc\x86\x2e\x1a\xcf\xa1\xef\x76\x93\xdf\x53\xed\x1e\xc8\xb0\x2e\xf8\x1e\x33\x58\x94\x54\x28\x18\x77\x44\x49\xc8\xb9\x30\x0e\x5d\xb2\x0d\x56\x5f\xb9\xf2\x7b\xea\xe0\x59\xec\xac\x5d\x1e\x86\x56\x12\xfa\x96\x6d\x39\x49\xe6\x7a\xd4\x23\x8e\x17\xb8\x31\xe2\xd8\x0a\xc6\x6e\x44\x2c\xc7\xce\xdd\x20\xb4\x7f\x02\xa8\xb5\x8b\x48\x3c\x71\xdd\xd1\x28\x9c\x11\x67\xe2\x65\x36\x89\x70\x14\x12\xea\x59\x99\x13\xfa\x61\x32\x72\x13\x3b\xc5\x99\x3d\x7b\x0e\x65\x6b\x87\x36\x06\x16\x0d\x9d\x34\xcb\x43\x62\x07\x09\x21\x91\x67\x25\x56\x98\x04\x61\x16\xda\x1e\xb5\xf3\xc4\x22\x34\xf0\x3a\xe8\x2f\xf8\x86\xb6\xbb\x3e\x41\x34\x41\x51\xd1\x62\x85\x6c\xb9\x52\xf2\xd7\xf0\x26\x7f\x12\xef\xaf\x4c\xf8\xa7\x01\xb7\x2d\x77\x60\x7b\xee\xc0\x0e\x07\xde\x77\xd5\xec\x40\xe0\x22\xd9\x25\x17\xe3\xe4\x71\x15\xbd\xbb\x57\xf2\x7a\x7f\x7f\x9e\xdd\xce\x05\x75\x6f\xea\x45\xec\xaa\x64\x23\x7d\x5a\xd9\xf6\xa7\xed\x79\x4c\x9e\xfa\x3f\x90\xf7\x06\x76\xe8\x0d\x88\x13\x3c\xb7\xc0\x75\x49\xd2\x45\x29\xa6\x8c\x2e\x2e\xef\xdd\xe5\xdd\x26\x78\x38\x5f\xd5\xcb\x9b\x2d\x0f\xb7\x7c\xb6\x90\x6f\x56\x8f\xe7\xc9\x39\x73\x68\x1c\xee\x7e\x8e\xb8\x89\xce\xb3\x80\x93\xbf\x80\xf0\x9f\x00\x6e\x3b\x3e\x99\xa6\xa3\x3c\xf4\x83\x88\xb8\xce\x94\xb8\x79\x6c\x4d\xc7\x2e\xf1\x32\x82\xb6\x15\x5b\x21\x21\x4e\x1a\x4c\x7e\x0a\x78\x60\x87\xd6\x24\x08\x1c\xdb\xca\x30\x0d\xe3\x11\x09\x63\x1a\x5a\x64\x9a\x5a\xd1\x2c\x8f\xc9\x64\xe6\xbb\x18\x59\x41\xfa\x3c\xe0\x76\xe8\xd8\x81\xe5\x86\xb6\xef\x86\x39\xe6\x39\xba\x91\x6b\xcd\x9c\x49\x1c\x67\x0e\x0d\x92\x34\x49\xac\xd4\x8b\xe3\x59\x07\xf8\x0d\xaf\xa5\xc2\xef\x10\xcf\xf8\xb2\xa6\x2a\x5d\xfd\x1a\xdd\xce\x9f\xa4\xfb\xb0\x3a\xbc\xbc\xfd\x30\xf9\x00\xa9\x40\xaa\x10\x44\x67\xaa\x26\xdc\xe8\xbc\xfa\x4f\xab\xe8\xad\x03\x9e\x03\xde\xf9\x7b\x79\xb7\x32\x27\xb2\xa7\x01\x71\x88\x37\xc6\x6c\xec\xda\x53\x37\xb4\x3c\x67\x1a\x04\x24\x0c\x69\x18\xcd\xc8\xd4\xb1\x6d\xdb\xfb\x29\xef\x64\x1c\x5a\x33\x7b\x42\xf3\x09\x0d\x68\x3c\xc1\x84\x8c\xed\xc0\xcb\xdc\x91\xeb\xc4\xa1\x17\xba\x81\x33\xb5\xed\xc0\x76\x9e\xe7\xdd\x8d\x12\x8c\x1c\xcb\x1a\x3b\xfe\x38\xf7\x88\x13\x26\x33\x3f\x9a\xba\x63\x37\xf2\x7c\x6b\x36\x0b\xf3\x60\xe6\x07\x64\xea\x9e\xdc\x62\xf4\xa5\xe5\x94\x77\x98\x7c\x80\xab\x0f\xb7\x70\xb7\x98\xfe\x4f\x0f\x00\xcb\x84\x8a\x94\x66\x28\xb8\x1e\xf5\x4b\x29\x60\x5b\xcf\xb2\xf9\x15\x3e\x76\x14\x0e\x6c\x42\x06\xb6\xfd\x6c\xb9\x8c\x97\xce\x34\x8d\x95\xf8\x78\x3f\xde\x6d\x9f\xfc\xb5\x2f\x6f\x23\xf6\xb8\xb8\x79\x52\x4f\xd1\x24\xd8\xdf\x3d\xd5\xa3\xf9\xcd\x74\xf6\x24\xee\xf8\x7d\xff\xfb\x15\x88\x4b\x06\x84\xd8\x03\xdb\x7e\xb6\xe2\x5f\x9c\x6f\xd9\xee\x77\xac\x9a\xdf\xe3\xfb\xcf\xeb\x77\x17\x65\xf5\x66\x11\xbf\x9b\x7c\x7a\xca\x03\x3c\xbf\xe4\xbe\x12\x9c\x2d\x1f\x77\x65\x10\x7b\x37\x3f\x27\xb4\x6c\xbd\xfb\x1c\xa1\xf6\xdf\x4b\x68\x3c\x73\x3d\x3f\xb5\x7d\x27\xf4\xa9\xef\xe6\x99\x3b\x73\x13\x3f\xa2\xb9\xed\xd0\xd0\x9f\xe4\xd6\xc8\xf3\x49\x4c\x2d\xeb\xa7\x84\xfa\x4e\x30\x0a\xc7\xce\x84\xc4\xb1\x33\x4e\x89\xe5\x4f\x22\xd7\xb3\xa3\xc4\x73\xc3\x88\x58\x61\x94\x46\x53\x3f\x88\x22\xeb\x79\x42\x47\x1e\xba\xc4\xc9\xc6\x69\xe0\x5a\xc9\x68\x1c\x5a\x79\x64\xf9\xb6\xe3\xa0\xed\xf9\x96\x9d\x47\xa1\x15\x45\xa1\xe3\xf9\xdf\x10\xfa\x05\xa9\x13\x20\xff\xd5\x30\xfe\xd5\x28\xfe\x17\xc4\x7f\x4f\x10\x5f\xc0\x84\x2a\x0a\x0b\xc5\x05\x5d\x62\x4f\xb6\x7f\xdb\xcf\xf4\x39\x55\x2b\xe3\x99\x42\x7f\x0c\x4e\x46\x90\xb3\x02\x7b\x00\x35\x55\xab\x21\x9c\xa9\xb2\x3e\xfb\xf2\x5c\xf0\xff\x19\x55\x74\x60\x46\x66\x89\xd6\x1d\xf3\x2a\x67\xcb\x46\x50\xc5\x78\x75\x5c\x20\x35\xad\x8b\x5f\x5f\xa6\x15\xf8\x6e\xb5\x38\x4d\x79\x53\x29\x09\x6b\xdc\x43\xb7\x8b\x1e\xed\x1a\xf5\x3a\x6b\xdc\xeb\x66\xec\x14\x0f\x5d\x7a\xee\xdb\x4a\xa1\xc8\x69\x8a\xb0\xd5\x00\x19\x10\xe2\xf9\x5b\xa0\x55\x06\x73\x32\x87\x05\x8a\x0d\x0a\x73\xb5\xc1\x4a\xdf\x5d\x7a\xfa\x56\xf2\x86\x4b\x55\xd1\x12\x87\x70\xfc\xc4\xef\xbd\x80\x39\x17\xaa\x93\xd1\x12\x3f\x9e\xaa\x07\x0d\x21\xb4\x42\xa2\x97\xd7\x59\xfa\x5a\xf1\xd7\x35\xa2\x80\xf4\xd4\x6b\xb2\x57\x93\xba\x75\xd2\xa2\xc6\x94\xe5\x7b\x98\xee\x94\xf9\x22\x80\xb7\xf3\x13\x6b\xb5\x28\xa4\xb4\x82\x04\x41\x20\x4d\x57\x98\x01\x55\xc0\x72\x48\x70\xc5\xaa\x0c\xae\xe2\x5b\x2d\x83\xdd\xec\xb7\xf3\x21\x6c\x07\xbb\xc1\x7e\xf0\xd4\x86\x40\x5b\xdd\x48\xcc\x8e\x89\xa0\xf7\x5d\xd0\x3d\x0a\x1d\x08\x63\xae\x49\x63\x33\xfa\x96\x95\xc8\x1b\xb3\xcd\x0a\x78\x8d\x55\xf7\x8a\x53\x61\x6a\xac\xd6\xb7\x3b\xbd\x19\xd9\x83\x43\x73\x37\x65\x08\x7d\xc7\x92\x7d\xa3\x52\xb2\x8a\x95\x4d\x09\x19\x16\x74\x6f\xd6\xc5\x0d\x8a\x3d\xd4\xa4\x06\x81\xb2\xe6\x95\x44\xad\x44\x37\x9c\x65\xa0\x58\xa9\x57\xa1\x4a\xd1\x74\x2d\x8d\x00\xcd\x3e\x35\x52\x41\x42\xb5\xdd\xbc\x82\x15\x97\x4a\xcf\xe4\x8d\x48\x51\xc2\xcb\xc5\x62\xf2\x1b\x8c\xe7\x77\xbf\x41\xca\x05\x4a\x18\x0c\x06\xaf\xba\xe7\x27\xbe\x06\x56\x41\xc1\x97\x26\xf3\x87\xd0\xd7\xf6\x69\x5b\x65\x53\x62\x06\xc9\x5e\x6f\xab\x8d\x41\x5f\x7b\x71\xf7\x7f\x2f\x37\xb4\x68\xf0\x06\x69\x06\xff\x0b\xe4\x15\x30\x09\x05\x4a\x73\xc3\xad\xc0\xf4\x41\x82\x05\xdf\xfe\xa6\xbd\x57\x41\xba\xa2\xd5\x12\x8f\xfb\x98\x98\x3d\x2a\x0e\xbb\x1e\x7c\xdd\x38\x84\xbe\x67\x59\xa5\x34\xa9\x78\xdd\x60\x83\xdf\x20\x60\x3c\x43\xe5\xbe\x4a\x57\x82\x57\xbc\x91\xfa\x12\x9d\xa2\x94\xac\x5a\xf6\x3e\xeb\x09\x2d\x20\xed\xbb\x9c\x6c\x71\x68\xca\x04\x85\x3e\x30\x74\x1d\x44\x21\xcf\xba\xad\x89\xee\x4a\xbe\x65\x45\xa1\x59\xa1\x45\xc1\x53\xaa\x5a\x5a\xa4\xa2\x42\x35\x75\x0f\xf4\xfc\x87\x76\xa2\x3e\x53\x2c\xa3\x3f\x13\x88\x12\x9a\x5a\x7b\x14\xd2\x7d\x5a\xa0\x6c\x01\x68\x97\xd0\x0e\xd9\x52\x66\x1e\xf4\xba\x58\xea\xec\x82\xae\xfb\x81\x32\xc3\xc0\xe5\xa2\xad\xc9\xe6\x60\xeb\x6c\x14\xa8\x04\x43\x69\x8c\xd9\x76\x08\x52\x50\x54\xea\x83\x4d\xff\xb9\x69\x07\x98\xf3\xad\x77\x72\x10\x48\x93\x13\x2c\xfd\xda\x63\xbd\xc3\x31\xd0\x25\x0e\x16\xa8\x2b\xfc\x76\xc5\xd2\xd5\xf1\x88\x80\x2e\xff\x75\x4c\x1a\x89\x87\xb3\x95\x6b\x0f\x76\x1f\x29\x99\x46\x44\x37\xa6\x8d\x54\xbc\xec\x16\x39\x14\xa7\xee\xed\xb3\x2b\x3b\x57\xa6\x0e\xf4\xf5\x61\xd4\x3f\xbe\x70\x9a\xba\xd7\x09\x1f\xd7\x4d\x0b\x86\x95\x6a\x13\xf6\xe5\x56\x13\xf2\xb9\x61\x02\x61\x2b\x81\x0b\x60\x75\xda\x3d\x7b\xd2\xa4\x30\xf4\xa7\xe6\xf3\xa8\xf5\xa6\xa6\x57\x4f\xbc\xbb\x79\x3f\x84\x95\x52\xf5\xf0\xec\x4c\xc7\xaf\xd0\xe4\x0f\x23\xcf\xf5\xda\xc4\xa2\x3b\x93\x58\x07\x7f\x2e\xa9\xde\x13\x4b\x8d\x5e\xdd\xe5\x1a\x05\x25\x68\x25\xa9\xc9\x58\xbd\xd3\x2d\x32\x33\x9b\x58\x70\xbe\x45\x06\x15\xdf\xf6\x40\x6b\x9d\x53\x39\xd7\xb3\x87\x40\xac\xe3\x3f\x33\xf4\x9c\x4a\x28\x58\xc9\xba\xf3\x33\x63\x79\x8e\x42\xef\xee\x18\xa1\x63\x16\x69\x12\x96\x54\xbe\x37\xa3\x0f\x2f\xb6\x63\xf3\xb9\x67\x10\xeb\x34\x75\x6b\x9c\x65\x17\xb8\x1f\x82\x73\xda\x78\x83\x1b\xbe\x46\xd3\xee\x79\x87\xe6\xf6\xf4\x1c\xf3\xb2\x64\xba\x9c\x7e\xd3\x3e\x17\x78\xe8\xb2\xbf\x48\x55\xb9\xba\x64\x95\x3a\x6e\xe6\xab\x82\xa6\xb8\x61\xb8\x75\x50\xf5\x25\x68\xa7\xae\xea\xc2\x93\x65\xed\x0b\x35\x85\xa4\xe0\xe9\xda\x9c\x15\x6d\x94\x40\x09\xb6\x5c\xa2\xc0\xac\x2d\x7f\x0a\x77\xea\x80\x7f\x5b\x02\x7d\xeb\x50\x03\x7f\xb4\xb0\xd0\x35\x86\x57\xc5\x49\x0d\x92\xc7\x67\xfa\x83\x49\x5f\xa4\x75\x49\xfa\x5a\xde\xf6\x3a\xf5\x2b\x0d\xd9\xa9\xed\x35\xe7\x85\x0e\xe9\x31\xe5\x14\x07\x89\x55\xf6\x0d\x0d\x7c\x63\xca\x7e\x49\x77\xc7\xcc\x23\x9d\xa7\x7e\x2c\xc9\xf4\x01\xba\xa1\x85\xd1\xdd\xb7\x65\x81\x6a\x03\xd3\x46\x18\x20\x4e\x67\xac\xa8\x84\x04\xb1\x82\x0c\x15\xa6\xca\xb8\xe9\x20\xa0\xd7\xd3\x25\x91\xb4\xf5\x90\x56\x7b\xc8\x30\x69\x96\xcb\xee\x84\xd1\x09\x68\x6a\xd7\x92\x83\x76\x44\xcf\xf4\xb6\x89\x8e\x95\xc9\x19\xd3\xa2\x4b\xbb\x9e\xd3\x03\xfd\x6b\x08\x39\x2d\x24\x9a\x51\x75\x2d\x78\xde\xe2\x7a\x10\xd6\x27\x9c\x6e\x3d\x0c\xeb\xb5\xfc\x74\xff\xb5\x50\x0b\x4c\x3b\x8c\xfa\xa6\xbf\xdf\xfb\x47\x00\x00\x00\xff\xff\x10\x2d\xe1\xce\x52\x19\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6482, mode: os.FileMode(420), modTime: time.Unix(1561210690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1554467633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

