// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x73\x1b\x37\x12\xbe\xf3\x57\x74\x49\x97\xa4\x6a\x87\x9a\xf7\x83\x55\xa9\x2d\x3e\x6d\xc5\xb2\x42\x49\x54\x14\xeb\xb2\xc6\x60\x7a\x48\x58\x43\x60\x0c\x60\xf8\xf0\xaf\xdf\x02\x66\xc8\x48\x96\xa5\xec\x3a\x95\xec\x65\x75\xd1\x10\x40\x37\xfa\xf1\xf5\x87\x06\x4e\x61\x82\x25\x69\x2a\x0d\x05\x6e\xb0\x12\xf5\x1a\xb9\x06\x8d\x4a\x73\xd4\x40\x96\x84\x71\xa5\x41\x32\xfe\x80\xf9\xbe\x47\x91\x6b\xc9\xca\x66\x89\x97\xa8\xb7\x42\x3e\x0c\x40\x36\x4a\x31\xc2\x57\xac\xaa\x7a\x56\x19\xe3\x08\x7a\x85\x50\x74\x7a\x79\xbb\x52\x81\x5e\x11\x0d\xe3\xa3\x06\x58\x13\xc6\xb5\xd1\xdf\x3b\x2c\x19\xf4\x00\x4e\xe1\x42\x50\x52\x59\x13\x18\x5f\x02\x15\x5c\x4b\x42\x35\x90\xa2\x90\xa8\x14\x2a\xe0\x88\x05\x68\x01\x39\x82\x42\x0d\x5b\xa6\x57\x80\x7c\x03\x1b\x22\x19\xc9\x2b\x54\xfd\x1e\x1c\xe4\x8d\x4a\x00\x56\x0c\x20\x08\x02\xfb\x8d\x7a\x85\x12\x9b\x75\xe7\xc1\x79\x31\x80\x34\x48\xdb\xb9\x5c\x08\xad\xb4\x24\xf5\x1c\x51\xaa\x56\xd6\x81\x93\x33\x56\x87\x67\x9e\x9f\xf4\xdd\xbe\xdb\xf7\xce\x34\xad\xcf\x82\xd4\x77\xfd\x33\x56\x97\xea\xec\x6a\xbd\xb8\xda\xe5\xdb\x87\xe6\xfe\xc3\x87\x49\xd9\x7c\x59\xe4\xbb\xe9\xf0\x1a\x17\x97\xe3\x0b\xf1\x65\xbf\x8f\xa2\x74\x73\xc5\x97\xbf\x6e\xe6\xef\x3f\x5d\x7c\x78\x38\xf9\x03\xa5\xc1\x41\xe9\xaf\x65\x3c\xbd\x8c\xd7\x0f\x9f\xef\xf0\xd3\xdd\xbb\x3b\xff\xf3\xbc\xf1\xe2\xdf\xea\xe2\x4d\xf0\xf0\xb3\xf0\x16\xc1\x7a\x45\x56\xf3\x51\x74\x83\x11\xf7\x5a\xa5\x87\x50\x0d\x0f\x91\x6a\x1d\x30\xee\x23\xd7\x4c\xef\x67\x84\x6a\x21\xf7\x03\x38\x39\xe9\x66\x08\xa7\x2b\x21\xaf\xb1\x16\x8a\x7d\x35\x55\x93\xbd\xc1\xc2\x2f\x79\xc5\x96\x44\x33\xc1\xed\x9c\xcd\xd0\x7b\xc2\xf8\x37\xf1\xd2\x25\x12\x7e\xb8\x6e\x01\xf3\x63\x0f\x1e\x03\xa4\xb5\xe7\x14\x2e\x9b\x35\x4a\x46\xe1\x7c\x02\xa2\xb4\x60\x79\x04\x8b\x4e\xc7\x31\x6f\x91\xd7\x49\x8d\x0e\xc9\x81\x8a\x29\x6d\x24\xb9\x28\xf0\x39\xae\x6a\x29\x36\xcc\x4e\x08\xab\xfb\x91\x01\x07\x43\xff\x30\xd9\x41\xd4\xf7\xfd\xa8\xef\xbb\x6e\x3f\xf4\xbf\x4e\xb8\xe7\x4f\x82\x77\x42\xdc\x5d\x30\x46\xaf\x7e\xdd\x2e\x56\x8b\xd1\x87\x78\xf7\x8e\xce\xc5\x45\x19\x5f\x5f\x7d\xf8\x79\x56\x6f\x4b\x4f\x26\xd1\xf6\x62\xe7\xdf\x5f\x07\xf5\xb8\xf0\x4e\xbe\xa5\x3e\x8d\xfb\xbe\xe7\xbe\xa4\xfe\xea\xfe\xfd\x30\x7d\x33\x7f\x2b\x37\xd3\xfb\x51\xb6\x2d\x1e\xc4\x2d\x1d\x0e\xd7\xe3\xfb\xb7\x75\x86\xfb\xfd\x7d\x78\x33\x4d\x97\x33\x19\xac\x16\x97\xbf\x9d\x74\x31\x9a\x76\xe0\x3e\x66\xe2\x7c\x02\x0e\x74\xd9\x78\x09\xfe\x61\x27\x7c\x41\x4c\x78\xa0\xc0\xba\x12\x7b\x2c\xe0\x66\x4d\xa4\x86\x71\x87\x2a\x05\xa5\x90\x36\xa0\x4b\xb6\x41\xfe\x24\x94\xcf\x91\x07\x2f\x42\xcf\xdd\x15\x31\x09\x8b\x28\xf5\x8a\x2c\x29\xc2\xdc\xcb\xdc\x14\x69\xe4\xa6\x19\x92\x2c\x4a\xe2\xd4\x27\x09\x29\x03\x52\x7a\xaf\x80\xd4\xdd\x11\x3f\x4c\xbc\x3c\x0a\xe2\xc2\x0b\x12\xe2\xa6\x7e\x92\xe4\x18\x7b\x61\x10\xf9\x49\x9a\xe5\x24\x8c\xf3\x34\x2d\x92\xf8\x35\x38\xbb\xbb\x12\xa3\x2c\x2c\x8b\x04\xe3\x00\x7d\x9f\xe4\x18\xc6\x24\x2b\xdd\x24\x25\x59\x96\x63\x90\x07\x65\x4e\x32\x52\xd0\x0e\xf8\xef\xc4\x86\xb4\x9e\x3f\x82\x69\x8e\x92\x93\x6a\x85\x6c\xb9\xd2\x1d\x8c\x4e\x4f\x4f\xbb\x98\xb6\x12\xb3\xe1\x55\xf7\xdb\x81\x3b\x43\x57\x8c\x97\x8d\x24\xb0\x17\x0d\x2c\x0d\xcf\x72\x40\x29\x85\x34\x00\x59\xac\x98\x02\x89\x9f\x1b\xb3\x0b\x53\xc0\x85\x06\xd5\xd4\xb5\x90\x1a\x0b\xc8\x91\x92\x46\xa1\x91\x94\x16\xff\x66\x89\x6c\x38\x37\x5c\x69\x99\x50\x69\xa2\x4d\x11\x34\x66\xa8\x0f\xd7\x0d\x6f\xc7\x1d\xa7\x1b\xfb\x89\x48\xba\x62\x1b\xec\x9f\xfc\xa3\x33\x0a\x60\x6b\x6a\x48\x0b\x28\xc4\x3f\xad\x04\x81\xca\xb2\x70\x4d\x24\xd3\xfb\x76\x23\xab\xe5\xc1\xfa\x83\xcb\x41\xfb\xf3\x63\xb7\xc0\x71\xe8\x8a\x30\xfe\x53\x3b\xed\x38\xc6\xda\x9f\x02\x37\x70\x43\x70\x9c\x2d\x91\x75\xf7\xcf\xc9\x89\x94\x0c\x25\x44\x71\xea\xba\xae\x0b\x8e\xc3\x85\x43\x38\x65\xc8\xb5\x93\x57\x82\x3e\xa8\x76\x4c\xa1\xdc\xa0\x53\x99\xa0\x82\xe3\xac\xc9\xce\xa9\x4d\x99\x82\x1f\x19\x21\xc5\x49\xad\x56\x42\x77\x83\x76\x6c\xcd\xf8\x93\x9f\xc6\x66\x42\x35\xdb\x20\x38\x8e\x81\xa7\x09\x91\x28\xcb\xe7\x91\x00\xc7\x29\x72\x87\x8a\x75\x6d\xd6\x0b\x0e\x4a\x15\xc6\x25\x42\x57\xe8\x28\xf6\x05\x21\x74\xb3\x18\x1c\xe7\x93\x12\x5c\xd6\xd4\x59\x09\xa5\x15\x90\xaa\x7a\x34\xc6\xb8\x46\x59\x12\x8a\x66\xfc\xe3\xd3\x74\x3f\x0f\xe6\xb7\x32\x3f\x32\xee\x63\x61\xaa\x89\x63\x6b\x88\x16\x70\x87\xf9\x8d\x19\xd7\x0a\x6c\x4c\x24\x94\x52\xac\xa1\xe1\x5a\x36\xca\x40\x42\x48\xb6\x64\x7c\x00\xfd\xfe\xc9\x8b\xf9\x34\x65\xfb\x2c\x97\x1f\x1d\xa7\xe1\x8a\x94\xe8\xe0\xae\x16\x0a\x3f\x42\x59\x91\xe5\x57\x00\xfe\xef\xb8\xda\xff\x93\x5c\xfd\xa4\x96\xfe\x63\xb6\xf6\xdc\xb0\xef\x45\x61\xdf\x4b\xfb\xd1\xb3\xe3\xf9\x40\xa7\x73\x15\x33\x82\xb7\xcd\xec\xfe\xb2\xf1\xde\xec\x36\x6a\x3f\x5a\xdc\xc8\x85\xca\x36\x7a\x14\xe7\xfa\xfd\x90\xbf\x9d\x89\x8b\x4f\xf9\xc3\x97\x31\x39\xf9\x86\xfa\xa8\xef\xa5\x51\xdf\x0f\x92\x17\x37\x18\xbf\xa1\x5b\xb6\xf8\x24\xde\xdd\xbd\x2d\x47\x24\x4c\xfd\xdb\xb9\x26\x78\xbb\xbb\xbc\xd8\x16\xe9\x97\x9c\x8f\xbc\x9b\x64\x8b\xc3\xfb\xdb\xdd\xfd\xeb\x7c\x6d\x49\xe3\x45\xb6\xf6\xff\x02\xba\x7e\x85\xad\xcb\x3c\x74\x63\x4c\xf3\xa4\x8c\xbc\xd2\xcd\x82\x24\xf1\x93\x3c\x48\xca\x24\xa2\x81\xef\x7a\x71\x1c\xfa\x79\xec\x47\xf1\xab\x6c\x9d\x64\xa5\x97\x90\xa2\xa4\x19\x29\xc3\x32\x0c\x42\xd7\xf7\x5c\x2f\x0d\xdd\x80\x86\x71\x5e\x7a\x45\x1c\xd1\xc4\x2b\x92\xd7\xd9\x3a\xcb\xa3\x2c\x0d\x62\x37\xf0\xd3\xd8\x4f\xca\xa8\x08\xf2\x22\xa3\xae\x8f\x1e\xf5\x12\x8a\x7e\x46\xd3\x82\x10\x42\x3a\xb6\xbe\x16\xb5\xd2\xf8\x8c\xaf\x0b\xb1\xac\x89\xa6\xab\xef\xeb\x46\x82\x3f\x89\xf0\xc3\xee\xf0\xc3\xe2\x97\xc9\x2f\x40\x25\x1a\xba\x96\x9d\xa9\x06\xe5\x56\xcf\x8f\x2f\x82\xfe\x2f\x6f\x52\xfe\x77\x6d\x4a\x1b\x84\x97\x80\x1f\xfc\xbd\xb8\x9f\xa5\xb1\x97\x24\xb9\x9f\x44\xd3\x70\x46\x73\x7f\x98\x47\xc3\x60\x46\x67\xd1\x34\x8c\x09\xc9\x23\xaf\x4c\x82\x49\x42\x5e\xc7\x7d\x19\x07\x6e\x91\xe6\xd3\x28\x8e\xc3\x71\x32\x1b\x79\x7e\x10\x8e\xa7\x65\x98\xe6\xf1\x30\xf1\x33\x3a\xc5\x60\x94\x78\x93\xf4\x0f\x70\x8f\x88\xe9\x2c\x9f\x06\x53\x3f\xa3\x59\x4c\xc7\x59\x18\xce\x5c\xc4\xb1\x67\xba\x17\xf4\xf2\x38\x08\x8a\xe1\x08\x1f\xb7\xe7\xa6\x1d\xff\x0a\xf8\xb8\xce\x89\xa4\xa4\x40\x29\xcc\xcc\xf7\xe1\x3f\xfc\x3f\x30\xbf\x06\xa6\xf7\xf7\x02\xd3\xf7\xa3\x84\xb8\xa3\x64\x1a\x79\x41\x94\xfa\x34\x88\x47\x9e\x9f\xd0\x70\xea\x16\x5e\xe8\xcf\xd2\x51\x96\xfa\x49\x40\x82\x57\x81\x19\xfb\x18\xa5\xa3\x20\x33\xcd\xad\x1b\x04\x18\x63\xe8\x86\x59\x92\x4e\xbc\x78\x12\x85\x9e\x1f\x94\xe1\xd8\x73\x47\xf4\x75\x60\x8e\xe2\x3c\x89\x27\xe3\x49\x3c\x0c\xa3\x78\x12\x15\xd9\xac\x9c\x25\x13\x2f\x9d\x45\xb1\x3f\x09\xd2\x28\x2c\x3d\x8f\x44\xe3\xec\xa4\xd7\x3b\x85\x09\xd1\x04\x6e\xb4\x90\x64\x89\x3d\xd5\xfe\x6f\x6f\xfc\x73\xa2\x57\x36\x3a\x95\xb9\x53\x4e\x46\x50\xb2\x0a\x7b\x66\x53\xbd\x1a\xc0\x99\x5e\xd7\x67\xbf\xbf\x3c\xfc\xab\x20\x9a\xf4\xed\xca\x22\x37\x7a\xc7\x82\x97\x6c\xd9\x48\x6b\xd6\x71\x03\x6a\x47\x6f\xbe\x7f\x9b\x56\xc1\xb3\xdd\x86\x94\x8a\x86\x6b\x05\x0f\xb8\x87\xce\x8b\x1e\xe9\x06\xcd\x3e\x0f\xb8\x37\xc3\xd8\x69\x3c\x4c\x19\xd9\xf3\x63\x8b\xb8\x35\x20\xb2\x60\x18\xce\xcf\x81\xf0\x02\xe6\xfe\x1c\x6e\xda\xfe\xce\x1c\x28\xc8\xcd\x89\xd1\x33\x67\xc1\x5b\xa1\x34\x27\x6b\x1c\x80\x6b\xdf\x0a\xdc\xde\x29\xcc\x85\xd4\x9d\x12\xa3\xe0\xdb\x82\x66\xd1\x00\x52\x37\xf5\xcd\xe6\xa6\x52\x1d\x2d\x6c\x8b\x0c\xf4\x71\xcc\x54\xaf\xf6\xeb\x36\x44\x37\x35\x52\x56\xee\x61\xba\xd3\xb6\x13\x83\xf3\xf9\x23\x5b\x6d\xeb\x48\x09\x87\x1c\x41\xa2\xe9\x8e\x0b\x20\x1a\x58\x09\x39\xae\x18\x2f\xe0\x72\xb8\x30\x6a\xb0\x93\x3e\x9f\x0f\x60\xdb\xdf\xf5\xf7\xfd\x2f\x6d\x02\x8c\xd5\x8d\xc2\xe2\x58\x0a\xc6\xeb\x8a\xec\x51\x9a\x34\x58\x73\x6d\x21\xdb\xd5\x0b\xb6\x46\xd1\x58\x37\x39\x88\x1a\x79\xf7\x1c\xd4\xf5\xc6\xf6\x44\xb5\xfd\x7e\x0f\x0e\xc3\x9d\xc8\x00\x4e\x02\x57\x59\xd0\x5d\x35\xd8\xe0\x57\xee\xda\xdd\x89\xda\x73\xba\x92\x82\x8b\x46\x99\x43\x9a\xa2\x52\x8c\x2f\x7b\x9f\x8d\x40\x1b\x8c\xf6\x31\x4b\xb5\xae\x37\xeb\x1c\xa5\x21\x48\x53\xf5\x28\xd5\x19\x15\x5c\x19\xe6\xec\x8e\xfc\x2d\xab\x2a\x13\x17\x52\x99\x66\x5f\xb7\x91\x51\x9a\x48\xdd\xd4\x3d\x30\xf2\x77\xad\xe0\x00\x5a\xf7\x66\x12\x51\x41\x53\xc3\x78\x7e\x0b\x74\x4f\x2b\x54\xad\xab\xed\x06\xe6\x5e\xb7\x25\xcc\xbe\x81\x19\x7b\x71\x83\x06\x45\xd0\x4d\xdf\x11\x66\xbd\x7d\x7f\xd3\xf2\x8f\xa5\xf1\xce\x42\x89\x5a\x32\xb4\xf7\x13\xb1\xed\x82\x4d\x40\x13\x65\x68\xdc\xfc\xbb\x6e\x17\x0c\xc0\x73\x4d\x8c\x8e\xa4\xa7\x6c\xf6\x19\x7d\x1a\xaf\xde\x81\xf2\x3a\x88\x60\x85\x86\xcd\xb6\x2b\x46\x57\x47\x3a\x84\x0e\xe7\x26\x29\xe6\x7e\xda\x9d\x24\xc2\xc4\xaf\x6b\x81\x0a\x60\xed\x45\x84\x36\x4a\x8b\x75\xb7\xc9\xa1\x08\xbb\xe7\xc2\xae\xbc\x2e\x2d\xde\x4f\xd6\x84\xf1\x93\xe3\xa3\xa0\xad\xef\x4e\xf1\x71\x5f\x5a\x99\xab\x63\x0b\xcd\x1f\xb6\x68\x6f\xce\x4c\x22\x6c\x15\x08\x09\xac\xa6\xdd\x4b\x21\xc9\x2b\x34\x9f\xd4\x36\x5f\x6d\x34\x4d\x93\x65\x04\x6f\xaf\x2f\x06\xb0\xd2\xba\x1e\x9c\x9d\xd9\xab\x9a\xb9\xdf\x0d\xb2\x28\x8c\x0e\x38\xb0\x2f\x99\x4b\x62\x7c\x61\xd4\x98\xbb\x24\x6a\x6e\x3e\x4d\x0c\x0f\x7f\xcf\x16\x57\x6c\xcd\x74\xbb\xf8\xc2\x7c\x1e\x17\x3f\xc1\xb7\x16\x36\xd1\x6d\x9a\xf8\xef\x9e\x69\x49\xb8\x22\xc7\x7b\xa0\xf1\xa1\x28\xda\x97\x4f\x02\xf6\xaa\x6c\x89\xa3\x75\x05\xb4\x64\xcb\x25\x4a\x2c\xda\x6a\xd0\xb8\xd3\x07\x8c\xb4\x15\x11\xbb\xa6\x24\x5e\xda\x58\x22\x29\x40\xf0\x6a\x6f\x2a\xed\x50\x27\x87\xe7\xdf\x83\x49\xbf\xab\xbe\x46\x52\x3c\x55\xef\x45\x9d\xf6\x4b\x93\x89\xc7\xb6\xd7\x42\x54\xb0\x26\xbb\x23\x2e\xb5\x00\x85\xbc\x30\x98\x7c\xb4\x4c\x6c\x2c\x0b\xac\xc9\xee\x08\x4f\xbf\x8b\xd4\xb7\x55\xda\x0b\xf7\x86\x54\x56\xef\xbe\xad\x1d\x62\x0c\xa4\x8d\x94\xf6\x55\xf2\x91\xc4\x8a\x28\xc8\x11\x39\x14\xa8\x91\x6a\x1b\xa6\x83\x02\xb3\x9f\x39\x15\xfd\xce\x83\x09\x53\x16\x2d\x56\xa3\x12\xeb\x67\x68\x53\x50\x88\xc7\xef\x32\xa0\x77\xd6\x22\x52\x33\x53\x61\xbb\xb9\x10\xd5\x90\x1a\x46\x99\x72\xa3\xa9\x18\x80\x96\x0d\x9a\x5a\x23\x7c\x0f\x05\xe6\xcd\x72\xd9\xb1\x99\x29\x01\xcb\x1d\x4b\x01\x66\x93\x9e\x9d\x6d\x4b\xad\xae\xa5\x28\x6d\x7a\x8e\x22\x86\x27\xcd\xe8\x00\x4a\x52\x29\xec\xf5\xda\xd3\xbd\x7b\xe9\xae\x25\x52\xb1\xb6\x48\xb3\x1b\xfe\x3b\x00\x00\xff\xff\xb1\x08\x24\x47\xde\x17\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6110, mode: os.FileMode(420), modTime: time.Unix(1553789102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1552945185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

