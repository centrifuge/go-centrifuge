// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\x59\x73\xdb\xb8\xb2\xc7\xdf\xf5\x29\xfa\x2a\x2f\xc9\xad\x89\xcc\x7d\x51\xd5\x7d\xa0\x36\x27\xf1\x12\xd9\xf2\x32\xf1\xcb\x2d\x90\x6c\x4a\x88\x49\x80\x01\x40\x2d\xfe\xf4\xb7\x00\x52\x8a\x13\x47\x99\xba\x99\x33\x53\x35\x75\x8e\x5f\xec\xc2\xf2\x47\xa3\xf1\xeb\x6e\x10\x7e\x05\x13\x2c\x48\x53\x2a\xc8\x71\x8d\x25\xaf\x2b\x64\x0a\x14\x4a\xc5\x50\x01\x59\x12\xca\xa4\x02\x41\xd9\x23\xa6\xbb\x5e\x86\x4c\x09\x5a\x34\x4b\xbc\x44\xb5\xe1\xe2\x71\x08\xa2\x91\x92\x12\xb6\xa2\x65\xd9\x33\x62\x94\x21\xa8\x15\x42\xde\xe9\xb2\x76\xa4\x04\xb5\x22\x0a\xc6\x07\x05\xa8\x08\x65\x4a\xeb\xf7\xf6\x43\x86\x3d\x80\x57\x70\xce\x33\x52\x1a\x13\x28\x5b\x42\xc6\x99\x12\x24\x53\x40\xf2\x5c\xa0\x94\x28\x81\x21\xe6\xa0\x38\xa4\x08\x12\x15\x6c\xa8\x5a\x01\xb2\x35\xac\x89\xa0\x24\x2d\x51\x0e\x7a\xb0\x9f\xaf\x25\x01\x68\x3e\x04\xd7\x75\xcd\xdf\xa8\x56\x28\xb0\xa9\xba\x1d\xbc\xcf\x87\x10\xb9\x51\xdb\x97\x72\xae\xa4\x12\xa4\x9e\x23\x0a\xd9\xce\x7d\x0b\xfd\x13\x5a\x7b\x27\xb6\x13\x0e\xac\x81\x35\xb0\x4f\x54\x56\x9f\xb8\x91\x63\x39\x27\xb4\x2e\xe4\xc9\x55\x75\x73\xb5\x4d\x37\x8f\xcd\xc3\xa7\x4f\x93\xa2\x79\xba\x49\xb7\xd3\xe4\x1a\x6f\x2e\xc7\xe7\xfc\x69\xb7\xf3\xfd\x68\x7d\xc5\x96\x77\xeb\xf9\xc5\xe7\xf3\x4f\x8f\xfd\x3f\x10\x75\xf7\xa2\x77\x45\x30\xbd\x0c\xaa\xc7\x2f\xf7\xf8\xf9\xfe\xec\xde\xf9\x32\x6f\xec\xe0\xf7\x3a\x3f\x75\x1f\x3f\x70\xfb\xc6\xad\x56\x64\x35\x1f\xf9\x0b\xf4\x99\xdd\x8a\xee\x5d\x95\xec\x3d\xd5\x6e\x40\x6f\x1f\x99\xa2\x6a\x37\x23\x99\xe2\x62\x37\x84\x7e\xbf\xeb\x21\x2c\x5b\x71\x71\x8d\x35\x97\xf4\xbb\x2e\xca\xd6\x9c\x66\x78\xcb\x6a\xa2\xdd\xd7\xef\xf7\xcc\xe9\x5c\x10\xca\x7e\xc8\x4a\x77\x88\xf0\xfa\xba\x85\xe5\x4d\x0f\x9e\xc3\xd1\xda\xf2\x0a\x2e\x9b\x0a\x05\xcd\xe0\xfd\x04\x78\x61\x40\x79\x86\x44\xa7\x71\x38\x33\xdf\xee\x66\x8d\xf6\x07\x03\x25\x95\x4a\xcf\x64\x3c\xc7\x97\x4c\xd5\x82\xaf\xa9\xe9\xe0\x46\xfb\x99\x01\x7b\x43\xff\xf0\xa0\x5d\x7f\xe0\x78\xc1\xc0\x76\xbd\x41\xec\x7f\x7f\xd8\xb6\x33\x71\xcf\x38\xbf\xbf\x94\x0f\xf2\x3e\xbc\x49\xb3\x07\x3f\xba\x0c\xed\xdb\xab\xc5\x99\x3f\xf9\xfc\xf0\xa5\x9a\x3d\xbe\x9b\xbf\xdb\x6c\x67\x67\x37\xc9\x8e\xdf\xde\x4e\xa2\xbc\xe8\x7f\x2f\x6f\xc7\xd1\xc0\x0e\xec\x81\x1d\x59\xc7\xf4\x27\xe8\xc8\xcd\xfd\xd4\x2d\x1c\xfa\x21\xbd\xc5\xab\xf8\xf4\xf6\xf6\x6a\xf4\x6e\x2c\xee\xcf\xd3\x51\x46\xe2\x8b\xd3\x8b\x2f\x45\x95\x8e\x97\xa2\x49\xfb\x9d\x93\xa6\x1d\xd9\x87\xa3\x78\x3f\x81\xb7\xd0\x1d\xc7\x31\xf6\xbd\x6e\xf2\x39\xd1\xfe\x81\x1c\xeb\x92\xef\x30\x87\x45\x45\x84\x82\x71\x87\x94\x84\x82\x0b\xe3\xd1\x25\x5d\x23\xfb\xc6\x97\x2f\xb1\x83\xa3\xdc\x59\xdb\x22\x8a\xac\x34\x0a\x2c\xdb\x72\xd3\xdc\xf3\x89\xef\xb8\x7e\xe8\x25\x88\x63\x2b\x1c\x7b\xb1\x63\xb9\x76\xe1\x85\x91\xfd\x13\x42\xad\x6d\xec\x24\x13\xcf\x1b\x8d\xa2\x99\xe3\x4e\xfc\xdc\x76\x62\x1c\x45\x0e\xf1\xad\xdc\x8d\x82\x28\x1d\x79\xa9\x9d\xe1\xcc\x9e\x1d\x63\xd9\xda\x66\x5e\x12\xe1\xc8\x09\x8b\x91\x3b\x25\xce\xd8\x8a\x7d\x7f\x16\x11\x7f\x64\x07\xb6\x3f\x72\x82\x3c\xf2\x67\xe3\x11\x46\xd8\x51\x7f\xc6\xd7\xa4\xdd\xf5\x33\x46\x53\x14\x8c\x94\x2b\xa4\xcb\x95\x92\xbf\xc6\xb7\xf3\x27\xf9\xfe\xc6\x84\xff\x1f\xe1\xce\xc0\x71\xad\x81\x6d\x07\xc7\x10\x5c\xa4\xdb\xf4\x6c\x9c\x3e\xac\xe2\x0f\x77\x4a\x5e\xed\xee\x4e\xf3\x9b\xb9\x20\xde\x75\xbd\x48\x3c\x95\xae\x65\x40\x98\x6d\x7f\xde\x9c\x26\xce\xd3\x0b\xc4\x1d\xd7\x1b\x84\xce\xc0\x76\xc2\x63\xf2\x57\x95\x93\x2d\x2a\x31\xa5\x64\x71\x71\xe7\x2d\x6f\xd7\xe1\xfd\xe9\xaa\x5e\x5e\x6f\x78\xb4\xe1\xb3\x85\x7c\xb7\x7a\x38\x4d\x4f\xa9\x4b\x92\x68\xfb\x73\xc2\xcd\xe1\x1c\xe5\xdb\xf9\x0b\x00\xff\x09\xdf\xb6\x1b\x38\xd3\x6c\x54\x44\x41\x18\x3b\x9e\x3b\x75\xbc\x22\xb1\xa6\x63\xcf\xf1\x73\x07\x6d\x2b\xb1\x22\xc7\x71\xb3\x70\xf2\x53\xbe\x43\x3b\xb2\x26\x61\xe8\xda\x56\x8e\x59\x94\x8c\x9c\x28\x21\x91\xe5\x4c\x33\x2b\x9e\x15\x89\x33\x99\x05\x1e\xc6\x56\x98\x1d\xe7\xdb\x8e\x5c\x3b\xb4\xbc\xc8\x0e\xbc\xa8\xc0\xa2\x40\x2f\xf6\xac\x99\x3b\x49\x92\xdc\x25\x61\x9a\xa5\xa9\x95\xf9\x49\x32\xeb\xf8\xbe\xe6\xb5\x54\xf8\x82\xf0\x9c\x2f\x6b\xa2\xb2\xd5\xaf\xc1\xed\xfe\x49\xb8\xf7\xab\xc3\xeb\x9b\x8f\x93\x8f\x90\x09\x24\x0a\x41\x74\xa6\x6a\xc0\x8d\xce\x9b\x7f\xbb\x8c\xde\x7a\xe0\x18\xf1\xee\xdf\x0b\xbc\x95\xbb\xb1\x3d\x0d\x1d\xd7\xf1\xc7\x98\x8f\x3d\x7b\xea\x45\x96\xef\x4e\xc3\xd0\x89\x22\x12\xc5\x33\x67\xea\xda\xb6\xed\xff\x14\x78\x67\x1c\x59\x33\x7b\x42\x8a\x09\x09\x49\x32\xc1\xd4\x19\xdb\xa1\x9f\x7b\x23\xcf\x4d\x22\x3f\xf2\x42\x77\x6a\xdb\xa1\xed\x1e\x07\xde\x8b\x53\x8c\x5d\xcb\x1a\xbb\xc1\xb8\xf0\x1d\x37\x4a\x67\x41\x3c\xf5\xc6\x5e\xec\x07\xd6\x6c\x16\x15\xe1\x2c\x08\x9d\xa9\xf7\xec\x1a\xa3\x6f\x2d\xcf\x81\x87\xc9\x47\xb8\xfc\x78\x03\xb7\x8b\xe9\x7f\xf5\x00\xb0\x4a\x89\xc8\x48\x8e\x82\xeb\x51\xbf\x14\x03\xb6\x75\x14\xce\x97\xfc\x38\xce\xc0\xb6\x8f\xe6\xcb\x64\xe9\x4e\xb3\x44\x89\x4f\x77\xe3\xed\xe6\x29\x78\x0c\xe4\x4d\x4c\x1f\x16\xd7\x4f\xea\x29\x9e\x84\xbb\xdb\xa7\x7a\x34\xbf\x9e\xce\x9e\xc4\x2d\xbf\xeb\xbf\x5c\xc1\x24\x7c\xc7\x1e\xd8\xf6\x8b\x0b\xec\x7e\x85\xb3\xd3\x0d\xdd\xfe\x8e\xac\xf9\x3d\xb9\xfb\xf2\xf8\xe1\xac\x62\xef\x16\xc9\x87\xc9\xe7\xa7\x22\xc4\xd3\x0b\x1e\x28\xc1\xe9\xf2\x61\x5b\x85\x89\x7f\xfd\x73\x42\xab\xd6\xbb\xc7\x08\xb5\xff\x5e\x42\x93\x99\xe7\x07\x99\x1d\xb8\x51\x40\x02\xaf\xc8\xbd\x99\x97\x06\x31\x29\x6c\x97\x44\xc1\xa4\xb0\x46\x7e\xe0\x24\xc4\xb2\x7e\x4a\x68\xe0\x86\xa3\x68\xec\x4e\x9c\x24\x71\xc7\x99\x63\x05\x93\xd8\xf3\xed\x38\xf5\xbd\x28\x76\xac\x28\xce\xe2\x69\x10\xc6\xb1\x75\x9c\xd0\x91\x8f\x9e\xe3\xe6\xe3\x2c\xf4\xac\x74\x34\x8e\xac\x22\xb6\x02\xdb\x75\xd1\xf6\x03\xcb\x2e\xe2\xc8\x8a\xe3\xc8\xf5\x83\xef\x08\xfd\x8a\xd4\x33\x20\xff\xd5\x30\xfe\xd5\x28\xfe\x07\xc4\x7f\x26\x88\xaf\x60\x42\x14\x81\x85\xe2\x82\x2c\xb1\x27\xdb\xdf\xed\x77\xfa\x9c\xa8\x95\xf1\x4c\xa9\xbf\x06\x27\x23\x28\x68\x89\x3d\x80\x9a\xa8\xd5\x10\x4e\x54\x55\x9f\x7c\x7d\x2f\xf8\xdf\x9c\x28\x32\x30\x23\xf3\x54\xeb\x8e\x39\x2b\xe8\xb2\x11\x44\x51\xce\x0e\x0b\x64\xa6\x75\xf1\xeb\xcb\xb4\x02\x2f\x56\x4b\xb2\x8c\x37\x4c\x49\x78\xc4\x1d\x74\xbb\xe8\x91\xae\x51\xaf\xf3\x88\x3b\xdd\x8c\x9d\xe2\xbe\x4b\xcf\x7d\xcf\x14\x8a\x82\x64\x08\x1b\x0d\x90\x01\x21\x99\xbf\x07\xc2\x72\x98\x3b\x73\x58\xa0\x58\xa3\x30\x77\x1b\x64\xfa\xf2\xd2\xd3\xd7\x92\x77\x5c\x2a\x46\x2a\x1c\xc2\xe1\x1b\xbf\xf7\x0a\xe6\x5c\xa8\x4e\x46\x4b\xfc\x78\xaa\x1e\x34\x84\xc8\x8a\x1c\xbd\xbc\x8e\xd2\xb7\x8a\xbf\xad\x11\x05\x64\xcf\xbd\x26\x7b\xb5\x53\xb7\x4e\x5a\xd4\x98\xd1\x62\x07\xd3\xad\x32\x5f\x04\xf0\x7e\xfe\xcc\x5a\x2d\x0a\x19\x61\x90\x22\x08\x24\xd9\x0a\x73\x20\x0a\x68\x01\x29\xae\x28\xcb\xe1\x32\xb9\xd1\x32\xd8\xcd\x7e\x3f\x1f\xc2\x66\xb0\x1d\xec\x06\x4f\xed\x11\x68\xab\x1b\x89\xf9\x21\x10\xf4\xbe\x4b\xb2\x43\xa1\x0f\xc2\x98\x6b\xc2\xd8\x8c\xbe\xa1\x15\xf2\xc6\x6c\x93\x01\xaf\x91\x75\xcf\x38\x0c\x33\x63\xb5\xbe\xde\xe9\xcd\xc8\x1e\xec\x9b\xbb\x29\x43\xe8\xbb\x96\xec\x1b\x95\x8a\x32\x5a\x35\x15\xe4\x58\x92\x9d\x59\x17\xd7\x28\x76\x50\x3b\x35\x08\x94\x35\x67\x12\xb5\x12\x59\x73\x9a\x83\xa2\x95\x5e\x85\x28\x45\xb2\x47\x69\x04\x48\xfe\xb9\x91\x0a\x52\xa2\xed\xe6\x0c\x56\x5c\x2a\x3d\x93\x37\x22\x43\x09\xaf\x17\x8b\xc9\x6f\x30\x9e\xdf\xfe\x06\x19\x17\x28\x61\x30\x18\xbc\xe9\xde\x9f\xf8\x23\x50\x06\x25\x5f\x9a\xc8\x1f\x42\x5f\xdb\xa7\x6d\x95\x4d\x85\x39\xa4\x3b\xbd\xad\xf6\x0c\xfa\xda\x8b\xdb\xff\x79\xbd\x26\x65\x83\xd7\x48\x72\xf8\x6f\x70\xde\x00\x95\x50\xa2\x34\x57\x5c\x06\xa6\x0f\x52\x2c\xf9\xe6\x37\xed\x3d\x06\xd9\x8a\xb0\x25\x1e\xf6\x31\x31\x7b\x54\x1c\xb6\x3d\xf8\xb6\x71\x08\x7d\xdf\xb2\x2a\x69\x42\xf1\xaa\xc1\x06\xbf\x43\xc0\x78\x86\xc8\x1d\xcb\x56\x82\x33\xde\x48\x7d\x8b\xce\x50\x4a\xca\x96\xbd\x2f\x7a\x42\x0b\x48\xfb\x30\x27\x5b\x1c\x9a\x2a\x45\xa1\x0b\x86\xce\x83\x28\xe4\x49\xb7\x35\xd1\xdd\xc9\x37\xb4\x2c\x35\x2b\xa4\x2c\x79\x46\x54\x4b\x8b\x54\x44\xa8\xa6\xee\x81\x9e\x7f\xdf\x4e\xd4\x35\xc5\x32\xfa\x33\x81\x28\xa1\xa9\xb5\x47\x21\xdb\x65\x25\xca\x16\x80\x76\x09\xed\x90\x0d\xa1\xe6\x45\xaf\x3b\x4b\x1d\x5d\xd0\x75\xdf\x13\x6a\x18\xb8\x58\xb4\x39\xd9\x14\xb6\xce\x46\x81\x4a\x50\x94\xc6\x98\x4d\x87\x20\x01\x45\xa4\x2e\x6c\xfa\xd7\x75\x3b\xc0\xd4\x37\x9d\x58\x90\xa9\xf1\x8a\x50\x06\xd2\x04\x05\xcd\xbe\x75\x99\x79\xc4\x34\x03\xb4\x67\x74\x68\xdc\x5e\x9f\x0f\x61\x23\x87\x27\x5f\x9f\xe3\x86\x71\xec\x79\xad\x21\x3a\x76\x94\x20\x4c\x12\x83\x2f\xd4\x9c\x97\x50\x91\xed\xc1\x30\xc5\x41\x22\xcb\xb5\x51\xcf\x86\xf1\xb5\x09\x8e\x8a\x6c\x0f\xf6\x39\x9d\xaf\x7e\x2c\x49\x75\x9a\x59\x93\xd2\xe8\xee\x5a\xe7\x11\x6d\x7a\xd6\x08\x61\x1e\xda\x9e\xcd\x58\x11\x09\x29\x22\x83\x1c\x15\x66\x0a\xf3\x1e\x1c\x04\xf4\x7a\x1a\x1c\xa7\x8b\xa4\xfd\x03\x6f\x49\x0b\xec\x58\x54\x5c\x87\x73\xbb\x46\xc6\xab\x8a\x2a\x73\x32\x84\x75\x25\xe7\xf0\xf0\xab\x71\xd1\xfe\xca\x8c\x43\xdf\x82\x0d\x3b\x24\x7a\x5f\xed\xb8\x73\x5a\xa0\xac\x09\x1b\x42\x3f\x0a\x03\x6b\x65\x30\x3d\x54\xe2\x23\xfe\xdf\xd7\xe1\x2e\x73\x61\x89\xba\xc4\x6e\x56\x34\x5b\x1d\x6a\x34\x74\x09\x78\x6f\x69\x77\xb9\xe1\x1a\xe1\xee\x33\x31\xd7\x31\x6a\xec\x6b\xa4\xe2\x55\xb7\xc8\xbe\x3a\x74\xaf\xcf\x5d\xde\xbf\x34\x89\xb8\xaf\x6f\x03\xfd\xc3\x1b\x73\x7b\x4c\xad\xf0\x61\xdd\xac\xa4\xda\xd7\x26\x63\xbe\xde\xe8\x10\xfd\xd2\x50\x81\xb0\x91\xc0\x05\xd0\x3a\xeb\x1e\x9e\x49\x5a\x1a\x37\x66\xe6\x03\xb5\xc5\xf9\xcd\x73\x9e\x56\x4a\xd5\xc3\x93\x13\x1d\x40\xa5\x4e\x3d\xc3\xd8\xf7\xfc\x36\xb3\x91\xad\xc9\x6c\x7b\xa0\x97\x44\xef\x89\x66\x46\xaf\xee\x92\xdd\xb7\x30\x51\x06\x1b\xa4\x66\xb6\x63\xc1\xe9\x06\x29\x30\xbe\x69\xf1\x3a\x25\x72\xae\x67\x1b\xbe\xf6\x3f\x66\xe8\x29\x91\x50\xd2\x8a\x76\x17\x98\x9c\x16\x05\x1a\x92\x0e\x27\x74\x48\x63\x3a\x14\x97\x44\x9e\x9b\xd1\xfb\x37\xf3\xb1\xf9\xe0\x36\x31\xde\x69\xea\xd6\x24\xcf\xcf\x70\x37\x04\xf7\x79\xe3\x35\xae\xf9\x23\x9a\x76\xdf\xdf\x37\xb7\x8c\x8c\x0d\x5f\x43\x88\xbe\x6b\x9f\x0b\xdc\x77\xd9\x5f\xa5\x58\xa1\x2e\x28\x53\x43\x88\xbf\x69\xbb\xd1\xce\x28\x50\xcc\x04\xaf\x86\x60\xfb\x87\x3d\xee\x8b\x8d\xe2\x26\xbf\xb4\xbe\x63\x5f\xcf\xf3\xb9\x17\xbb\x93\xcb\xf3\xf6\xdf\x07\x04\xd2\x92\x67\x8f\xa6\x8e\xb7\x07\x08\x4a\xd0\xe5\x12\x85\x09\x27\x7d\xb3\xc3\xad\xda\xa7\xa6\xb6\x3c\x05\xd6\xbe\x3e\xfd\x68\x61\xa1\xf3\x3f\x67\xe5\xb3\xfa\x20\x0f\xa1\xb4\x37\xe9\xab\xb4\x2e\x17\xdf\xca\xdb\x7e\xa7\xfe\xcf\xce\x3a\xbd\x57\x40\xd8\x0e\x72\x4c\x9b\xe5\xb2\xab\xfe\x3a\x36\x4d\x5d\x59\x72\xd0\x8e\xe8\x99\xde\x36\x07\x20\x33\xe1\x64\x5a\x74\xd9\xd5\x73\x7a\xa0\xff\x1a\x42\x41\x4a\x89\x66\x54\x5d\x0b\x5e\xb4\x24\xef\x85\xf5\xed\x43\xb7\xee\x87\xf5\x5a\xb4\xba\xff\xfb\xd4\x02\xb3\x8e\x30\x25\x1a\xec\xfd\x5f\x00\x00\x00\xff\xff\x32\xfa\x73\xa5\xec\x1a\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6892, mode: os.FileMode(420), modTime: time.Unix(1575472783, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xc9\x6e\x1c\x37\x10\xbd\xf7\x57\x10\xcc\xc1\x97\x59\xb8\x6f\x37\x43\xf1\x12\x08\x11\xe2\x38\x80\x9c\x63\x91\xac\x96\x1a\xa3\x5e\xc2\x66\x4b\x1e\x1b\xfe\xf7\xa0\x67\x46\xb6\x6f\x51\x6e\x64\x75\xbd\xf7\x58\xd5\xef\x25\x1c\x6a\xe9\xda\xe5\x0e\x6f\xb0\x3e\x8d\xe5\x10\x48\xc5\xb9\x76\xc3\x5d\x83\xf5\x1e\x0b\x2e\x7d\x68\x08\x81\x94\xc6\x65\xa8\xf3\x7a\x26\xa4\x87\x6e\x08\xe4\x74\x24\xe4\x80\xc7\x40\x5e\x7d\xa5\x90\x73\xc1\x79\xa6\x81\x3a\x1f\x19\x38\xa3\x9d\x4c\x4a\x29\x05\xa9\xcd\x96\x47\x65\x24\xb2\x2c\x93\xd6\x80\x5c\x71\x01\x9a\x6e\x68\x2a\xc7\xa9\x8e\x34\x7c\xa5\xa9\x9b\xee\xb1\xd0\x40\x01\xe7\x2d\x17\x6e\x9b\x6a\x59\x1b\x4e\xe5\x8a\x9f\x2b\x0d\x34\x59\xeb\x5b\x27\xad\xcf\xd6\xb2\xec\x45\x6a\x13\xcf\x39\x2b\x70\xad\xe4\x59\x03\x83\x9c\x5c\x2b\x80\x45\x01\x5c\x31\x2e\x2d\xcb\xd2\x48\xd6\x4a\x97\x58\x72\xf0\x9d\x6f\x82\x02\xfd\xbc\xca\x76\x8f\x34\x50\x69\x12\x37\x0e\xad\x8c\xad\x77\xac\x45\xab\x23\xb3\xc2\xb6\xce\x33\xb0\x1c\x32\xfd\xb6\xa1\x87\xdc\xd2\x40\xe7\xd3\x83\xe9\xe9\xfa\x83\x24\x1f\x1e\x70\xa0\x41\x8a\x0d\x1d\x68\x10\x46\x70\xa5\x36\x74\xa2\x81\x6f\x68\xa1\xc1\x6d\xe8\x0c\x0f\xeb\x00\x19\x79\x44\x6e\x50\x26\xef\xb8\x57\x2a\x73\x4c\x20\xa2\x8b\xc2\xa2\x42\x83\x2c\xea\xd8\x46\x25\x23\x32\x69\x0d\xe8\xec\x9c\xf3\x2d\x18\xeb\x41\x38\x2e\xc4\xfa\x90\x1e\xd2\xba\x8a\xc4\x85\x8b\x8e\x6b\xad\x75\x04\x8e\x90\x6d\x02\xf4\xcc\x30\x74\x4e\x09\x68\x13\x38\xa9\x4d\x66\x46\x69\x1d\xb3\x07\x6d\xb5\x88\x60\xda\x94\x98\x17\xd8\xae\x4c\x5d\xa6\x81\x2a\x8d\xcc\x30\x30\xdb\x2c\x00\xb7\x4a\x46\xb7\xf5\x42\xb4\x5b\xa5\x9c\xf0\xca\xfb\x2c\x6d\xa6\x1b\xfa\x88\x65\xee\xc6\x75\xc8\x6f\xaf\x2e\x3f\x7e\x82\x79\x7e\x1a\x4b\x0e\xe4\xd5\x73\xe9\xe2\x81\x40\x5e\x6a\x81\xa6\xe9\x32\x0e\xb5\xab\xc7\xdf\x72\x20\x94\x7d\x7e\xb1\x77\x9a\x66\xb5\xee\xd5\xfd\x6a\xc5\x1f\x06\x3d\xfb\xb3\x3b\x73\x65\x25\xb5\x97\xc9\x72\xdd\xe6\x2c\x79\x32\x9c\x2b\x0e\x31\x33\x05\xde\xb7\xd9\x38\x21\x92\xd3\xda\x39\xad\x52\xca\x28\x3d\x68\xe3\x14\x5a\xd0\x26\x83\xb0\x99\x9e\xc8\x66\x4c\x05\x6b\x20\x74\xbf\x7f\xfd\xd0\x25\x3c\x57\xbf\x4f\x4a\xf5\xbb\xf2\xf4\x08\x6f\xde\xea\x2f\x9f\xa2\x30\x6f\xbf\xf8\x92\x3e\x4c\xbf\xde\x7e\xd4\xf6\xaa\xbe\xf9\xf3\xfd\x74\x83\xf7\x9f\xae\xfe\x48\x37\xe3\xfb\x77\xd7\x4b\xfd\xf0\x37\x6d\x9a\x5f\xc8\xeb\x4b\x9e\xd6\xf4\x90\xb9\x8e\x05\xee\xb0\xf9\x39\x64\x07\x3c\xae\x65\x0c\x64\x5f\xfb\x69\xff\xfc\xa9\x69\xfe\x59\x70\xc1\xb5\x63\x58\xfa\xdb\xb1\x1c\xb0\xcc\x81\x88\x86\x90\xa7\xd3\xe5\x16\xba\xfa\x57\xd7\xe3\xef\x1f\x03\xe1\x4d\xb3\xd2\xac\xcd\x93\x98\xce\xab\x99\x96\xf8\xd0\xa5\xeb\x35\xb3\xbb\xdd\x7e\xb7\xdb\xc7\xa5\x7b\xc8\xfb\x82\xf3\xb8\x94\x84\xf3\x7e\x12\xd3\x35\x1e\x77\xd3\x12\x77\x13\xf6\x67\x4c\xe9\x1e\xa1\xe2\x7f\x83\x0e\x2b\xf0\x04\x9a\xbb\xbb\xa1\x1b\xee\x5e\xa8\x79\xe9\xfe\xff\xba\x3f\x01\x9f\xb5\x1b\x18\xd2\xfd\x58\x2e\xe2\x53\xc1\x34\xf6\x7d\x57\x03\xa9\x65\xc1\xe6\xdf\x00\x00\x00\xff\xff\xdc\x3c\xc5\xc4\xef\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1263, mode: os.FileMode(420), modTime: time.Unix(1574948666, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
