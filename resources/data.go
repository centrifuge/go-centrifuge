// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x59\x73\x1b\x37\x12\x7e\xe7\xaf\xe8\xa2\x5e\x92\xaa\x1d\x6a\xee\x83\x55\xa9\x2d\x9e\xb6\x63\x59\xa1\xae\x28\xd6\xcb\x1a\x83\xe9\xe1\xc0\x1a\x02\x63\x00\xc3\xc3\xbf\x7e\x0b\x98\xa1\x2c\x5b\x96\xb2\x9b\x54\xb2\x0f\xcb\x17\x92\x00\xba\xd1\xc7\xd7\x1f\x1a\x38\x81\x39\x96\xa4\xad\x35\x14\xb8\xc5\x5a\x34\x1b\xe4\x1a\x34\x2a\xcd\x51\x03\x59\x13\xc6\x95\x06\xc9\xf8\x3d\xe6\x87\x01\x45\xae\x25\x2b\xdb\x35\x9e\xa3\xde\x09\x79\x3f\x06\xd9\x2a\xc5\x08\xaf\x58\x5d\x0f\xac\x32\xc6\x11\x74\x85\x50\xf4\x7a\x79\xb7\x52\x81\xae\x88\x86\xd9\x83\x06\xd8\x10\xc6\xb5\xd1\x3f\x38\x2e\x19\x0f\x00\x4e\xe0\x4c\x50\x52\x5b\x13\x18\x5f\x03\x15\x5c\x4b\x42\x35\x90\xa2\x90\xa8\x14\x2a\xe0\x88\x05\x68\x01\x39\x82\x42\x0d\x3b\xa6\x2b\x40\xbe\x85\x2d\x91\x8c\xe4\x35\xaa\xd1\x00\x8e\xf2\x46\x25\x00\x2b\xc6\x10\x04\x81\xfd\x8d\xba\x42\x89\xed\xa6\xf7\xe0\x4d\x31\x86\x34\x48\xbb\xb9\x5c\x08\xad\xb4\x24\xcd\x0a\x51\xaa\x4e\xd6\x81\xe1\x29\x6b\xc2\x53\xcf\x4f\x46\xee\xc8\x1d\x79\xa7\x9a\x36\xa7\x41\xea\xbb\xfe\x29\x6b\x4a\x75\x7a\xb1\xb9\xbe\xd8\xe7\xbb\xfb\xf6\xee\xfd\xfb\x79\xd9\x7e\xbe\xce\xf7\x8b\xc9\x25\x5e\x9f\xcf\xce\xc4\xe7\xc3\x21\x8a\xd2\xed\x05\x5f\xff\xba\x5d\xbd\xfb\x78\xf6\xfe\x7e\xf8\x3b\x4a\x83\xa3\xd2\x5f\xcb\x78\x71\x1e\x6f\xee\x3f\xdd\xe2\xc7\xdb\xb7\xb7\xfe\xa7\x55\xeb\xc5\xbf\x35\xc5\xab\xe0\xfe\x67\xe1\x5d\x07\x9b\x8a\x54\xab\x69\x74\x85\x11\xf7\x3a\xa5\xc7\x50\x4d\x8e\x91\xea\x1c\x30\xee\x23\xd7\x4c\x1f\x96\x84\x6a\x21\x0f\x63\x18\x0e\xfb\x19\xc2\x69\x25\xe4\x25\x36\x42\xb1\x6f\xa6\x18\xdf\x0a\x46\xf1\x86\x37\xc4\x84\x6f\x38\x1c\xd8\xec\xbc\x23\x8c\x7f\x17\x2b\x7d\x12\xe1\x87\xcb\x0e\x2c\x3f\x0e\xe0\x31\x38\x3a\x5b\x4e\xe0\xbc\xdd\xa0\x64\x14\xde\xcc\x41\x94\x16\x28\x8f\x20\xd1\xeb\x78\xc8\x59\xe4\xf5\x52\xd3\x63\x62\xa0\x66\x4a\x1b\x49\x2e\x0a\x7c\x8a\xa9\x46\x8a\x2d\xb3\x13\xc2\xea\x7e\x64\xc0\xd1\xd0\xdf\x4d\x74\x10\x8d\x7c\x3f\x1a\xf9\xae\x3b\x0a\xfd\x6f\x93\xed\xf9\xf3\xe0\xad\x10\xb7\x67\x8c\xd1\x8b\x5f\x77\xd7\xd5\xf5\xf4\x7d\xbc\x7f\x4b\x57\xe2\xac\x8c\x2f\x2f\xde\xff\xbc\x6c\x76\xa5\x27\x93\x68\x77\xb6\xf7\xef\x2e\x83\x66\x56\x78\xc3\xef\xa9\x4f\xe3\x91\xef\xb9\xcf\xa9\xbf\xb8\x7b\x37\x49\x5f\xad\x5e\xcb\xed\xe2\x6e\x9a\xed\x8a\x7b\x71\x43\x27\x93\xcd\xec\xee\x75\x93\xe1\xe1\x70\x17\x5e\x2d\xd2\xf5\x52\x06\xd5\xf5\xf9\x6f\xc3\x3e\x46\x8b\x1e\xd8\x0f\x99\x78\x33\x07\x07\xfa\x6c\x3c\x07\xfd\xb0\x17\x3e\x23\x26\x3c\x50\x60\x53\x8b\x03\x16\x70\xb5\x21\x52\xc3\xac\x47\x94\x82\x52\x48\x1b\xd0\x35\xdb\x22\xff\x2a\x94\x4f\x51\x07\xcf\xc2\xce\xdd\x67\x98\xcf\xe7\xe9\x34\xc9\x7d\x4c\x5c\x8f\x66\x65\x52\x64\xee\x32\xf5\x48\x96\x78\x71\x14\xfb\x74\x32\x8b\xa2\x30\x0f\x5e\x00\xa8\xbb\x0f\x62\x0c\xf2\x34\xcf\xca\xb2\x8c\xdd\x89\x87\x6e\xe0\x95\x85\x9b\xc4\x89\xe7\x67\x69\xe1\x46\x49\x18\xd1\x72\x4a\xfc\xe7\xa0\xec\xee\x17\x5e\xec\x87\x93\x45\x98\xc4\x31\x96\x01\x99\x84\x81\xeb\x7a\xbe\x3f\x8f\x16\x13\x12\x91\x10\x27\x49\x39\x8b\xb2\x24\xed\x41\xff\x56\x6c\x49\xe7\xf5\x23\x88\xe6\x28\x39\xa9\x2b\x64\xeb\x4a\xf7\x10\x3a\x39\x39\xe9\xe3\xd9\x49\x2c\x27\x17\xfd\x7f\x07\x6e\x0d\x4d\x31\x5e\xb6\x92\xc0\x41\xb4\xb0\x36\xfc\xca\x01\xa5\x14\xd2\x80\xe3\xba\x62\x0a\x24\x7e\x6a\xcd\x2e\x4c\x01\x17\x1a\x54\xdb\x34\x42\x6a\x2c\x20\x47\x4a\x5a\x85\x46\x52\x5a\xec\x9b\x25\xb2\xe5\xdc\x70\xa4\x65\x40\xa5\x89\x36\x05\xd0\x9a\xa1\x11\x5c\xb6\xbc\x1b\x77\x9c\x7e\xec\x27\x22\x69\xc5\xb6\x38\x1a\xfe\xa3\x37\x0a\x60\x67\xea\x47\x0b\x28\xc4\x3f\xad\x04\x81\xda\xb2\x6f\x43\x24\xd3\x87\x6e\x23\xab\xe5\xde\xfa\x83\xeb\x71\xf7\xf7\x43\xbf\xc0\x71\x68\x45\x18\xff\xa9\x9b\x76\x1c\x63\xed\x4f\x81\x1b\xb8\x21\x38\xce\x8e\xc8\xa6\xff\x72\x72\x22\x25\x43\x09\x51\x9c\xba\xae\xeb\x82\xe3\x70\xe1\x10\x4e\x19\x72\xed\xe4\xb5\xa0\xf7\xaa\x1b\x53\x28\xb7\xe8\xd4\x26\xa8\xe0\x38\x1b\xb2\x77\x1a\x53\xa2\xe0\x47\x46\x48\x71\xd2\xa8\x4a\xe8\x7e\xd0\x8e\x6d\x18\xff\xea\xaf\xb1\x99\x50\xcd\xb6\x08\x8e\x63\xa0\x69\x42\x24\xca\xf2\x69\x24\xc0\x71\x8a\xdc\xa1\x62\xd3\x98\xf5\x82\x83\x52\x85\x71\x89\xd0\x0a\x1d\xc5\x3e\x23\x84\x6e\x16\x83\xe3\x7c\x54\x82\xcb\x86\x3a\x95\x50\x5a\x01\xa9\xeb\x47\x63\x8c\x6b\x94\x25\xa1\x68\xc6\x3f\x7c\x9d\xee\xa7\xc1\xfc\x5e\xe6\xa7\xc6\x7d\x2c\x4c\x25\x71\xec\x0c\xd1\x02\x6e\x31\xbf\x32\xe3\x5a\x81\x8d\x89\x84\x52\x8a\x0d\xb4\x5c\xcb\x56\x19\x48\x08\xc9\xd6\x8c\x8f\x61\x34\x1a\x3e\x9b\x4f\x53\xb2\x4f\x72\xf9\xc1\x71\x5a\xae\x48\x89\x0e\xee\x1b\xa1\xf0\x03\x94\x35\x59\x7f\x03\xe0\xff\x8e\xa7\xfd\x3f\xc9\xd3\x5f\xd5\xd2\x7f\xcc\xd4\x9e\x1b\x8e\xbc\x28\x1c\x79\xe9\x28\x7a\x72\x2c\x1f\xa9\x74\xa5\x62\x46\xf0\xa6\x5d\xde\x9d\xb7\xde\xab\xfd\x56\x1d\xa6\xd7\x57\xf2\x5a\x65\x5b\x3d\x8d\x73\xfd\x6e\xc2\x5f\x2f\xc5\xd9\xc7\xfc\xfe\xf3\x8c\x0c\xbf\xa3\x3e\x1a\x79\x69\x34\xf2\x83\xe4\xd9\x0d\x66\xaf\xe8\x8e\x5d\x7f\x14\x6f\x6f\x5f\x97\x53\x12\xa6\xfe\xcd\x4a\x13\xbc\xd9\x9f\x9f\xed\x8a\xf4\x73\xce\xa7\xde\x55\xb2\xc3\xc9\xdd\xcd\xfe\xee\x65\xae\xb6\xa4\xf1\x2c\x53\xfb\x7f\x01\x55\xbf\xc0\xd4\x41\x1c\xe7\xa1\xe7\xc5\x3e\x89\x82\xb2\x48\xa2\x22\x8b\x8a\xc0\x2b\xe6\x71\xe1\xcd\xc2\x22\x0d\xf2\x79\x18\xc4\xd3\x29\xbe\xc8\xd4\x49\x34\x25\x74\x9a\xf9\x93\xc0\xc5\x64\x51\x7a\xf3\x20\xa5\x3e\x09\xbc\x69\xb8\xf4\xb3\x20\x2a\x82\x6c\x19\x27\x29\x7d\x81\xa9\xd3\x24\x75\xd1\xf3\xc2\xc0\x0d\xe2\x3c\xa4\x59\x92\x95\x0b\x3f\x0a\x3c\x3f\x25\x61\xea\x26\xa1\x9b\x05\xa5\x97\xa5\x49\xcf\xd4\x97\xa2\x51\x1a\x9f\x70\x75\x21\xd6\x0d\xd1\xb4\xfa\x63\x5d\x48\xf0\x27\xd1\x7d\xdc\x1d\x7e\xb8\xfe\x65\xfe\x0b\x50\x89\x86\xaa\x65\x6f\xaa\x41\xb8\xd5\xf3\xe3\xb3\x80\xff\xcb\x9b\x93\xff\x5d\x7b\xd2\x05\xe1\x39\xd0\x07\x7f\x2f\xe6\x97\x69\xec\x25\x49\xee\x27\xd1\x22\x5c\xd2\xdc\x9f\xe4\xd1\x24\x58\xd2\x65\xb4\x08\x63\x42\xf2\xc8\x2b\x93\x60\x9e\x90\xf8\x45\xcc\x97\x71\xe0\x16\x69\xbe\x88\xe2\x38\x9c\x25\xcb\xa9\xe7\x07\xe1\x6c\x51\x86\x69\x1e\x4f\x12\x3f\xa3\x0b\x0c\xa6\x89\x37\x4f\x9f\xc7\x7c\x86\x88\xe9\x32\x5f\x04\x0b\x3f\xa3\x59\x4c\x67\x59\x18\x2e\x5d\xc4\x99\x17\x65\x61\x89\x5e\x1e\x07\x41\x31\x31\xa5\xf7\xa5\x25\x37\x2d\xf8\x37\xa0\xc7\x4d\x4e\x24\x25\x05\x4a\x61\x66\xfe\x10\xf6\x3d\xf7\xff\x10\x94\xe6\x66\x7a\xc4\xcf\x77\x40\xe9\xfd\xbd\xa0\xf4\xfd\x28\x21\xee\x34\x59\x44\x5e\x10\xa5\x3e\x0d\xe2\xa9\xe7\x27\x34\x5c\xb8\x85\x17\xfa\xcb\x74\x9a\xa5\x7e\x12\x90\x97\x5b\xe6\xd8\xc7\x28\x9d\x06\x59\x46\x0a\xea\x06\x01\xc6\x18\xba\x61\x96\xa4\x73\x2f\x9e\x47\xa1\xe7\x07\x65\x38\xf3\xdc\x29\x7d\x1e\x94\xd3\x38\x4f\xe2\xf9\x6c\x1e\x4f\xc2\x28\x9e\x47\x45\xb6\x2c\x97\xc9\xdc\x4b\x97\x51\xec\xcf\x83\x34\x0a\x4b\xcf\x23\xd1\x2c\x1b\x0e\x06\x27\x30\x27\x9a\xc0\x95\x16\x92\xac\x71\xa0\xba\xef\xee\x76\xbf\x22\xba\xb2\x91\xa9\xcd\x1d\x72\x3e\x85\x92\xd5\x38\x00\x68\x88\xae\xc6\x70\xaa\x37\xcd\xe9\x97\x57\x86\x7f\x15\x44\x93\x91\x5d\x59\xe4\x46\xef\x4c\xf0\x92\xad\x5b\x49\x6c\x97\x74\xdc\x80\xda\xd1\xab\x3f\xbe\x4d\xa7\xe0\xc9\x6e\x13\x4a\x45\xcb\xb5\x82\x7b\x3c\x40\xef\xc5\x80\xf4\x83\x66\x9f\x7b\x3c\x98\x61\xec\x35\x1e\xa7\x8c\xec\x9b\x87\xb6\x70\x67\x00\x64\x81\x30\x59\xbd\x01\xc2\x0b\x58\xf9\x2b\xb8\xea\x7a\x3a\x73\x90\x20\x37\x27\xc5\xc0\x9c\x01\xaf\x85\xd2\x9c\x6c\x70\x0c\x0f\x2f\x03\x83\x13\x58\x09\xa9\x7b\x35\x46\xc5\xf7\x45\xcd\xa2\x31\xa4\x6e\xea\x9b\xed\x4d\x9d\x3a\x5a\xd8\xc6\x18\xe8\xe3\xa8\xa9\x41\xe3\x37\x5d\x90\xae\x1a\xa4\xac\x3c\xc0\x62\xaf\x6d\xff\x05\x6f\x56\x8f\xac\xb5\x0d\x23\x25\x1c\x72\x04\x89\xa6\x27\x2e\x80\x68\x60\x25\xe4\x58\x31\x5e\xc0\xf9\xe4\xda\xa8\xc1\x5e\xfa\xcd\x6a\x0c\xbb\xd1\x7e\x74\x18\x7d\xee\x52\x60\xac\x6e\x15\x16\x0f\x85\x60\xfc\xae\xc9\x01\xa5\x49\x84\x35\xd7\x96\xb1\x5d\x7d\xcd\x36\x28\x5a\xeb\x26\x07\xd1\x20\xef\x1f\x7f\xfa\x8e\xd8\x9e\xa5\xb6\xcb\x1f\xc0\x71\xb8\x17\x19\xc3\x30\x70\x95\x85\xdd\x45\x8b\x2d\x7e\xe3\xae\xdd\x9d\xa8\x03\xa7\x95\x14\x5c\xb4\xca\x1c\xcf\x14\x95\x62\x7c\x3d\xf8\x64\x04\xba\x60\x74\x4f\x57\xaa\x73\xbd\xdd\xe4\x28\x0d\x3d\x9a\x9a\x47\xa9\x4e\xa9\xe0\xca\xf0\x66\x7f\xd8\xef\x58\x5d\x9b\xb8\x90\xda\xb4\xf8\xba\x8b\x8c\xd2\x44\xea\xb6\x19\x80\x91\xbf\xed\x04\xc7\xd0\xb9\xb7\x94\x88\x0a\xda\x06\x66\xab\x1b\xa0\x07\x5a\xa3\xea\x5c\xed\x36\x30\xb7\xb9\x1d\x61\xf6\xc5\xcb\xd8\x8b\x5b\x34\x38\x82\x7e\xfa\x96\x30\xeb\xed\xbb\xab\x8e\x7d\x2c\x89\xf7\x16\x4a\xd4\x92\xa1\xbd\x95\x88\x5d\x1f\x6c\x02\x9a\x28\x43\xe2\xe6\xeb\xb2\x5b\x60\xb9\x7c\xf0\x88\xf2\x94\xcd\x3e\xa3\x5f\xc7\x6b\x70\x24\xbc\x1e\x22\x58\xa3\xe1\xb2\x5d\xc5\x68\xf5\x40\x86\xd0\x23\xdd\x24\xc5\xdc\x4a\xfb\x73\x44\x98\xf8\xf5\xcd\x4f\x01\xac\xbb\x7e\xd0\x56\x69\xb1\xe9\x37\x39\x96\x61\xff\x38\xd8\x17\xd8\xb9\x45\xfc\xd0\xd0\xee\xf0\xe1\x09\xd0\x56\x78\xaf\xf8\x61\x5f\x5a\x9b\x0b\x63\x07\xcd\x1f\x76\x68\xef\xcb\x4c\x22\xec\x14\x08\x09\xac\xa1\xfd\xbb\x20\xc9\x6b\x34\x3f\xa9\x6d\xbb\xba\x68\x9a\xf6\xca\x08\xde\x5c\x9e\x8d\xa1\xd2\xba\x19\x9f\x9e\xda\x0b\x9a\xb9\xd5\x8d\xb3\x28\x8c\xec\xde\x1b\xb2\x67\x1b\xe3\x62\x1f\xcf\x35\x31\x3e\x31\x6a\xf5\x35\xe4\x70\x0c\xb0\x24\x5c\xf5\xd7\x46\xc6\x61\x87\xcc\x4a\xfb\x2e\xbc\xda\x21\x03\x2e\x76\x03\x30\xba\x5e\x11\xb5\x32\xd2\x63\xf0\xdd\x87\xcf\x11\x70\xf6\x81\xd4\x6c\x50\xb3\x0d\x33\x47\xc3\x9a\xa8\x33\xf3\xd3\x24\xeb\xcb\xca\x63\x6d\x68\x61\x41\xd2\x59\xc0\xbf\x44\xe5\xb1\x2d\xbd\xff\x45\xd1\xbd\x91\x12\xb0\x97\x6b\x4b\x3b\x5d\x18\x40\x4b\xb6\x5e\xa3\xc4\xa2\xab\x24\x8d\x7b\x7d\xc4\x57\x57\x4d\xb1\x6b\xca\xe9\xb9\x8d\x25\x92\x02\x04\xaf\x0f\xa6\x4a\x8f\x35\x76\x7c\x28\x3e\x9a\xf4\x45\xf5\x25\x92\xe2\x6b\xf5\x5e\xd4\x6b\x3f\x37\x59\x7c\x6c\x7b\x23\x44\x6d\x62\xf6\x80\x69\x2d\x40\x21\x2f\xbe\x09\xb7\xd8\x5a\x06\xd9\x90\xfd\x03\xb4\xfd\x3e\x52\xdf\x57\x69\xaf\xe8\x5b\x52\x5b\xbd\x87\xae\xee\x88\x31\x90\xb6\x52\xda\x37\xcc\x47\x12\x15\x51\x90\x23\x72\x28\x50\x23\xd5\x36\x4c\x47\x05\x66\x3f\x73\x9e\xfa\xbd\x07\x73\xa6\x2c\xd2\xac\x46\x25\x36\x4f\x90\xaa\xa0\x10\x8f\x5f\x72\x40\xef\xad\x45\xa4\x31\x70\xd1\xfb\x95\x10\xf5\x84\x1a\x36\x5a\x70\xa3\xa9\x18\x83\x96\x2d\x9a\x3a\x25\xfc\x00\x05\xe6\xed\x7a\xdd\x33\xa1\x29\x1f\xcb\x3b\x6b\x01\x66\x93\x81\x9d\xed\xca\xb4\x69\xa4\x28\x6d\x7a\x1e\x44\x0c\xc7\x9a\xd1\x31\x94\xa4\x56\xd8\xb5\x8a\xbb\xca\x1a\x68\x02\xbb\x21\xea\xbe\x7b\x83\x50\x26\x2e\xad\xe4\x5d\xcd\x36\x7e\x03\x12\x55\x23\xb8\xc2\x8e\x3c\x15\xd2\x56\x32\x7d\xb0\x31\x57\xf7\x0b\x2b\xf3\xa0\xb6\x6b\x37\xfa\xa7\xf6\x46\x22\x15\x1b\x0b\x60\xeb\xc7\xbf\x03\x00\x00\xff\xff\x10\x24\x46\x1b\x5f\x18\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6239, mode: os.FileMode(420), modTime: time.Unix(1554394589, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1552945185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

