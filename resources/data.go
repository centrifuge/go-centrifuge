// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x59\x73\x1b\x37\x12\x7e\xe7\xaf\xe8\xa2\x5f\x92\xaa\x1d\x6a\xee\x83\x55\xa9\x2d\x9d\xb6\x62\x59\xa1\x24\x2a\x8a\xf5\xb2\xc6\x00\x3d\x1c\x58\x43\x60\x0c\x60\x78\xf8\xd7\x6f\x01\x33\x64\x24\xcb\x52\x76\x93\xca\xae\x5e\x34\x04\xd0\x8d\x3e\xbe\xfe\xd0\xc0\x1b\x38\xc1\x8a\x74\x8d\x01\x86\x2b\x6c\x64\xbb\x44\x61\xc0\xa0\x36\x02\x0d\x90\x05\xe1\x42\x1b\x50\x5c\x3c\x60\xb9\x1d\x51\x14\x46\xf1\xaa\x5b\xe0\x25\x9a\xb5\x54\x0f\x53\x50\x9d\xd6\x9c\x88\x9a\x37\xcd\xc8\x29\xe3\x02\xc1\xd4\x08\x6c\xd0\x2b\xfa\x95\x1a\x4c\x4d\x0c\x1c\xef\x35\xc0\x92\x70\x61\xac\xfe\xd1\x6e\xc9\x74\x04\xf0\x06\x2e\x24\x25\x8d\x33\x81\x8b\x05\x50\x29\x8c\x22\xd4\x00\x61\x4c\xa1\xd6\xa8\x41\x20\x32\x30\x12\x4a\x04\x8d\x06\xd6\xdc\xd4\x80\x62\x05\x2b\xa2\x38\x29\x1b\xd4\x93\x11\xec\xe4\xad\x4a\x00\xce\xa6\x10\x45\x91\xfb\x46\x53\xa3\xc2\x6e\x39\x78\x70\xce\xa6\x90\x47\x79\x3f\x57\x4a\x69\xb4\x51\xa4\x9d\x21\x2a\xdd\xcb\x7a\x30\x3e\xe0\x6d\x7c\x10\x84\xd9\xc4\x9f\xf8\x93\xe0\xc0\xd0\xf6\x20\xca\x43\x3f\x3c\xe0\x6d\xa5\x0f\xae\x96\xf3\xab\x4d\xb9\x7e\xe8\xee\x3f\x7e\x3c\xa9\xba\xaf\xf3\x72\x73\x7a\x78\x8d\xf3\xcb\xe3\x0b\xf9\x75\xbb\x4d\x92\x7c\x75\x25\x16\xbf\xae\x66\x1f\x3e\x5f\x7c\x7c\x18\xff\x81\xd2\x68\xa7\xf4\xd7\x2a\x3d\xbd\x4c\x97\x0f\x5f\xee\xf0\xf3\xdd\xfb\xbb\xf0\xcb\xac\x0b\xd2\xdf\x5a\xf6\x36\x7a\xf8\x59\x06\xf3\x68\x59\x93\x7a\x76\x94\xdc\x60\x22\x82\x5e\xe9\x2e\x54\x87\xbb\x48\xf5\x0e\x58\xf7\x51\x18\x6e\xb6\x67\x84\x1a\xa9\xb6\x53\x18\x8f\x87\x19\x22\x68\x2d\xd5\x35\xb6\x52\xf3\x6f\xa6\x5a\xb2\xb5\x58\xf8\xa5\x6c\xf8\x82\x18\x2e\x85\x9b\x73\x19\xfa\x40\xb8\xf8\x2e\x5e\x86\x44\xc2\x0f\xd7\x3d\x60\x7e\x1c\xc1\x63\x80\xf4\xf6\xbc\x81\xcb\x6e\x89\x8a\x53\x38\x3f\x01\x59\x39\xb0\x3c\x82\xc5\xa0\x63\x9f\xb7\x24\x18\xa4\x8e\x76\xc9\x81\x86\x6b\x63\x25\x85\x64\xf8\x1c\x57\xad\x92\x2b\xee\x26\xa4\xd3\xfd\xc8\x80\x9d\xa1\x7f\x98\xec\x28\x99\x84\x61\x32\x09\x7d\x7f\x12\x87\xdf\x26\x3c\x08\x4f\xa2\xf7\x52\xde\x5d\x70\x4e\xaf\x7e\x5d\xcf\xeb\xf9\xd1\xc7\x74\xf3\x9e\xce\xe4\x45\x95\x5e\x5f\x7d\xfc\xf9\xac\x5d\x57\x81\xca\x92\xf5\xc5\x26\xbc\xbf\x8e\xda\x63\x16\x8c\xbf\xa7\x3e\x4f\x27\x61\xe0\xbf\xa4\xfe\xea\xfe\xc3\x61\xfe\x76\xf6\x4e\xad\x4e\xef\x8f\x8a\x35\x7b\x90\xb7\xf4\xf0\x70\x79\x7c\xff\xae\x2d\x70\xbb\xbd\x8f\x6f\x4e\xf3\xc5\x99\x8a\xea\xf9\xe5\x6f\xe3\x21\x46\xa7\x03\xb8\xf7\x99\x38\x3f\x01\x0f\x86\x6c\xbc\x04\xff\x78\x10\xbe\x20\x36\x3c\xc0\xb0\x6d\xe4\x16\x19\xdc\x2c\x89\x32\x70\x3c\xa0\x4a\x43\x25\x95\x0b\xe8\x82\xaf\x50\x3c\x09\xe5\x73\xe4\xc1\x8b\xd0\xf3\x37\x65\xe8\x57\x09\x32\xdf\xcf\x8a\x98\xfa\x94\x52\x9a\xf8\x79\x19\xb0\xa2\x22\x79\x1e\x96\x69\x14\x90\xa8\xaa\xd2\xe0\x15\x90\xfa\x9b\x30\xf4\x7d\x96\xd3\x22\x08\x93\x24\xa0\x94\xd1\xaa\x48\x7d\x16\xf9\x61\x15\x05\x39\x8b\x90\x62\xca\xa2\x22\x29\x5e\x83\xb3\xbf\xf1\x03\x42\xa3\xa0\x08\xca\x2c\x0d\x31\xf1\xb3\x90\xd2\x30\xc1\x2a\xa1\x04\x19\x06\x09\x09\xb2\x3c\xf6\x49\x5e\x0c\xc0\x7f\x2f\x57\xa4\xf7\xfc\x11\x4c\x4b\x54\x82\x34\x35\xf2\x45\x6d\x06\x18\xbd\x79\xf3\x66\x88\x69\x2f\x71\x76\x78\x35\xfc\xf6\xe0\xce\xd2\x15\x17\x55\xa7\x08\x6c\x65\x07\x0b\xcb\xb3\x02\x50\x29\xa9\x2c\x40\xe6\x35\xd7\xa0\xf0\x4b\x67\x77\xe1\x1a\x84\x34\xa0\xbb\xb6\x95\xca\x20\x83\x12\x29\xe9\x34\x5a\x49\xe5\xf0\x6f\x97\xa8\x4e\x08\xcb\x95\x8e\x09\xb5\x21\xc6\x16\x41\x67\x87\x26\x70\xdd\x89\x7e\xdc\xf3\x86\xb1\x9f\x88\xa2\x35\x5f\xe1\x64\xfc\x8f\xc1\x28\x80\xb5\xad\x21\x23\x81\xc9\x7f\x3a\x09\x02\x8d\x63\xe1\x96\x28\x6e\xb6\xfd\x46\x4e\xcb\x83\xf3\x07\x17\xd3\xfe\xe7\xa7\x61\x81\xe7\xd1\x9a\x70\xf1\x53\x3f\xed\x79\xd6\xda\x9f\x22\x3f\xf2\x63\xf0\xbc\x35\x51\xed\xf0\xcf\x2b\x89\x52\x1c\x15\x24\x69\xee\xfb\xbe\x0f\x9e\x27\xa4\x47\x04\xe5\x28\x8c\x57\x36\x92\x3e\xe8\x7e\x4c\xa3\x5a\xa1\xd7\xd8\xa0\x82\xe7\x2d\xc9\xc6\x6b\x6d\x99\x42\x98\x58\x21\x2d\x48\xab\x6b\x69\x86\x41\x37\xb6\xe4\xe2\xc9\x4f\x6b\x33\xa1\x86\xaf\x10\x3c\xcf\xc2\xd3\x86\x48\x56\xd5\xf3\x48\x80\xe7\xb1\xd2\xa3\x72\xd9\xda\xf5\x52\x80\xd6\xcc\xba\x44\x68\x8d\x9e\xe6\x5f\x11\x62\xbf\x48\xc1\xf3\x3e\x6b\x29\x54\x4b\xbd\x5a\x6a\xa3\x81\x34\xcd\xa3\x31\x2e\x0c\xaa\x8a\x50\xb4\xe3\x9f\x9e\xa6\xfb\x79\x30\xbf\x97\xf9\x23\xeb\x3e\x32\x5b\x4d\x02\x7b\x43\x8c\x84\x3b\x2c\x6f\xec\xb8\xd1\xe0\x62\xa2\xa0\x52\x72\x09\x9d\x30\xaa\xd3\x16\x12\x52\xf1\x05\x17\x53\x98\x4c\xc6\x2f\xe6\xd3\x96\xed\xb3\x5c\x7e\xf2\xbc\x4e\x68\x52\xa1\x87\x9b\x56\x6a\xfc\x04\x55\x43\x16\xdf\x00\xf8\xbf\xe3\xea\xf0\x2f\x72\xf5\x93\x5a\xfa\x8f\xd9\x3a\xf0\xe3\x49\x90\xc4\x93\x20\x9f\x24\xcf\x8e\xe7\x1d\x9d\xce\x74\xca\x09\xde\x76\x67\xf7\x97\x5d\xf0\x76\xb3\xd2\xdb\xa3\xf9\x8d\x9a\xeb\x62\x65\x8e\xd2\xd2\x7c\x38\x14\xef\xce\xe4\xc5\xe7\xf2\xe1\xeb\x31\x19\x7f\x47\x7d\x32\x09\xf2\x64\x12\x46\xd9\x8b\x1b\x1c\xbf\xa5\x6b\x3e\xff\x2c\xdf\xdf\xbd\xab\x8e\x48\x9c\x87\xb7\x33\x43\xf0\x76\x73\x79\xb1\x66\xf9\xd7\x52\x1c\x05\x37\xd9\x1a\x0f\xef\x6f\x37\xf7\xaf\xf3\xb5\x23\x8d\x17\xd9\x3a\xfc\x1b\xe8\xfa\x15\xb6\x8e\x69\x1e\xfb\x45\xe1\xd3\x04\x8b\xb4\x8a\x69\x1c\x27\x79\x9c\xa7\x2c\x8e\x69\x9a\x23\xcb\xb0\x48\xd0\x67\x49\xf8\x2a\x5b\xa7\x61\x52\x16\x09\x8b\x33\x3f\x61\x59\x42\xe3\x3c\x61\x41\x96\x45\x34\x0b\xfd\x80\x64\x51\x1c\xa5\x71\x84\x41\x50\xbd\xce\xd6\x79\x55\x86\x58\x95\x59\x56\x86\x2c\x67\x7e\x41\xb2\x22\x2a\x59\x14\x44\x58\xd2\x3c\xf2\x49\x86\x99\x5f\xf8\x65\x36\xb0\xf5\xb5\x6c\xb5\xc1\x67\x7c\xcd\xe4\xa2\x25\x86\xd6\x7f\xae\x1b\x89\xfe\x22\xc2\x77\xbb\xc3\x0f\xf3\x5f\x4e\x7e\x01\xaa\xd0\xd2\xb5\x1a\x4c\xb5\x28\x77\x7a\x7e\x7c\x11\xf4\x7f\x7b\x93\xf2\xff\x6b\x53\xfa\x20\xbc\x04\xfc\xe8\x7f\x8b\xfb\xa0\x24\x41\x5e\xa6\x41\x14\x65\x15\x09\xc2\x20\x8a\x8a\x28\x2a\xca\x24\x89\xb3\xc8\xa7\x3e\x66\x7e\x59\x90\x3c\xa0\xaf\xe2\xbe\xaa\x92\x2a\x4a\xaa\xb4\x8a\x8a\xc0\x47\x96\xa6\x24\x8c\xcb\x14\x93\x24\x89\x43\x4c\xd3\x32\x4f\xf3\x38\x48\x49\xf4\x3a\xee\xe3\xdc\x76\x25\x59\x1a\x15\x98\xe7\x39\xa6\x69\x56\x85\xb6\xd7\x29\x8b\x34\x4d\x22\x86\x7e\x12\x87\x49\xc0\xf2\xf1\xc8\x5e\xc1\x88\x21\x70\x63\xa4\x22\x0b\x1c\xe9\xfe\x7f\x7f\xb1\x9a\x11\x53\xbb\xe8\x34\xb6\x75\x3f\x39\x82\x8a\x37\x38\xb2\x9b\x9a\x7a\x0a\x07\x66\xd9\x1e\xfc\x7e\xc1\xfb\x17\x23\x86\x4c\xdc\x4a\x56\x5a\xbd\xc7\x52\x54\x7c\xd1\x29\x67\xd6\x7e\x03\xea\x46\x6f\xfe\xfc\x36\xbd\x82\x67\xbb\x1d\x52\x2a\x3b\x61\x34\x3c\xe0\x16\x06\x2f\x46\x64\x18\xb4\xfb\x3c\xe0\xd6\x0e\xe3\xa0\x71\x37\x65\x65\xcf\xf7\x27\xf1\xda\x82\xc8\x81\xe1\x70\x76\x0e\x44\x30\x98\x85\x33\xb8\xe9\x8f\x51\x5b\xb7\x28\x6c\x61\x8e\x6c\xc9\xbd\x93\xda\x08\xb2\xc4\x29\xf8\xee\x4a\xe6\x8f\xde\xc0\x4c\x2a\x33\x28\xb1\x0a\xbe\x2f\x68\x17\x4d\x21\xf7\xf3\xd0\x6e\x6e\x2b\xd5\x33\xd2\x75\x22\x40\x1f\xc7\x4c\x8f\xda\xb0\xed\x43\x74\xd3\x22\xe5\xd5\x16\x4e\x37\xc6\x1d\x78\x70\x3e\x7b\x64\xab\x3b\xa1\x29\x11\xf6\x82\xab\xd0\x36\x21\x0c\x88\x01\x5e\x41\x89\x35\x17\x0c\x2e\x0f\xe7\x56\x0d\x0e\xd2\xe7\xb3\x29\xac\x27\x9b\xc9\x76\xf2\xb5\x4f\x80\xb5\xba\xd3\xc8\xf6\xa5\x60\xbd\x6e\xc8\x16\x95\x4d\x83\x33\xd7\x15\xb2\x5b\x3d\xe7\x4b\x94\x9d\x73\x53\x80\x6c\x51\x0c\xb7\xee\xa1\x05\x71\xc4\xe5\xda\xaa\x11\xec\x86\x07\x91\x29\x8c\x23\x5f\x3b\xd0\x5d\x75\xd8\xe1\x37\xee\xba\xdd\x89\xde\x0a\x5a\x2b\x29\x64\xa7\x2d\x17\x52\xd4\x9a\x8b\xc5\xe8\x8b\x15\xe8\x83\xd1\xbf\x19\xe8\xde\xf5\x6e\x59\xa2\xb2\x6c\x6a\xab\x1e\x95\x3e\xa0\x52\x68\x4b\xd0\x03\xb3\xae\xed\x2d\xae\x74\x3d\x96\xa4\xc4\xf4\x91\xd1\x86\x28\xd3\xb5\x23\xb0\xf2\x77\xbd\xe0\x14\x7a\xf7\xce\x14\xa2\x86\xae\x85\xe3\xd9\x2d\xd0\x2d\x6d\x50\xf7\xae\xf6\x1b\xd8\xf6\x79\x4d\xb8\x7b\x6a\xb0\xf6\xe2\x0a\x2d\x8a\x60\x98\xbe\x23\xdc\x79\xfb\xe1\x66\x0a\xc1\x68\x38\x2d\x06\x0b\x15\x1a\xc5\xd1\xb5\x81\x72\x3d\x04\x9b\x80\x21\xda\x9e\x16\xf6\xdf\x75\xbf\x60\x0a\x81\x6f\x63\xb4\x27\x3d\xed\xb2\xcf\xe9\xd3\x78\x8d\x76\x94\x37\x40\x04\x1b\xb4\x6c\xb6\xae\x39\xad\xf7\x74\x08\x03\xce\x6d\x52\xec\x35\x60\x38\xb0\xa4\x8d\xdf\x70\xd2\x30\xe0\x7d\xbf\x47\x3b\x6d\xe4\x72\xd8\x64\x57\x84\xc3\xab\xcc\x50\x5e\x97\x0e\xef\xe3\x25\xe1\x62\xbc\x7f\x7b\x71\xf5\x3d\x28\xde\xef\x4b\x1b\xdb\xa1\xf7\xd0\xfc\x61\x8d\xee\x82\xc2\x15\xc2\x5a\x83\x54\xc0\x5b\x3a\x3c\xc8\x90\xb2\x41\xfb\x49\xdd\x19\xd7\x47\xd3\x9e\x65\x56\xf0\xf6\xfa\x62\x0a\xb5\x31\xed\xf4\xe0\xc0\x75\xc4\xb6\x8d\x9e\x16\x49\x9c\xec\x70\xe0\x1e\x8c\x16\xc4\xfa\xc2\xa9\x35\x77\x41\xf4\xcc\x7e\xda\x18\xee\xfe\x9e\x2d\x6e\xf8\x92\x9b\x7e\xf1\x85\xfd\x9c\x42\x9c\x05\x61\x94\xe7\x4f\xf0\x6d\xa4\x4b\x74\x9f\x26\xf1\xbb\x67\x46\x11\xa1\xc9\xbe\xdd\xb6\x3e\x30\xd6\x3f\x30\x11\x70\x37\x12\x47\x1c\xbd\x2b\x60\x14\x5f\x2c\x50\x21\xeb\xab\xc1\xe0\xc6\xec\x30\xd2\x57\x44\xea\xdb\x92\x78\x69\x63\x85\x84\x81\x14\xcd\xd6\x56\xda\xae\x4e\x76\xaf\x6c\x3b\x93\x7e\x57\x7d\x8d\x84\x3d\x55\x1f\x24\x83\xf6\x4b\x9b\x89\xc7\xb6\xb7\x52\x36\xb0\x24\x9b\x3d\x2e\x8d\x04\x8d\x82\x59\x4c\x3e\x5a\x26\x57\x8e\x05\x96\x64\xb3\x87\x67\x38\xc4\xf4\xfb\x2a\xdd\xbd\x66\x45\x1a\xa7\x77\xdb\xd7\x0e\xb1\x06\xd2\x4e\x29\xf7\xf8\xf3\x48\xa2\x26\x1a\x4a\x44\x01\x0c\x0d\x52\xe3\xc2\xb4\x53\x60\xf7\xb3\xa7\x62\x38\x78\x70\xc2\xb5\x43\x8b\xd3\xa8\xe5\xf2\x19\xda\x34\x30\xf9\xf8\xfa\x0b\x66\xe3\x2c\x22\x2d\xb7\x15\xb6\x99\x49\xd9\x1c\x52\xcb\x28\xa7\xc2\x6a\x62\x53\x30\xaa\x43\x5b\x6b\x44\x6c\x81\x61\xd9\x2d\x16\x03\x9b\xd9\x12\x70\xdc\xb1\x90\x60\x37\x19\xb9\xd9\xbe\xd4\xda\x56\xc9\xca\xa5\x67\x2f\x62\x79\xd2\x8e\x4e\xa1\x22\x8d\xc6\xd1\xa8\x3f\xdd\x87\x07\xc5\x56\x21\x95\x4b\x87\x34\xb7\xe1\xbf\x03\x00\x00\xff\xff\xd3\xea\x79\x07\x45\x15\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 5445, mode: os.FileMode(420), modTime: time.Unix(1553010674, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1553006644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

