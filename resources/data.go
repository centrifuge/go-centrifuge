// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x73\x1b\xb7\xb2\xde\xf3\x57\x74\x51\x1b\xa7\xea\x0e\x35\xef\x07\xab\x52\xb7\xf8\xb4\x15\xcb\x0a\x25\x51\x51\xac\xcd\x35\x06\xd3\x43\xc2\x1a\x02\x63\x00\xc3\x87\x7f\xfd\x2d\x60\x86\xb2\x64\x59\xca\x39\x49\x25\x67\x73\xb8\x21\x09\xa0\x1b\xfd\xf8\xfa\x43\x03\x27\x30\xc5\x92\x34\x95\x86\x02\xb7\x58\x89\x7a\x83\x5c\x83\x46\xa5\x39\x6a\x20\x2b\xc2\xb8\xd2\x20\x19\xbf\xc7\xfc\xd0\xa3\xc8\xb5\x64\x65\xb3\xc2\x0b\xd4\x3b\x21\xef\x87\x20\x1b\xa5\x18\xe1\x6b\x56\x55\x3d\xab\x8c\x71\x04\xbd\x46\x28\x3a\xbd\xbc\x5d\xa9\x40\xaf\x89\x86\xc9\x83\x06\xd8\x10\xc6\xb5\xd1\xdf\x3b\x2e\x19\xf6\x00\x4e\xe0\x5c\x50\x52\x59\x13\x18\x5f\x01\x15\x5c\x4b\x42\x35\x90\xa2\x90\xa8\x14\x2a\xe0\x88\x05\x68\x01\x39\x82\x42\x0d\x3b\xa6\xd7\x80\x7c\x0b\x5b\x22\x19\xc9\x2b\x54\x83\x1e\x1c\xe5\x8d\x4a\x00\x56\x0c\x21\x08\x02\xfb\x1b\xf5\x1a\x25\x36\x9b\xce\x83\xb3\x62\x08\x69\x90\xb6\x73\xb9\x10\x5a\x69\x49\xea\x05\xa2\x54\xad\xac\x03\xfd\x53\x56\x87\xa7\x9e\x9f\x0c\xdc\x81\x3b\xf0\x4e\x35\xad\x4f\x83\xd4\x77\xfd\x53\x56\x97\xea\xf4\x72\xb3\xbc\xdc\xe7\xbb\xfb\xe6\xee\xe3\xc7\x69\xd9\x7c\x5d\xe6\xfb\xd9\xe8\x0a\x97\x17\x93\x73\xf1\xf5\x70\x88\xa2\x74\x7b\xc9\x57\xbf\x6d\x17\x1f\x3e\x9f\x7f\xbc\xef\xff\x81\xd2\xe0\xa8\xf4\xb7\x32\x9e\x5d\xc4\x9b\xfb\x2f\xb7\xf8\xf9\xf6\xfd\xad\xff\x65\xd1\x78\xf1\xef\x75\xf1\x36\xb8\xff\x45\x78\xcb\x60\xb3\x26\xeb\xc5\x38\xba\xc6\x88\x7b\xad\xd2\x63\xa8\x46\xc7\x48\xb5\x0e\x18\xf7\x91\x6b\xa6\x0f\x73\x42\xb5\x90\x87\x21\xf4\xfb\xdd\x0c\xe1\x74\x2d\xe4\x15\xd6\x42\xb1\xef\xa6\x18\xdf\x0a\x46\xf1\x86\xd7\xc4\x84\xaf\xdf\xef\xd9\xec\x7c\x20\x8c\xff\x10\x2b\x5d\x12\xe1\xcd\x55\x0b\x96\x9f\x7a\xf0\x18\x1c\xad\x2d\x27\x70\xd1\x6c\x50\x32\x0a\x67\x53\x10\xa5\x05\xca\x23\x48\x74\x3a\x1e\x72\x16\x79\x9d\xd4\xf8\x98\x18\xa8\x98\xd2\x46\x92\x8b\x02\x9f\x63\xaa\x96\x62\xcb\xec\x84\xb0\xba\x1f\x19\x70\x34\xf4\x0f\x13\x1d\x44\x03\xdf\x8f\x06\xbe\xeb\x0e\x42\xff\xfb\x64\x7b\xfe\x34\x78\x2f\xc4\xed\x39\x63\xf4\xf2\xb7\xdd\x72\xbd\x1c\x7f\x8c\xf7\xef\xe9\x42\x9c\x97\xf1\xd5\xe5\xc7\x5f\xe6\xf5\xae\xf4\x64\x12\xed\xce\xf7\xfe\xdd\x55\x50\x4f\x0a\xaf\xff\x23\xf5\x69\x3c\xf0\x3d\xf7\x25\xf5\x97\x77\x1f\x46\xe9\xdb\xc5\x3b\xb9\x9d\xdd\x8d\xb3\x5d\x71\x2f\x6e\xe8\x68\xb4\x99\xdc\xbd\xab\x33\x3c\x1c\xee\xc2\xeb\x59\xba\x9a\xcb\x60\xbd\xbc\xf8\xbd\xdf\xc5\x68\xd6\x01\xfb\x21\x13\x67\x53\x70\xa0\xcb\xc6\x4b\xd0\x0f\x3b\xe1\x73\x62\xc2\x03\x05\xd6\x95\x38\x60\x01\xd7\x1b\x22\x35\x4c\x3a\x44\x29\x28\x85\xb4\x01\x5d\xb1\x2d\xf2\x27\xa1\x7c\x8e\x3a\x78\x11\x76\xee\x3e\xc3\x7c\x3a\x4d\xc7\x49\xee\x63\xe2\x7a\x34\x2b\x93\x22\x73\xe7\xa9\x47\xb2\xc4\x8b\xa3\xd8\xa7\xa3\x49\x14\x85\x79\xf0\x0a\x40\xdd\x7d\x10\x63\x90\xa7\x79\x56\x96\x65\xec\x8e\x3c\x74\x03\xaf\x2c\xdc\x24\x4e\x3c\x3f\x4b\x0b\x37\x4a\xc2\x88\x96\x63\xe2\xbf\x04\x65\x77\x3f\xf3\x62\x3f\x1c\xcd\xc2\x24\x8e\xb1\x0c\xc8\x28\x0c\x5c\xd7\xf3\xfd\x69\x34\x1b\x91\x88\x84\x38\x4a\xca\x49\x94\x25\x69\x07\xfa\xf7\x62\x4b\x5a\xaf\x1f\x41\x34\x47\xc9\x49\xb5\x46\xb6\x5a\xeb\x0e\x42\x27\x27\x27\x5d\x3c\x5b\x89\xf9\xe8\xb2\xfb\xef\xc0\xad\xa1\x29\xc6\xcb\x46\x12\x38\x88\x06\x56\x86\x5f\x39\xa0\x94\x42\x1a\x70\x2c\xd7\x4c\x81\xc4\x2f\x8d\xd9\x85\x29\xe0\x42\x83\x6a\xea\x5a\x48\x8d\x05\xe4\x48\x49\xa3\xd0\x48\x4a\x8b\x7d\xb3\x44\x36\x9c\x1b\x8e\xb4\x0c\xa8\x34\xd1\xa6\x00\x1a\x33\x34\x80\xab\x86\xb7\xe3\x8e\xd3\x8d\xfd\x4c\x24\x5d\xb3\x2d\x0e\xfa\xff\xd3\x19\x05\xb0\x33\xf5\xa3\x05\x14\xe2\x7f\xad\x04\x81\xca\xb2\x6f\x4d\x24\xd3\x87\x76\x23\xab\xe5\xde\xfa\x83\xab\x61\xfb\xf7\x53\xb7\xc0\x71\xe8\x9a\x30\xfe\x73\x3b\xed\x38\xc6\xda\x9f\x03\x37\x70\x43\x70\x9c\x1d\x91\x75\xf7\xe5\xe4\x44\x4a\x86\x12\xa2\x38\x75\x5d\xd7\x05\xc7\xe1\xc2\x21\x9c\x32\xe4\xda\xc9\x2b\x41\xef\x55\x3b\xa6\x50\x6e\xd1\xa9\x4c\x50\xc1\x71\x36\x64\xef\xd4\xa6\x44\xc1\x8f\x8c\x90\xe2\xa4\x56\x6b\xa1\xbb\x41\x3b\xb6\x61\xfc\xc9\x5f\x63\x33\xa1\x9a\x6d\x11\x1c\xc7\x40\xd3\x84\x48\x94\xe5\xf3\x48\x80\xe3\x14\xb9\x43\xc5\xa6\x36\xeb\x05\x07\xa5\x0a\xe3\x12\xa1\x6b\x74\x14\xfb\x8a\x10\xba\x59\x0c\x8e\xf3\x59\x09\x2e\x6b\xea\xac\x85\xd2\x0a\x48\x55\x3d\x1a\x63\x5c\xa3\x2c\x09\x45\x33\xfe\xe9\x69\xba\x9f\x07\xf3\x47\x99\x1f\x1b\xf7\xb1\x30\x95\xc4\xb1\x35\x44\x0b\xb8\xc5\xfc\xda\x8c\x6b\x05\x36\x26\x12\x4a\x29\x36\xd0\x70\x2d\x1b\x65\x20\x21\x24\x5b\x31\x3e\x84\xc1\xa0\xff\x62\x3e\x4d\xc9\x3e\xcb\xe5\x27\xc7\x69\xb8\x22\x25\x3a\xb8\xaf\x85\xc2\x4f\x50\x56\x64\xf5\x1d\x80\xff\x3d\x9e\xf6\xff\x22\x4f\x3f\xa9\xa5\x7f\x99\xa9\x3d\x37\x1c\x78\x51\x38\xf0\xd2\x41\xf4\xec\x58\x3e\x52\xe9\x42\xc5\x8c\xe0\x4d\x33\xbf\xbb\x68\xbc\xb7\xfb\xad\x3a\x8c\x97\xd7\x72\xa9\xb2\xad\x1e\xc7\xb9\xfe\x30\xe2\xef\xe6\xe2\xfc\x73\x7e\xff\x75\x42\xfa\x3f\x50\x1f\x0d\xbc\x34\x1a\xf8\x41\xf2\xe2\x06\x93\xb7\x74\xc7\x96\x9f\xc5\xfb\xdb\x77\xe5\x98\x84\xa9\x7f\xb3\xd0\x04\x6f\xf6\x17\xe7\xbb\x22\xfd\x9a\xf3\xb1\x77\x9d\xec\x70\x74\x77\xb3\xbf\x7b\x9d\xab\x2d\x69\xbc\xc8\xd4\xfe\xdf\x40\xd5\xaf\x30\x75\x10\xc7\x79\xe8\x79\xb1\x4f\xa2\xa0\x2c\x92\xa8\xc8\xa2\x22\xf0\x8a\x69\x5c\x78\x93\xb0\x48\x83\x7c\x1a\x06\xf1\x78\x8c\xaf\x32\x75\x12\x8d\x09\x1d\x67\xfe\x28\x70\x31\x99\x95\xde\x34\x48\xa9\x4f\x02\x6f\x1c\xce\xfd\x2c\x88\x8a\x20\x9b\xc7\x49\x4a\x5f\x61\xea\x34\x49\x5d\xf4\xbc\x30\x70\x83\x38\x0f\x69\x96\x64\xe5\xcc\x8f\x02\xcf\x4f\x49\x98\xba\x49\xe8\x66\x41\xe9\x65\x69\xd2\x31\xf5\x95\xa8\x95\xc6\x67\x5c\x5d\x88\x55\x4d\x34\x5d\xff\xb9\x2e\x24\xf8\x8b\xe8\x3e\xee\x0e\x6f\x96\xbf\x4e\x7f\x05\x2a\xd1\x50\xb5\xec\x4c\x35\x08\xb7\x7a\x7e\x7a\x11\xf0\x7f\x7b\x73\xf2\x9f\x6b\x4f\xda\x20\xbc\x04\xfa\xe0\x9f\xc5\xfc\x3c\x8d\xbd\x24\xc9\xfd\x24\x9a\x85\x73\x9a\xfb\xa3\x3c\x1a\x05\x73\x3a\x8f\x66\x61\x4c\x48\x1e\x79\x65\x12\x4c\x13\x12\xbf\x8a\xf9\x32\x0e\xdc\x22\xcd\x67\x51\x1c\x87\x93\x64\x3e\xf6\xfc\x20\x9c\xcc\xca\x30\xcd\xe3\x51\xe2\x67\x74\x86\xc1\x38\xf1\xa6\xe9\xcb\x98\xcf\x10\x31\x9d\xe7\xb3\x60\xe6\x67\x34\x8b\xe9\x24\x0b\xc3\xb9\x8b\x38\xf1\xa2\x2c\x2c\xd1\xcb\xe3\x20\x28\x46\xa6\xf4\xbe\xb5\xe4\xa6\x05\xff\x0e\xf4\xb8\xc9\x89\xa4\xa4\x40\x29\xcc\xcc\x9f\xc2\xbe\xe7\xfe\x17\x94\xdf\x83\xd2\xfb\x67\x41\xe9\xfb\x51\x42\xdc\x71\x32\x8b\xbc\x20\x4a\x7d\x1a\xc4\x63\xcf\x4f\x68\x38\x73\x0b\x2f\xf4\xe7\xe9\x38\x4b\xfd\x24\x20\xaf\xb7\xcc\xb1\x8f\x51\x3a\x0e\xb2\x8c\x14\xd4\x0d\x02\x8c\x31\x74\xc3\x2c\x49\xa7\x5e\x3c\x8d\x42\xcf\x0f\xca\x70\xe2\xb9\x63\xfa\x32\x28\xc7\x71\x9e\xc4\xd3\xc9\x34\x1e\x85\x51\x3c\x8d\x8a\x6c\x5e\xce\x93\xa9\x97\xce\xa3\xd8\x9f\x06\x69\x14\x96\x9e\x47\xa2\x49\xd6\xef\xf5\x4e\x60\x4a\x34\x81\x6b\x2d\x24\x59\x61\x4f\xb5\xdf\xed\xed\x7e\x41\xf4\xda\x46\xa6\x32\x77\xc8\xe9\x18\x4a\x56\x61\x0f\xa0\x26\x7a\x3d\x84\x53\xbd\xa9\x4f\xbf\xbd\x32\xfc\x5f\x41\x34\x19\xd8\x95\x45\x6e\xf4\x4e\x04\x2f\xd9\xaa\x91\xc4\x76\x49\xc7\x0d\xa8\x1d\xbd\xfe\xf3\xdb\xb4\x0a\x9e\xed\x36\xa2\x54\x34\x5c\x2b\xb8\xc7\x03\x74\x5e\xf4\x48\x37\x68\xf6\xb9\xc7\x83\x19\xc6\x4e\xe3\x71\xca\xc8\x9e\x3d\xb4\x85\x3b\x03\x20\x0b\x84\xd1\xe2\x0c\x08\x2f\x60\xe1\x2f\xe0\xba\xed\xe9\xcc\x41\x82\xdc\x9c\x14\x3d\x73\x06\xbc\x13\x4a\x73\xb2\xc1\x21\xb8\xf6\x5d\xc0\xed\x9d\xc0\x42\x48\xdd\x29\x31\x0a\x7e\x2c\x68\x16\x0d\x21\x75\x53\xbf\xf7\x54\xe4\xed\xd5\x62\x72\x6c\x20\x1f\xc9\xac\x64\x4d\x5b\x19\xdf\x54\x92\x15\x42\x94\x8e\x16\xb6\x97\x06\xfa\x38\xd0\xaa\x57\xfb\x75\x1b\xd7\xeb\x1a\x29\x2b\x0f\x30\xdb\x6b\xdb\xb2\xc1\xd9\xe2\x91\x83\xb6\xc7\xa4\x84\x43\x8e\x20\xd1\xb4\xd1\x05\x10\x0d\xac\x84\x1c\xd7\x8c\x17\x70\x31\x5a\x1a\x35\xd8\x49\x9f\x2d\x86\xb0\x1b\xec\x07\x87\xc1\xd7\x36\x6b\xc6\xee\x46\x61\xf1\x50\x3b\x26\x54\x15\x39\xa0\x34\xb9\xb3\xf6\xda\xca\xb7\xab\x97\x6c\x83\xa2\xb1\x8e\x72\x10\x35\xf2\xee\xbd\xa8\x6b\xa2\xed\xf1\x6b\x2f\x06\x3d\x38\x0e\x77\x22\x43\xe8\x07\xae\xb2\x48\xbd\x6c\xb0\xc1\xef\xdc\xb5\xbb\x13\x75\xe0\x74\x2d\x05\x17\x8d\x32\x27\x3a\x45\xa5\x18\x5f\xf5\xbe\x18\x81\x36\x18\xed\x6b\x97\x6a\x5d\x6f\x36\x39\x4a\xc3\xa8\x86\x26\x50\xaa\x53\x2a\xb8\x32\x54\xdb\xf5\x07\x3b\x56\x55\x26\x2e\xa4\x32\xb7\x02\xdd\x46\x46\x69\x22\x75\x53\xf7\xc0\xc8\xdf\xb6\x82\x43\x68\xdd\x9b\x4b\x44\x05\x4d\x0d\x93\xc5\x0d\xd0\x03\xad\x50\xb5\xae\xb6\x1b\x98\x0b\xe0\x8e\x30\xfb\x48\x66\xec\xc5\x2d\x1a\xe8\x41\x37\x7d\x4b\x98\xf5\xf6\xc3\x75\x4b\x58\x96\xf7\x3b\x0b\x25\x6a\xc9\xd0\x5e\x64\xc4\xae\x0b\x36\x01\x4d\x94\xe1\x7d\xf3\x75\xd5\x2e\xb0\xf4\xdf\x7b\xc4\x92\xca\x66\x9f\xd1\xa7\xf1\xea\x1d\x39\xb2\x83\x08\x56\x68\xe8\x6f\xb7\x66\x74\xfd\xc0\x9f\xd0\x15\x87\x49\x8a\xb9\xc8\x76\x47\x8f\x30\xf1\xeb\xfa\xa5\x02\x58\x7b\x63\xa1\x8d\xd2\x62\xd3\x6d\x72\xac\xdc\xee\x3d\xb1\xab\xc9\x0b\x5b\x24\xfd\x0d\x61\xbc\xff\xf0\x6a\x68\x49\xa1\x53\xfc\xb0\x2f\xad\xcc\x1d\xb3\x85\xe6\x9b\x1d\xda\x2b\x36\x93\x08\x3b\x05\x42\x02\xab\x69\xf7\x94\x48\xf2\x0a\xcd\x4f\x6a\x3b\xb5\x36\x9a\xa6\x23\x33\x82\x37\x57\xe7\x43\x58\x6b\x5d\x0f\x4f\x4f\xed\x9d\xce\x5c\x04\x87\x59\x14\x46\x2d\x10\x4d\x57\x27\x71\x23\xb6\x08\x6f\xcc\xbd\xdd\x40\xd8\xc8\xae\x88\x5a\x48\x46\xd1\x04\xf2\xf8\x39\x22\xc7\x3e\x8e\xae\x88\x82\x8a\x6d\x98\x6e\x17\x9f\x9b\x9f\x0f\x8b\x9f\x80\x5c\x0b\x9b\xed\x36\x57\xfc\x9b\x7b\x5a\x12\xae\xc8\xc3\xad\xd1\x38\x52\x14\xed\xfb\x28\x01\x7b\xb1\xb6\x94\xd3\xfa\x03\x5a\xb2\xd5\x0a\x25\x16\x6d\x49\x68\xdc\xeb\x23\x50\xda\xb2\x88\x5d\x53\x17\x2f\x6d\x2c\x91\x14\x20\x78\x75\x30\xe5\x76\x2c\x96\xe3\x23\xf1\xd1\xa4\x6f\xaa\xaf\x90\x14\x4f\xd5\x7b\x51\xa7\xfd\xc2\xa4\xe3\xb1\xed\xb5\x10\x15\x6c\xc8\xfe\x01\x9c\x5a\x80\x42\x5e\x18\x60\x3e\x5a\x26\xb6\x96\x0a\x36\x64\xff\x80\x51\xbf\x8b\xd4\x8f\x55\xda\xeb\xf9\x96\x54\x56\xef\xa1\x2d\x20\x62\x0c\xa4\x8d\x94\xf6\xfd\xf2\x91\xc4\x9a\x28\xc8\x11\x39\x14\xa8\x91\x6a\x1b\xa6\xa3\x02\xb3\x9f\x39\x4b\xfd\xce\x83\x29\x53\x16\x32\x56\xa3\x12\x9b\x67\x90\x53\x50\x88\xc7\xaf\x38\xa0\xf7\xd6\x22\x52\x33\x53\x66\xfb\x85\x10\xd5\x88\x1a\x5a\x99\x71\xa3\xa9\x18\x82\x96\x0d\x9a\x82\x23\xfc\x00\x05\xe6\xcd\x6a\xd5\x51\x9a\xa9\x03\x4b\x20\x2b\x01\x66\x93\x9e\x9d\x6d\xeb\xad\xae\xa5\x28\x6d\x7a\x1e\x44\x0c\x59\x9a\xd1\x21\x94\xa4\x52\xd8\xeb\xb5\x3d\x41\xf7\x1e\x5e\x4b\xa4\x62\x63\x91\x66\x37\xfc\xff\x00\x00\x00\xff\xff\x7d\xd2\xb0\xe1\x04\x18\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1554211200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1551868703, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

