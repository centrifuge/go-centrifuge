// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x73\x1b\xb7\xb2\xde\xf3\x57\x74\x51\x1b\xa7\xea\x0e\x35\xef\x07\xab\x52\xb7\xf8\xb4\x1d\xcb\x0a\x25\x51\x51\xac\xcd\x35\x06\xd3\x43\xc2\x1a\x02\x63\x00\xc3\x87\x7f\xfd\x2d\x60\x86\xb4\x6c\x59\xca\x39\x49\x25\x67\x73\xb8\x21\x09\xa0\x1b\xfd\xf8\xfa\x43\x03\x67\x30\xc5\x92\x34\x95\x86\x02\xb7\x58\x89\x7a\x83\x5c\x83\x46\xa5\x39\x6a\x20\x2b\xc2\xb8\xd2\x20\x19\x7f\xc0\xfc\xd0\xa3\xc8\xb5\x64\x65\xb3\xc2\x4b\xd4\x3b\x21\x1f\x86\x20\x1b\xa5\x18\xe1\x6b\x56\x55\x3d\xab\x8c\x71\x04\xbd\x46\x28\x3a\xbd\xbc\x5d\xa9\x40\xaf\x89\x86\xc9\x49\x03\x6c\x08\xe3\xda\xe8\xef\x1d\x97\x0c\x7b\x00\x67\x70\x21\x28\xa9\xac\x09\x8c\xaf\x80\x0a\xae\x25\xa1\x1a\x48\x51\x48\x54\x0a\x15\x70\xc4\x02\xb4\x80\x1c\x41\xa1\x86\x1d\xd3\x6b\x40\xbe\x85\x2d\x91\x8c\xe4\x15\xaa\x41\x0f\x8e\xf2\x46\x25\x00\x2b\x86\x10\x04\x81\xfd\x8d\x7a\x8d\x12\x9b\x4d\xe7\xc1\xdb\x62\x08\x69\x90\xb6\x73\xb9\x10\x5a\x69\x49\xea\x05\xa2\x54\xad\xac\x03\xfd\x73\x56\x87\xe7\x9e\x9f\x0c\xdc\x81\x3b\xf0\xce\x35\xad\xcf\x83\xd4\x77\xfd\x73\x56\x97\xea\xfc\x6a\xb3\xbc\xda\xe7\xbb\x87\xe6\xfe\xc3\x87\x69\xd9\x7c\x59\xe6\xfb\xd9\xe8\x1a\x97\x97\x93\x0b\xf1\xe5\x70\x88\xa2\x74\x7b\xc5\x57\xbf\x6d\x17\xef\x3f\x5d\x7c\x78\xe8\xff\x81\xd2\xe0\xa8\xf4\xb7\x32\x9e\x5d\xc6\x9b\x87\xcf\x77\xf8\xe9\xee\xdd\x9d\xff\x79\xd1\x78\xf1\xef\x75\xf1\x3a\x78\xf8\x45\x78\xcb\x60\xb3\x26\xeb\xc5\x38\xba\xc1\x88\x7b\xad\xd2\x63\xa8\x46\xc7\x48\xb5\x0e\x18\xf7\x91\x6b\xa6\x0f\x73\x42\xb5\x90\x87\x21\xf4\xfb\xdd\x0c\xe1\x74\x2d\xe4\x35\xd6\x42\xb1\xef\xa6\x18\xdf\x0a\x46\xf1\x96\xd7\xc4\x84\xaf\xdf\xef\xd9\xec\xbc\x27\x8c\xff\x10\x2b\x5d\x12\xe1\xd5\x75\x0b\x96\x9f\x7a\xf0\x18\x1c\xad\x2d\x67\x70\xd9\x6c\x50\x32\x0a\x6f\xa7\x20\x4a\x0b\x94\x47\x90\xe8\x74\x9c\x72\x16\x79\x9d\xd4\xf8\x98\x18\xa8\x98\xd2\x46\x92\x8b\x02\x9f\x62\xaa\x96\x62\xcb\xec\x84\xb0\xba\x1f\x19\x70\x34\xf4\x0f\x13\x1d\x44\x03\xdf\x8f\x06\xbe\xeb\x0e\x42\xff\xfb\x64\x7b\xfe\x34\x78\x27\xc4\xdd\x05\x63\xf4\xea\xb7\xdd\x72\xbd\x1c\x7f\x88\xf7\xef\xe8\x42\x5c\x94\xf1\xf5\xd5\x87\x5f\xe6\xf5\xae\xf4\x64\x12\xed\x2e\xf6\xfe\xfd\x75\x50\x4f\x0a\xaf\xff\x23\xf5\x69\x3c\xf0\x3d\xf7\x39\xf5\x57\xf7\xef\x47\xe9\xeb\xc5\x1b\xb9\x9d\xdd\x8f\xb3\x5d\xf1\x20\x6e\xe9\x68\xb4\x99\xdc\xbf\xa9\x33\x3c\x1c\xee\xc3\x9b\x59\xba\x9a\xcb\x60\xbd\xbc\xfc\xbd\xdf\xc5\x68\xd6\x01\xfb\x94\x89\xb7\x53\x70\xa0\xcb\xc6\x73\xd0\x0f\x3b\xe1\x0b\x62\xc2\x03\x05\xd6\x95\x38\x60\x01\x37\x1b\x22\x35\x4c\x3a\x44\x29\x28\x85\xb4\x01\x5d\xb1\x2d\xf2\x6f\x42\xf9\x14\x75\xf0\x2c\xec\xdc\x7d\x86\xf9\x74\x9a\x8e\x93\xdc\xc7\xc4\xf5\x68\x56\x26\x45\xe6\xce\x53\x8f\x64\x89\x17\x47\xb1\x4f\x47\x93\x28\x0a\xf3\xe0\x05\x80\xba\xfb\x20\xc6\x20\x4f\xf3\xac\x2c\xcb\xd8\x1d\x79\xe8\x06\x5e\x59\xb8\x49\x9c\x78\x7e\x96\x16\x6e\x94\x84\x11\x2d\xc7\xc4\x7f\x0e\xca\xee\x7e\xe6\xc5\x7e\x38\x9a\x85\x49\x1c\x63\x19\x90\x51\x18\xb8\xae\xe7\xfb\xd3\x68\x36\x22\x11\x09\x71\x94\x94\x93\x28\x4b\xd2\x0e\xf4\xef\xc4\x96\xb4\x5e\x3f\x82\x68\x8e\x92\x93\x6a\x8d\x6c\xb5\xd6\x1d\x84\xce\xce\xce\xba\x78\xb6\x12\xf3\xd1\x55\xf7\xdf\x81\x3b\x43\x53\x8c\x97\x8d\x24\x70\x10\x0d\xac\x0c\xbf\x72\x40\x29\x85\x34\xe0\x58\xae\x99\x02\x89\x9f\x1b\xb3\x0b\x53\xc0\x85\x06\xd5\xd4\xb5\x90\x1a\x0b\xc8\x91\x92\x46\xa1\x91\x94\x16\xfb\x66\x89\x6c\x38\x37\x1c\x69\x19\x50\x69\xa2\x4d\x01\x34\x66\x68\x00\xd7\x0d\x6f\xc7\x1d\xa7\x1b\xfb\x99\x48\xba\x66\x5b\x1c\xf4\xff\xa7\x33\x0a\x60\x67\xea\x47\x0b\x28\xc4\xff\x5a\x09\x02\x95\x65\xdf\x9a\x48\xa6\x0f\xed\x46\x56\xcb\x83\xf5\x07\x57\xc3\xf6\xef\xc7\x6e\x81\xe3\xd0\x35\x61\xfc\xe7\x76\xda\x71\x8c\xb5\x3f\x07\x6e\xe0\x86\xe0\x38\x3b\x22\xeb\xee\xcb\xc9\x89\x94\x0c\x25\x44\x71\xea\xba\xae\x0b\x8e\xc3\x85\x43\x38\x65\xc8\xb5\x93\x57\x82\x3e\xa8\x76\x4c\xa1\xdc\xa2\x53\x99\xa0\x82\xe3\x6c\xc8\xde\xa9\x4d\x89\x82\x1f\x19\x21\xc5\x49\xad\xd6\x42\x77\x83\x76\x6c\xc3\xf8\x37\x7f\x8d\xcd\x84\x6a\xb6\x45\x70\x1c\x03\x4d\x13\x22\x51\x96\x4f\x23\x01\x8e\x53\xe4\x0e\x15\x9b\xda\xac\x17\x1c\x94\x2a\x8c\x4b\x84\xae\xd1\x51\xec\x0b\x42\xe8\x66\x31\x38\xce\x27\x25\xb8\xac\xa9\xb3\x16\x4a\x2b\x20\x55\xf5\x68\x8c\x71\x8d\xb2\x24\x14\xcd\xf8\xc7\x6f\xd3\xfd\x34\x98\x3f\xca\xfc\xd8\xb8\x8f\x85\xa9\x24\x8e\xad\x21\x5a\xc0\x1d\xe6\x37\x66\x5c\x2b\xb0\x31\x91\x50\x4a\xb1\x81\x86\x6b\xd9\x28\x03\x09\x21\xd9\x8a\xf1\x21\x0c\x06\xfd\x67\xf3\x69\x4a\xf6\x49\x2e\x3f\x3a\x4e\xc3\x15\x29\xd1\xc1\x7d\x2d\x14\x7e\x84\xb2\x22\xab\xef\x00\xfc\xef\xf1\xb4\xff\x17\x79\xfa\x9b\x5a\xfa\x97\x99\xda\x73\xc3\x81\x17\x85\x03\x2f\x1d\x44\x4f\x8e\xe5\x23\x95\x2e\x54\xcc\x08\xde\x36\xf3\xfb\xcb\xc6\x7b\xbd\xdf\xaa\xc3\x78\x79\x23\x97\x2a\xdb\xea\x71\x9c\xeb\xf7\x23\xfe\x66\x2e\x2e\x3e\xe5\x0f\x5f\x26\xa4\xff\x03\xf5\xd1\xc0\x4b\xa3\x81\x1f\x24\xcf\x6e\x30\x79\x4d\x77\x6c\xf9\x49\xbc\xbb\x7b\x53\x8e\x49\x98\xfa\xb7\x0b\x4d\xf0\x76\x7f\x79\xb1\x2b\xd2\x2f\x39\x1f\x7b\x37\xc9\x0e\x47\xf7\xb7\xfb\xfb\x97\xb9\xda\x92\xc6\xb3\x4c\xed\xff\x0d\x54\xfd\x02\x53\x07\x71\x9c\x87\x9e\x17\xfb\x24\x0a\xca\x22\x89\x8a\x2c\x2a\x02\xaf\x98\xc6\x85\x37\x09\x8b\x34\xc8\xa7\x61\x10\x8f\xc7\xf8\x22\x53\x27\xd1\x98\xd0\x71\xe6\x8f\x02\x17\x93\x59\xe9\x4d\x83\x94\xfa\x24\xf0\xc6\xe1\xdc\xcf\x82\xa8\x08\xb2\x79\x9c\xa4\xf4\x05\xa6\x4e\x93\xd4\x45\xcf\x0b\x03\x37\x88\xf3\x90\x66\x49\x56\xce\xfc\x28\xf0\xfc\x94\x84\xa9\x9b\x84\x6e\x16\x94\x5e\x96\x26\x1d\x53\x5f\x8b\x5a\x69\x7c\xc2\xd5\x85\x58\xd5\x44\xd3\xf5\x9f\xeb\x42\x82\xbf\x88\xee\xe3\xee\xf0\x6a\xf9\xeb\xf4\x57\xa0\x12\x0d\x55\xcb\xce\x54\x83\x70\xab\xe7\xa7\x67\x01\xff\xb7\x37\x27\xff\xb9\xf6\xa4\x0d\xc2\x73\xa0\x0f\xfe\x59\xcc\xcf\xd3\xd8\x4b\x92\xdc\x4f\xa2\x59\x38\xa7\xb9\x3f\xca\xa3\x51\x30\xa7\xf3\x68\x16\xc6\x84\xe4\x91\x57\x26\xc1\x34\x21\xf1\x8b\x98\x2f\xe3\xc0\x2d\xd2\x7c\x16\xc5\x71\x38\x49\xe6\x63\xcf\x0f\xc2\xc9\xac\x0c\xd3\x3c\x1e\x25\x7e\x46\x67\x18\x8c\x13\x6f\x9a\x3e\x8f\xf9\x0c\x11\xd3\x79\x3e\x0b\x66\x7e\x46\xb3\x98\x4e\xb2\x30\x9c\xbb\x88\x13\x2f\xca\xc2\x12\xbd\x3c\x0e\x82\x62\x64\x4a\xef\x6b\x4b\x6e\x5a\xf0\xef\x40\x8f\x9b\x9c\x48\x4a\x0a\x94\xc2\xcc\xfc\x29\xec\x7b\xee\x7f\x41\xf9\x3d\x28\xbd\x7f\x16\x94\xbe\x1f\x25\xc4\x1d\x27\xb3\xc8\x0b\xa2\xd4\xa7\x41\x3c\xf6\xfc\x84\x86\x33\xb7\xf0\x42\x7f\x9e\x8e\xb3\xd4\x4f\x02\xf2\x72\xcb\x1c\xfb\x18\xa5\xe3\x20\xcb\x48\x41\xdd\x20\xc0\x18\x43\x37\xcc\x92\x74\xea\xc5\xd3\x28\xf4\xfc\xa0\x0c\x27\x9e\x3b\xa6\xcf\x83\x72\x1c\xe7\x49\x3c\x9d\x4c\xe3\x51\x18\xc5\xd3\xa8\xc8\xe6\xe5\x3c\x99\x7a\xe9\x3c\x8a\xfd\x69\x90\x46\x61\xe9\x79\x24\x9a\x64\xfd\x5e\xef\x0c\xa6\x44\x13\xb8\xd1\x42\x92\x15\xf6\x54\xfb\xdd\xde\xee\x17\x44\xaf\x6d\x64\x2a\x73\x87\x9c\x8e\xa1\x64\x15\xf6\x00\x6a\xa2\xd7\x43\x38\xd7\x9b\xfa\xfc\xeb\x2b\xc3\xff\x15\x44\x93\x81\x5d\x59\xe4\x46\xef\x44\xf0\x92\xad\x1a\x49\x6c\x97\x74\xdc\x80\xda\xd1\x9b\x3f\xbf\x4d\xab\xe0\xc9\x6e\x23\x4a\x45\xc3\xb5\x82\x07\x3c\x40\xe7\x45\x8f\x74\x83\x66\x9f\x07\x3c\x98\x61\xec\x34\x1e\xa7\x8c\xec\xdb\x53\x5b\xb8\x33\x00\xb2\x40\x18\x2d\xde\x02\xe1\x05\x2c\xfc\x05\xdc\xb4\x3d\x9d\x39\x48\x90\x9b\x93\xa2\x67\xce\x80\x37\x42\x69\x4e\x36\x38\x84\xd3\xcb\x40\xef\x0c\x16\x42\xea\x4e\x8d\x51\xf1\x63\x51\xb3\x68\x08\xa9\x9b\xfa\x66\x7b\x53\xa7\x8e\x16\xb6\x31\x06\xfa\x38\x6a\xaa\x57\xfb\x75\x1b\xa4\x9b\x1a\x29\x2b\x0f\x30\xdb\x6b\xdb\x7f\xc1\xdb\xc5\x23\x6b\x6d\xc3\x48\x09\x87\x1c\x41\xa2\xe9\x89\x0b\x20\x1a\x58\x09\x39\xae\x19\x2f\xe0\x72\xb4\x34\x6a\xb0\x93\x7e\xbb\x18\xc2\x6e\xb0\x1f\x1c\x06\x5f\xda\x14\x18\xab\x1b\x85\xc5\xa9\x10\x8c\xdf\x15\x39\xa0\x34\x89\xb0\xe6\xda\x32\xb6\xab\x97\x6c\x83\xa2\xb1\x6e\x72\x10\x35\xf2\xee\xf1\xa7\xeb\x88\xed\x59\x6a\xbb\xfc\x1e\x1c\x87\x3b\x91\x21\xf4\x03\x57\x59\xd8\x5d\x35\xd8\xe0\x77\xee\xda\xdd\x89\x3a\x70\xba\x96\x82\x8b\x46\x99\xe3\x99\xa2\x52\x8c\xaf\x7a\x9f\x8d\x40\x1b\x8c\xf6\xe9\x4a\xb5\xae\x37\x9b\x1c\xa5\xa1\x47\x53\xf3\x28\xd5\x39\x15\x5c\x19\xde\xec\x0e\xfb\x1d\xab\x2a\x13\x17\x52\x99\x16\x5f\xb7\x91\x51\x9a\x48\xdd\xd4\x3d\x30\xf2\x77\xad\xe0\x10\x5a\xf7\xe6\x12\x51\x41\x53\xc3\x64\x71\x0b\xf4\x40\x2b\x54\xad\xab\xed\x06\xe6\x36\xb7\x23\xcc\xbe\x78\x19\x7b\x71\x8b\x06\x47\xd0\x4d\xdf\x11\x66\xbd\x7d\x7f\xd3\xb2\x8f\x25\xf1\xce\x42\x89\x5a\x32\xb4\xb7\x12\xb1\xeb\x82\x4d\x40\x13\x65\x48\xdc\x7c\x5d\xb7\x0b\x2c\x97\xf7\x1e\x51\x9e\xb2\xd9\x67\xf4\xdb\x78\xf5\x8e\x84\xd7\x41\x04\x2b\x34\x5c\xb6\x5b\x33\xba\x3e\x91\x21\x74\x48\x37\x49\x31\xb7\xd2\xee\x1c\x11\x26\x7e\x5d\xf3\x53\x00\x6b\xaf\x1f\xb4\x51\x5a\x6c\xba\x4d\x8e\x65\xd8\x3d\x0e\x76\x05\x76\x69\x11\xdf\xdf\x10\xc6\xfb\xa7\x27\x40\x5b\xe1\x9d\xe2\xd3\xbe\xb4\x32\x17\xc6\x16\x9a\xaf\x76\x68\xef\xcb\x4c\x22\xec\x14\x08\x09\xac\xa6\xdd\xbb\x20\xc9\x2b\x34\x3f\xa9\x6d\xbb\xda\x68\x9a\xf6\xca\x08\xde\x5e\x5f\x0c\x61\xad\x75\x3d\x3c\x3f\xb7\x17\x34\x73\xab\x1b\x66\x51\x18\xb5\x40\x34\x2d\x9a\xc4\x8d\xd8\x22\xbc\x32\x97\x70\x03\x61\x23\xbb\x22\x6a\x21\x19\x35\xb5\xe9\x1e\x3f\x47\xe4\xd8\x97\xce\x15\x51\x50\xb1\x0d\xd3\xed\xe2\x0b\xf3\xf3\xb4\xf8\x1b\x90\x6b\x61\xb3\xdd\xe6\x8a\x7f\x75\x4f\x4b\xc2\x15\x39\x5d\x01\x8d\x23\x45\xd1\x3e\x76\x12\xb0\xb7\x64\xcb\x1f\xad\x3f\xa0\x25\x5b\xad\x50\x62\xd1\x96\x84\xc6\xbd\x3e\x02\xa5\x2d\x8b\xd8\x35\x75\xf1\xdc\xc6\x12\x49\x01\x82\x57\x07\x53\x6e\xc7\x62\x39\xbe\xf8\x1e\x4d\xfa\xaa\xfa\x1a\x49\xf1\xad\x7a\x2f\xea\xb4\x5f\x9a\x74\x3c\xb6\xbd\x16\xa2\x82\x0d\xd9\x9f\xc0\xa9\x05\x28\xe4\x85\x01\xe6\xa3\x65\x62\x6b\xa9\x60\x43\xf6\x27\x8c\xfa\x5d\xa4\x7e\xac\xd2\xde\xb5\xb7\xa4\xb2\x7a\x0f\x6d\x01\x11\x63\x20\x6d\xa4\xb4\x8f\x91\x8f\x24\xd6\x44\x41\x8e\xc8\xa1\x40\x8d\x54\xdb\x30\x1d\x15\x98\xfd\xcc\xc1\xe8\x77\x1e\x4c\x99\xb2\x90\xb1\x1a\x95\xd8\x3c\x81\x9c\x82\x42\x3c\x7e\x92\x01\xbd\xb7\x16\x91\x9a\x99\x32\xdb\x2f\x84\xa8\x46\xd4\xd0\xca\x8c\x1b\x4d\xc5\x10\xb4\x6c\xd0\x14\x1c\xe1\x07\x28\x30\x6f\x56\xab\x8e\xd2\x4c\x1d\x58\x02\x59\x09\x30\x9b\xf4\xec\x6c\x5b\x6f\x75\x2d\x45\x69\xd3\x73\x12\x31\x64\x69\x46\x87\x50\x92\x4a\x61\xaf\xd7\x1e\xf0\xdd\xe3\x76\x2d\x91\x8a\x8d\x45\x9a\xdd\xf0\xff\x03\x00\x00\xff\xff\x69\xa8\x6f\xff\xd1\x17\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6097, mode: os.FileMode(420), modTime: time.Unix(1554286197, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1551868703, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

