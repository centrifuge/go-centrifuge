// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\xcb\x73\xdb\xb8\x93\xc7\xef\xfa\x2b\x7a\x95\x4b\xb2\x35\x91\x49\xf0\xad\xaa\x3d\x50\x2f\x27\x71\xec\xc8\x96\x1f\x13\x5f\xb6\x40\xb2\x29\x21\x26\x09\x06\x00\xf5\xf0\x61\xff\xf6\x2d\x80\x94\xa2\xc4\xa3\x4c\x6d\x66\x67\xaa\xb6\xf6\x97\x8b\x55\x78\x7c\x01\x74\x7f\xba\x1b\x44\x5e\xc1\x04\x73\xda\x14\x0a\x32\x5c\x63\xc1\xeb\x12\x2b\x05\x0a\xa5\xaa\x50\x01\x5d\x52\x56\x49\x05\x82\x55\x4f\x98\xec\x7a\x29\x56\x4a\xb0\xbc\x59\xe2\x15\xaa\x0d\x17\x4f\x43\x10\x8d\x94\x8c\x56\x2b\x56\x14\x3d\x23\xc6\x2a\x04\xb5\x42\xc8\x3a\xdd\xaa\x1d\x29\x41\xad\xa8\x82\xf1\x41\x01\x4a\xca\x2a\xa5\xf5\x7b\xfb\x21\xc3\x1e\xc0\x2b\xf8\xc8\x53\x5a\x98\x2d\xb0\x6a\x09\x29\xaf\x94\xa0\xa9\x02\x9a\x65\x02\xa5\x44\x09\x15\x62\x06\x8a\x43\x82\x20\x51\xc1\x86\xa9\x15\x60\xb5\x86\x35\x15\x8c\x26\x05\xca\x41\x0f\xf6\xf3\xb5\x24\x00\xcb\x86\xe0\x38\x8e\xf9\x8d\x6a\x85\x02\x9b\xb2\x3b\xc1\xfb\x6c\x08\xa1\x13\xb6\x7d\x09\xe7\x4a\x2a\x41\xeb\x39\xa2\x90\xed\xdc\xb7\xd0\x3f\x63\xb5\x7b\x66\x93\x60\x60\x0d\xac\x81\x7d\xa6\xd2\xfa\xcc\x09\x89\x45\xce\x58\x9d\xcb\xb3\xeb\xf2\xf6\x7a\x9b\x6c\x9e\x9a\xc7\xcf\x9f\x27\x79\xf3\x7c\x9b\x6c\xa7\xf1\x0d\xde\x5e\x8d\x3f\xf2\xe7\xdd\xce\xf3\xc2\xf5\x75\xb5\xbc\x5f\xcf\x2f\xbf\x7c\xfc\xfc\xd4\xff\x13\x51\x67\x2f\x7a\x9f\xfb\xd3\x2b\xbf\x7c\xfa\xfa\x80\x5f\x1e\x2e\x1e\xc8\xd7\x79\x63\xfb\xbf\xd7\xd9\xb9\xf3\xf4\x81\xdb\xb7\x4e\xb9\xa2\xab\xf9\xc8\x5b\xa0\x57\xd9\xad\xe8\xde\x54\xf1\xde\x52\xed\x01\xf4\xf1\xb1\x52\x4c\xed\x66\x34\x55\x5c\xec\x86\xd0\xef\x77\x3d\xb4\x4a\x57\x5c\xdc\x60\xcd\x25\xfb\xa1\x8b\x55\x6b\xce\x52\xbc\xab\x6a\xaa\xcd\xd7\xef\xf7\x8c\x77\x2e\x29\xab\xfe\x90\x95\xce\x89\xf0\xfa\xa6\x85\xe5\x4d\x0f\x8e\xe1\x68\xf7\xf2\x0a\xae\x9a\x12\x05\x4b\xe1\xfd\x04\x78\x6e\x40\x39\x42\xa2\xd3\x38\xf8\xcc\xb3\xbb\x59\xa3\xbd\x63\xa0\x60\x52\xe9\x99\x15\xcf\xf0\x25\x53\xb5\xe0\x6b\x66\x3a\xb8\xd1\x3e\xda\xc0\x7e\xa3\x7f\xea\x68\xc7\x1b\x10\xd7\x1f\xd8\x8e\x3b\x88\xbc\x1f\x9d\x6d\x93\x89\x73\xc1\xf9\xc3\x95\x7c\x94\x0f\xc1\x6d\x92\x3e\x7a\xe1\x55\x60\xdf\x5d\x2f\x2e\xbc\xc9\x97\xc7\xaf\xe5\xec\xe9\xdd\xfc\xdd\x66\x3b\xbb\xb8\x8d\x77\xfc\xee\x6e\x12\x66\x79\xff\x47\x79\x3b\x0a\x07\xb6\x6f\x0f\xec\xd0\x3a\xa5\x3f\x41\x22\x37\x0f\x53\x27\x27\xec\x43\x72\x87\xd7\xd1\xf9\xdd\xdd\xf5\xe8\xdd\x58\x3c\x7c\x4c\x46\x29\x8d\x2e\xcf\x2f\xbf\xe6\x65\x32\x5e\x8a\x26\xe9\x77\x46\x9a\x76\x64\x1f\x5c\xf1\x7e\x02\x6f\xa1\x73\xc7\x29\xf6\xdd\x6e\xf2\x47\xaa\xed\x03\x19\xd6\x05\xdf\x61\x06\x8b\x92\x0a\x05\xe3\x0e\x29\x09\x39\x17\xc6\xa2\x4b\xb6\xc6\xea\x3b\x5b\xbe\xc4\x0e\x4e\x72\x67\x6d\xf3\x30\xb4\x92\xd0\xb7\x6c\xcb\x49\x32\xd7\xa3\x1e\x71\xbc\xc0\x8d\x11\xc7\x56\x30\x76\x23\x62\x39\x76\xee\x06\xa1\xfd\x13\x42\xad\x6d\x44\xe2\x89\xeb\x8e\x46\xe1\x8c\x38\x13\x2f\xb3\x49\x84\xa3\x90\x50\xcf\xca\x9c\xd0\x0f\x93\x91\x9b\xd8\x29\xce\xec\xd9\x29\x96\xad\x6d\xea\xc6\x21\x8e\x48\x90\x8f\x9c\x29\x25\x63\x2b\xf2\xbc\x59\x48\xbd\x91\xed\xdb\xde\x88\xf8\x59\xe8\xcd\xc6\x23\x0c\xb1\xa3\xfe\x82\xaf\x69\x7b\xea\x23\x46\x13\x14\x15\x2d\x56\xc8\x96\x2b\x25\x7f\x8d\x6f\xf2\x17\xf9\xfe\x6e\x0b\xff\x33\xc2\xc9\x80\x38\xd6\xc0\xb6\xfd\x53\x08\x2e\x92\x6d\x72\x31\x4e\x1e\x57\xd1\x87\x7b\x25\xaf\x77\xf7\xe7\xd9\xed\x5c\x50\xf7\xa6\x5e\xc4\xae\x4a\xd6\xd2\xa7\x95\x6d\x7f\xd9\x9c\xc7\xe4\xf9\x05\xe2\xc4\x71\x07\x01\x19\xd8\x24\x38\x25\x7f\x5d\x92\x74\x51\x8a\x29\xa3\x8b\xcb\x7b\x77\x79\xb7\x0e\x1e\xce\x57\xf5\xf2\x66\xc3\xc3\x0d\x9f\x2d\xe4\xbb\xd5\xe3\x79\x72\xce\x1c\x1a\x87\xdb\x9f\x13\x6e\x9c\x73\x92\x6f\xf2\x37\x00\xfe\x13\xbe\x6d\xc7\x27\xd3\x74\x94\x87\x7e\x10\x11\xd7\x99\x12\x37\x8f\xad\xe9\xd8\x25\x5e\x46\xd0\xb6\x62\x2b\x24\xc4\x49\x83\xc9\x4f\xf9\x0e\xec\xd0\x9a\x04\x81\x63\x5b\x19\xa6\x61\x3c\x22\x61\x4c\x43\x8b\x4c\x53\x2b\x9a\xe5\x31\x99\xcc\x7c\x17\x23\x2b\x48\x4f\xf3\x6d\x87\x8e\x1d\x58\x6e\x68\xfb\x6e\x98\x63\x9e\xa3\x1b\xb9\xd6\xcc\x99\xc4\x71\xe6\xd0\x20\x49\x93\xc4\x4a\xbd\x38\x9e\x75\x7c\xdf\xf0\x5a\x2a\x7c\x41\x78\xc6\x97\x35\x55\xe9\xea\xd7\xe0\x76\xfe\x22\xdc\xfb\xd5\xe1\xf5\xed\xa7\xc9\x27\x48\x05\x52\x85\x20\xba\xad\x6a\xc0\x8d\xce\x9b\xff\x77\x19\xbd\xb5\xc0\x29\xe2\x9d\x7f\x16\x78\x2b\x73\x22\x7b\x1a\x10\x87\x78\x63\xcc\xc6\xae\x3d\x75\x43\xcb\x73\xa6\x41\x40\xc2\x90\x86\xd1\x8c\x4c\x1d\xdb\xb6\xbd\x9f\x02\x4f\xc6\xa1\x35\xb3\x27\x34\x9f\xd0\x80\xc6\x13\x4c\xc8\xd8\x0e\xbc\xcc\x1d\xb9\x4e\x1c\x7a\xa1\x1b\x38\x53\xdb\x0e\x6c\xe7\x34\xf0\x6e\x94\x60\xe4\x58\xd6\xd8\xf1\xc7\xb9\x47\x9c\x30\x99\xf9\xd1\xd4\x1d\xbb\x91\xe7\x5b\xb3\x59\x98\x07\x33\x3f\x20\x53\xf7\xe8\x1a\xa3\x6f\x2d\xc7\xc0\xc3\xe4\x13\x5c\x7d\xba\x85\xbb\xc5\xf4\xdf\x7a\x00\x58\x26\x54\xa4\x34\x43\xc1\xf5\xa8\x5f\x8a\x01\xdb\x3a\x09\xe7\x4b\x7e\x08\x19\xd8\xf6\xc9\x7c\x19\x2f\x9d\x69\x1a\x2b\xf1\xf9\x7e\xbc\xdd\x3c\xfb\x4f\xbe\xbc\x8d\xd8\xe3\xe2\xe6\x59\x3d\x47\x93\x60\x77\xf7\x5c\x8f\xe6\x37\xd3\xd9\xb3\xb8\xe3\xf7\xfd\x97\x2b\x98\x84\x4f\xec\x81\x6d\xbf\xb8\xc0\xee\x57\xb8\x38\xdf\xb0\xed\xef\x58\x35\xbf\xc7\xf7\x5f\x9f\x3e\x5c\x94\xd5\xbb\x45\xfc\x61\xf2\xe5\x39\x0f\xf0\xfc\x92\xfb\x4a\x70\xb6\x7c\xdc\x96\x41\xec\xdd\xfc\x9c\xd0\xb2\xb5\xee\x29\x42\xed\x7f\x96\xd0\x78\xe6\x7a\x7e\x6a\xfb\x4e\xe8\x53\xdf\xcd\x33\x77\xe6\x26\x7e\x44\x73\xdb\xa1\xa1\x3f\xc9\xad\x91\xe7\x93\x98\x5a\xd6\x4f\x09\xf5\x9d\x60\x14\x8e\x9d\x09\x89\x63\x67\x9c\x12\xcb\x9f\x44\xae\x67\x47\x89\xe7\x86\x11\xb1\xc2\x28\x8d\xa6\x7e\x10\x45\xd6\x69\x42\x47\x1e\xba\xc4\xc9\xc6\x69\xe0\x5a\xc9\x68\x1c\x5a\x79\x64\xf9\xb6\xe3\xa0\xed\xf9\x96\x9d\x47\xa1\x15\x45\xa1\xe3\xf9\x3f\x10\xfa\x0d\xa9\x23\x20\xff\xb7\x61\xfc\xbb\x51\xfc\x17\x88\xff\x37\x41\x7c\x05\x13\xaa\x28\x2c\x14\x17\x74\x89\x3d\xd9\xfe\x6d\xbf\xd3\xe7\x54\xad\x8c\x65\x0a\xfd\x35\x38\x19\x41\xce\x0a\xec\x01\xd4\x54\xad\x86\x70\xa6\xca\xfa\xec\xdb\x7b\xc1\x7f\x66\x54\xd1\x81\x19\x99\x25\x5a\x77\xcc\xab\x9c\x2d\x1b\x41\x15\xe3\xd5\x61\x81\xd4\xb4\x2e\x7e\x7d\x99\x56\xe0\xc5\x6a\x71\x9a\xf2\xa6\x52\x12\x9e\x70\x07\xdd\x29\x7a\xb4\x6b\xd4\xeb\x3c\xe1\x4e\x37\x63\xa7\xb8\xef\xd2\x73\xdf\x57\x0a\x45\x4e\x53\x84\x8d\x06\xc8\x80\x10\xcf\xdf\x03\xad\x32\x98\x93\x39\x2c\x50\xac\x51\x98\xbb\x0d\x56\xfa\xf2\xd2\xd3\xd7\x92\x77\x5c\xaa\x8a\x96\x38\x84\xc3\x37\x7e\xef\x15\xcc\xb9\x50\x9d\x8c\x96\xf8\xe3\xa9\x7a\xd0\x10\x42\x2b\x24\x7a\x79\x1d\xa5\x6f\x15\x7f\x5b\x23\x0a\x48\x8f\xad\x26\x7b\x35\xa9\x5b\x23\x2d\x6a\x4c\x59\xbe\x83\xe9\x56\x99\x2f\x02\x78\x3f\x3f\xda\xad\x16\x85\x94\x56\x90\x20\x08\xa4\xe9\x0a\x33\xa0\x0a\x58\x0e\x09\xae\x58\x95\xc1\x55\x7c\xab\x65\xb0\x9b\xfd\x7e\x3e\x84\xcd\x60\x3b\xd8\x0d\x9e\x5b\x17\xe8\x5d\x37\x12\xb3\x43\x20\xe8\x73\x17\x74\x87\x42\x3b\xc2\x6c\xd7\x84\xb1\x19\x7d\xcb\x4a\xe4\x8d\x39\x66\x05\xbc\xc6\xaa\x7b\xc6\xa9\x30\x35\xbb\xd6\xd7\x3b\x7d\x18\xd9\x83\x7d\x73\x37\x65\x08\x7d\xc7\x92\x7d\xa3\x52\xb2\x8a\x95\x4d\x09\x19\x16\x74\x67\xd6\xc5\x35\x8a\x1d\xd4\xa4\x06\x81\xb2\xe6\x95\x44\xad\x44\xd7\x9c\x65\xa0\x58\xa9\x57\xa1\x4a\xd1\xf4\x49\x1a\x01\x9a\x7d\x69\xa4\x82\x84\xea\x7d\xf3\x0a\x56\x5c\x2a\x3d\x93\x37\x22\x45\x09\xaf\x17\x8b\xc9\x6f\x30\x9e\xdf\xfd\x06\x29\x17\x28\x61\x30\x18\xbc\xe9\xde\x9f\xf8\x13\xb0\x0a\x0a\xbe\x34\x91\x3f\x84\xbe\xde\x9f\xde\xab\x6c\x4a\xcc\x20\xd9\xe9\x63\xb5\x3e\xe8\x6b\x2b\x6e\xff\xe3\xf5\x9a\x16\x0d\xde\x20\xcd\xe0\xdf\x81\xbc\x01\x26\xa1\x40\x69\xae\xb8\x15\x98\x3e\x48\xb0\xe0\x9b\xdf\xb4\xf5\x2a\x48\x57\xb4\x5a\xe2\xe1\x1c\x13\x73\x46\xc5\x61\xdb\x83\xef\x1b\x87\xd0\xf7\x2c\xab\x94\x26\x14\xaf\x1b\x6c\xf0\x07\x04\x8c\x65\xa8\xdc\x55\xe9\x4a\xf0\x8a\x37\x52\xdf\xa2\x53\x94\x92\x55\xcb\xde\x57\x3d\xa1\x05\xa4\x7d\x98\x93\x2d\x0e\x4d\x99\xa0\xd0\x05\x43\xe7\x41\x14\xf2\xac\x3b\x9a\xe8\xee\xe4\x1b\x56\x14\x9a\x15\x5a\x14\x3c\xa5\xaa\xa5\x45\x2a\x2a\x54\x53\xf7\x40\xcf\x7f\x68\x27\xea\x9a\x62\x19\xfd\x99\x40\x94\xd0\xd4\xda\xa2\x90\xee\xd2\x02\x65\x0b\x40\xbb\x84\x36\xc8\x86\x32\xf3\xa2\xd7\xf9\x52\x47\x17\x74\xdd\x0f\x94\x19\x06\x2e\x17\x6d\x4e\x36\x85\xad\xdb\xa3\x40\x25\x18\x4a\xb3\x99\x4d\x87\x20\x05\x45\xa5\x2e\x6c\xfa\xcf\x4d\x3b\xc0\xd4\xb7\xde\x51\x21\x90\x26\x26\x58\xfa\xbd\xc5\x7a\xfb\x32\xd0\x05\x0e\x16\xa8\x33\xfc\x66\xc5\xd2\xd5\xa1\x44\x40\x17\xff\xda\x27\x8d\xc4\x7d\x6d\xe5\xda\x82\xdd\x57\x4a\xa6\x11\xd1\x8d\x69\x23\x15\x2f\xbb\x45\xf6\xc9\xa9\x7b\xfc\xec\xd2\xce\x95\xc9\x03\x7d\x5d\x8c\xfa\x87\x27\x4e\x93\xf7\x3a\xe1\xc3\xba\x69\xc1\xb0\x52\x6d\xc0\xbe\xde\x68\x42\xbe\x36\x4c\x20\x6c\x24\x70\x01\xac\x4e\xbb\x77\x4f\x9a\x14\x86\xfe\xd4\x7c\x1f\xb5\xd6\xd4\xf4\xea\x89\x77\x37\x1f\x87\xb0\x52\xaa\x1e\x9e\x9d\x69\xff\x15\x9a\xfc\x61\xe4\xb9\x5e\x1b\x58\x74\x6b\x02\x6b\x6f\xcf\x25\xd5\x67\x62\xa9\xd1\xab\xbb\x58\xa3\xa0\x04\xad\x24\x35\x11\xab\x4f\xba\x41\x66\x66\x13\x0b\xce\x37\xc8\xa0\xe2\x9b\x1e\x68\xad\x73\x2a\xe7\x7a\xf6\x10\x88\x75\xf8\x67\x86\x9e\x53\x09\x05\x2b\x59\x57\x3f\x33\x96\xe7\x28\xf4\xe9\x0e\x1e\x3a\x44\x91\x26\x61\x49\xe5\x47\x33\x7a\xff\x64\x3b\x36\xdf\x7b\x06\xb1\x4e\x53\xb7\xc6\x59\x76\x81\xbb\x21\x38\xc7\x8d\x37\xb8\xe6\x4f\x68\xda\x3d\x6f\xdf\xdc\x56\xcf\x31\x2f\x4b\xa6\xd3\xe9\x0f\xed\x73\x81\xfb\x2e\xfb\x9b\x54\x95\xab\x4b\x56\xa9\x21\x44\xdf\xb5\xdd\x6a\x63\xe4\x28\x66\x82\x97\x43\xb0\xbd\xc3\x19\xf7\xb9\x4e\x71\x83\x77\x6b\xbb\xea\x9b\x3f\x8f\xad\xd8\x79\x2e\xcb\xda\xd7\x6b\x0a\x49\xc1\xd3\x27\x53\x46\x5a\x07\x82\x12\x6c\xb9\x44\x81\x59\x87\xa6\xd1\x5d\xb1\xe5\x0a\x05\x24\xbc\xa9\x32\xf8\x2f\x12\x42\x46\x77\x5d\xea\x54\xb8\x55\xfb\xd0\x69\xd3\xa7\x1f\x90\x55\xff\xe4\xce\x84\xce\x4f\xbc\x2a\x8e\xf2\x97\x3c\xbc\xf1\xef\xf7\xfc\x4d\x5a\xa7\xb3\xef\xe5\x6d\xaf\xcb\xce\x57\x1a\xd0\xe3\xc3\xd5\x9c\x17\x1a\x87\x43\xb8\x2a\x0e\x12\xab\xec\x07\x92\xf8\xda\x94\x8c\x92\x6e\x0f\x51\x4b\x3a\x53\xfe\xb1\x24\xd3\xc5\x77\x4d\x0b\xa3\xbb\x6b\x53\x0a\xd5\x1b\x4c\x1b\x61\x60\x3a\x9e\xb1\xa2\x12\x12\xc4\x0a\x32\x54\x98\x2a\x63\xc7\xbd\x80\x5e\x4f\xa7\x53\xd2\xe6\x52\x5a\xed\x20\xc3\xa4\x59\x2e\xbb\xea\xa4\x83\xd7\xe4\xbd\x25\x07\x6d\x88\x9e\xe9\x6d\x93\x04\x56\x26\xde\x4c\x8b\x2e\x0b\x7a\x4e\x0f\xf4\xaf\x21\xe4\xb4\x90\x68\x46\xd5\xb5\xe0\x79\x8b\xfa\x5e\x58\x57\x47\xdd\xba\x1f\xd6\x6b\xd9\xeb\xfe\x5f\xa2\x16\x98\x76\x08\x2a\xd1\x60\xef\xbf\x03\x00\x00\xff\xff\x69\xf3\x69\xe2\x8c\x19\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6540, mode: os.FileMode(420), modTime: time.Unix(1574178529, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1574093144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
