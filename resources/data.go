// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\x59\x73\xdb\xb8\xb2\xc7\xdf\xf5\x29\xfa\x2a\x2f\xc9\xad\x89\xcc\x7d\x51\xd5\x7d\xa0\x36\x27\xf1\x12\xd9\xf2\x32\xf1\xcb\x2d\x90\x6c\x4a\x88\x49\x80\x01\x40\x2d\xfe\xf4\xb7\x00\x52\x8a\x13\x47\x99\xba\x99\x33\x53\x35\x75\x4e\x5e\x94\xc2\xf2\x47\xa3\xf1\xeb\x6e\x10\x7e\x05\x13\x2c\x48\x53\x2a\xc8\x71\x8d\x25\xaf\x2b\x64\x0a\x14\x4a\xc5\x50\x01\x59\x12\xca\xa4\x02\x41\xd9\x23\xa6\xbb\x5e\x86\x4c\x09\x5a\x34\x4b\xbc\x44\xb5\xe1\xe2\x71\x08\xa2\x91\x92\x12\xb6\xa2\x65\xd9\x33\x62\x94\x21\xa8\x15\x42\xde\xe9\xb2\x76\xa4\x04\xb5\x22\x0a\xc6\x07\x05\xa8\x08\x65\x4a\xeb\xf7\xf6\x43\x86\x3d\x80\x57\x70\xce\x33\x52\x1a\x13\x28\x5b\x42\xc6\x99\x12\x24\x53\x40\xf2\x5c\xa0\x94\x28\x81\x21\xe6\xa0\x38\xa4\x08\x12\x15\x6c\xa8\x5a\x01\xb2\x35\xac\x89\xa0\x24\x2d\x51\x0e\x7a\xb0\x9f\xaf\x25\x01\x68\x3e\x04\xd7\x75\xcd\xff\x51\xad\x50\x60\x53\x75\x3b\x78\x9f\x0f\x21\x72\xa3\xb6\x2f\xe5\x5c\x49\x25\x48\x3d\x47\x14\xb2\x9d\xfb\x16\xfa\x27\xb4\xf6\x4e\x6c\x27\x1c\x58\x03\x6b\x60\x9f\xa8\xac\x3e\x71\x23\xc7\x72\x4e\x68\x5d\xc8\x93\xab\xea\xe6\x6a\x9b\x6e\x1e\x9b\x87\x4f\x9f\x26\x45\xf3\x74\x93\x6e\xa7\xc9\x35\xde\x5c\x8e\xcf\xf9\xd3\x6e\xe7\xfb\xd1\xfa\x8a\x2d\xef\xd6\xf3\x8b\xcf\xe7\x9f\x1e\xfb\x7f\x20\xea\xee\x45\xef\x8a\x60\x7a\x19\x54\x8f\x5f\xee\xf1\xf3\xfd\xd9\xbd\xf3\x65\xde\xd8\xc1\xef\x75\x7e\xea\x3e\x7e\xe0\xf6\x8d\x5b\xad\xc8\x6a\x3e\xf2\x17\xe8\x33\xbb\x15\xdd\xbb\x2a\xd9\x7b\xaa\xdd\x80\xde\x3e\x32\x45\xd5\x6e\x46\x32\xc5\xc5\x6e\x08\xfd\x7e\xd7\x43\x58\xb6\xe2\xe2\x1a\x6b\x2e\xe9\x77\x5d\x94\xad\x39\xcd\xf0\x96\xd5\x44\xbb\xaf\xdf\xef\x99\xd3\xb9\x20\x94\xfd\x90\x95\xee\x10\xe1\xf5\x75\x0b\xcb\x9b\x1e\x3c\x87\xa3\xb5\xe5\x15\x5c\x36\x15\x0a\x9a\xc1\xfb\x09\xf0\xc2\x80\xf2\x0c\x89\x4e\xe3\x70\x66\xbe\xdd\xcd\x1a\xed\x0f\x06\x4a\x2a\x95\x9e\xc9\x78\x8e\x2f\x99\xaa\x05\x5f\x53\xd3\xc1\x8d\xf6\x33\x03\xf6\x86\xfe\xe1\x41\xbb\xfe\xc0\xf1\x82\x81\xed\x7a\x83\xd8\xff\xfe\xb0\x6d\x67\xe2\x9e\x71\x7e\x7f\x29\x1f\xe4\x7d\x78\x93\x66\x0f\x7e\x74\x19\xda\xb7\x57\x8b\x33\x7f\xf2\xf9\xe1\x4b\x35\x7b\x7c\x37\x7f\xb7\xd9\xce\xce\x6e\x92\x1d\xbf\xbd\x9d\x44\x79\xd1\xff\x5e\xde\x8e\xa3\x81\x1d\xd8\x03\x3b\xb2\x8e\xe9\x4f\xd0\x91\x9b\xfb\xa9\x5b\x38\xf4\x43\x7a\x8b\x57\xf1\xe9\xed\xed\xd5\xe8\xdd\x58\xdc\x9f\xa7\xa3\x8c\xc4\x17\xa7\x17\x5f\x8a\x2a\x1d\x2f\x45\x93\xf6\x3b\x27\x4d\x3b\xb2\x0f\x47\xf1\x7e\x02\x6f\xa1\x3b\x8e\x63\xec\x7b\xdd\xe4\x73\xa2\xfd\x03\x39\xd6\x25\xdf\x61\x0e\x8b\x8a\x08\x05\xe3\x0e\x29\x09\x05\x17\xc6\xa3\x4b\xba\x46\xf6\x8d\x2f\x5f\x62\x07\x47\xb9\xb3\xb6\x45\x14\x59\x69\x14\x58\xb6\xe5\xa6\xb9\xe7\x13\xdf\x71\xfd\xd0\x4b\x10\xc7\x56\x38\xf6\x62\xc7\x72\xed\xc2\x0b\x23\xfb\x27\x84\x5a\xdb\xd8\x49\x26\x9e\x37\x1a\x45\x33\xc7\x9d\xf8\xb9\xed\xc4\x38\x8a\x1c\xe2\x5b\xb9\x1b\x05\x51\x3a\xf2\x52\x3b\xc3\x99\x3d\x3b\xc6\xb2\xb5\xcd\xbc\x24\xc2\x91\x13\x16\x23\x77\x4a\x9c\xb1\x15\xfb\xfe\x2c\x22\xfe\xc8\x0e\x6c\x7f\xe4\x04\x79\xe4\xcf\xc6\x23\x8c\xb0\xa3\xfe\x8c\xaf\x49\xbb\xeb\x67\x8c\xa6\x28\x18\x29\x57\x48\x97\x2b\x25\x7f\x8d\x6f\xe7\x4f\xf2\xfd\x8d\x09\xff\x3f\xc2\x9d\x81\xe3\x5a\x03\xdb\x0e\x8e\x21\xb8\x48\xb7\xe9\xd9\x38\x7d\x58\xc5\x1f\xee\x94\xbc\xda\xdd\x9d\xe6\x37\x73\x41\xbc\xeb\x7a\x91\x78\x2a\x5d\xcb\x80\x30\xdb\xfe\xbc\x39\x4d\x9c\xa7\x17\x88\x3b\xae\x37\x08\x9d\x81\xed\x84\xc7\xe4\xaf\x2a\x27\x5b\x54\x62\x4a\xc9\xe2\xe2\xce\x5b\xde\xae\xc3\xfb\xd3\x55\xbd\xbc\xde\xf0\x68\xc3\x67\x0b\xf9\x6e\xf5\x70\x9a\x9e\x52\x97\x24\xd1\xf6\xe7\x84\x9b\xc3\x39\xca\xb7\xf3\x17\x00\xfe\x13\xbe\x6d\x37\x70\xa6\xd9\xa8\x88\x82\x30\x76\x3c\x77\xea\x78\x45\x62\x4d\xc7\x9e\xe3\xe7\x0e\xda\x56\x62\x45\x8e\xe3\x66\xe1\xe4\xa7\x7c\x87\x76\x64\x4d\xc2\xd0\xb5\xad\x1c\xb3\x28\x19\x39\x51\x42\x22\xcb\x99\x66\x56\x3c\x2b\x12\x67\x32\x0b\x3c\x8c\xad\x30\x3b\xce\xb7\x1d\xb9\x76\x68\x79\x91\x1d\x78\x51\x81\x45\x81\x5e\xec\x59\x33\x77\x92\x24\xb9\x4b\xc2\x34\x4b\x53\x2b\xf3\x93\x64\xd6\xf1\x7d\xcd\x6b\xa9\xf0\x05\xe1\x39\x5f\xd6\x44\x65\xab\x5f\x83\xdb\xfd\x93\x70\xef\x57\x87\xd7\x37\x1f\x27\x1f\x21\x13\x48\x14\x82\xe8\x4c\xd5\x80\x1b\x9d\x37\xff\x76\x19\xbd\xf5\xc0\x31\xe2\xdd\xbf\x17\x78\x2b\x77\x63\x7b\x1a\x3a\xae\xe3\x8f\x31\x1f\x7b\xf6\xd4\x8b\x2c\xdf\x9d\x86\xa1\x13\x45\x24\x8a\x67\xce\xd4\xb5\x6d\xdb\xff\x29\xf0\xce\x38\xb2\x66\xf6\x84\x14\x13\x12\x92\x64\x82\xa9\x33\xb6\x43\x3f\xf7\x46\x9e\x9b\x44\x7e\xe4\x85\xee\xd4\xb6\x43\xdb\x3d\x0e\xbc\x17\xa7\x18\xbb\x96\x35\x76\x83\x71\xe1\x3b\x6e\x94\xce\x82\x78\xea\x8d\xbd\xd8\x0f\xac\xd9\x2c\x2a\xc2\x59\x10\x3a\x53\xef\xd9\x35\x46\xdf\x5a\x9e\x03\x0f\x93\x8f\x70\xf9\xf1\x06\x6e\x17\xd3\xff\xea\x01\x60\x95\x12\x91\x91\x1c\x05\xd7\xa3\x7e\x29\x06\x6c\xeb\x28\x9c\x2f\xf9\x71\x9c\x81\x6d\x1f\xcd\x97\xc9\xd2\x9d\x66\x89\x12\x9f\xee\xc6\xdb\xcd\x53\xf0\x18\xc8\x9b\x98\x3e\x2c\xae\x9f\xd4\x53\x3c\x09\x77\xb7\x4f\xf5\x68\x7e\x3d\x9d\x3d\x89\x5b\x7e\xd7\x7f\xb9\x82\x49\xf8\x8e\x3d\xb0\xed\x17\x17\xd8\xfd\x0a\x67\xa7\x1b\xba\xfd\x1d\x59\xf3\x7b\x72\xf7\xe5\xf1\xc3\x59\xc5\xde\x2d\x92\x0f\x93\xcf\x4f\x45\x88\xa7\x17\x3c\x50\x82\xd3\xe5\xc3\xb6\x0a\x13\xff\xfa\xe7\x84\x56\xad\x77\x8f\x11\x6a\xff\xbd\x84\x26\x33\xcf\x0f\x32\x3b\x70\xa3\x80\x04\x5e\x91\x7b\x33\x2f\x0d\x62\x52\xd8\x2e\x89\x82\x49\x61\x8d\xfc\xc0\x49\x88\x65\xfd\x94\xd0\xc0\x0d\x47\xd1\xd8\x9d\x38\x49\xe2\x8e\x33\xc7\x0a\x26\xb1\xe7\xdb\x71\xea\x7b\x51\xec\x58\x51\x9c\xc5\xd3\x20\x8c\x63\xeb\x38\xa1\x23\x1f\x3d\xc7\xcd\xc7\x59\xe8\x59\xe9\x68\x1c\x59\x45\x6c\x05\xb6\xeb\xa2\xed\x07\x96\x5d\xc4\x91\x15\xc7\x91\xeb\x07\xdf\x11\xfa\x15\xa9\x67\x40\xfe\xab\x61\xfc\xab\x51\xfc\x0f\x88\xff\x4c\x10\x5f\xc1\x84\x28\x02\x0b\xc5\x05\x59\x62\x4f\xb6\xbf\xed\x77\xfa\x9c\xa8\x95\xf1\x4c\xa9\xbf\x06\x27\x23\x28\x68\x89\x3d\x80\x9a\xa8\xd5\x10\x4e\x54\x55\x9f\x7c\x7d\x2f\xf8\xdf\x9c\x28\x32\x30\x23\xf3\x54\xeb\x8e\x39\x2b\xe8\xb2\x11\x44\x51\xce\x0e\x0b\x64\xa6\x75\xf1\xeb\xcb\xb4\x02\x2f\x56\x4b\xb2\x8c\x37\x4c\x49\x78\xc4\x1d\x74\xbb\xe8\x91\xae\x51\xaf\xf3\x88\x3b\xdd\x8c\x9d\xe2\xbe\x4b\xcf\x7d\xcf\x14\x8a\x82\x64\x08\x1b\x0d\x90\x01\x21\x99\xbf\x07\xc2\x72\x98\x3b\x73\x58\xa0\x58\xa3\x30\x77\x1b\x64\xfa\xf2\xd2\xd3\xd7\x92\x77\x5c\x2a\x46\x2a\x1c\xc2\xe1\x1b\xbf\xf7\x0a\xe6\x5c\xa8\x4e\x46\x4b\xfc\x78\xaa\x1e\x34\x84\xc8\x8a\x1c\xbd\xbc\x8e\xd2\xb7\x8a\xbf\xad\x11\x05\x64\xcf\xbd\x26\x7b\xb5\x53\xb7\x4e\x5a\xd4\x98\xd1\x62\x07\xd3\xad\x32\x5f\x04\xf0\x7e\xfe\xcc\x5a\x2d\x0a\x19\x61\x90\x22\x08\x24\xd9\x0a\x73\x20\x0a\x68\x01\x29\xae\x28\xcb\xe1\x32\xb9\xd1\x32\xd8\xcd\x7e\x3f\x1f\xc2\x66\xb0\x1d\xec\x06\x4f\xed\x11\x68\xab\x1b\x89\xf9\x21\x10\xf4\xbe\x4b\xb2\x43\xa1\x0f\xc2\x98\x6b\xc2\xd8\x8c\xbe\xa1\x15\xf2\xc6\x6c\x93\x01\xaf\x91\x75\xcf\x38\x0c\x33\x63\xb5\xbe\xde\xe9\xcd\xc8\x1e\xec\x9b\xbb\x29\x43\xe8\xbb\x96\xec\x1b\x95\x8a\x32\x5a\x35\x15\xe4\x58\x92\x9d\x59\x17\xd7\x28\x76\x50\x3b\x35\x08\x94\x35\x67\x12\xb5\x12\x59\x73\x9a\x83\xa2\x95\x5e\x85\x28\x45\xb2\x47\x69\x04\x48\xfe\xb9\x91\x0a\x52\xa2\xed\xe6\x0c\x56\x5c\x2a\x3d\x93\x37\x22\x43\x09\xaf\x17\x8b\xc9\x6f\x30\x9e\xdf\xfe\x06\x19\x17\x28\x61\x30\x18\xbc\xe9\xde\x9f\xf8\x23\x50\x06\x25\x5f\x9a\xc8\x1f\x42\x5f\xdb\xa7\x6d\x95\x4d\x85\x39\xa4\x3b\xbd\xad\xf6\x0c\xfa\xda\x8b\xdb\xff\x79\xbd\x26\x65\x83\xd7\x48\x72\xf8\x6f\x70\xde\x00\x95\x50\xa2\x34\x57\x5c\x06\xa6\x0f\x52\x2c\xf9\xe6\x37\xed\x3d\x06\xd9\x8a\xb0\x25\x1e\xf6\x31\x31\x7b\x54\x1c\xb6\x3d\xf8\xb6\x71\x08\x7d\xdf\xb2\x2a\x69\x42\xf1\xaa\xc1\x06\xbf\x43\xc0\x78\x86\xc8\x1d\xcb\x56\x82\x33\xde\x48\x7d\x8b\xce\x50\x4a\xca\x96\xbd\x2f\x7a\x42\x0b\x48\xfb\x30\x27\x5b\x1c\x9a\x2a\x45\xa1\x0b\x86\xce\x83\x28\xe4\x49\xb7\x35\xd1\xdd\xc9\x37\xb4\x2c\x35\x2b\xa4\x2c\x79\x46\x54\x4b\x8b\x54\x44\xa8\xa6\xee\x81\x9e\x7f\xdf\x4e\xd4\x35\xc5\x32\xfa\x33\x81\x28\xa1\xa9\xb5\x47\x21\xdb\x65\x25\xca\x16\x80\x76\x09\xed\x90\x0d\xa1\xe6\x45\xaf\x3b\x4b\x1d\x5d\xd0\x75\xdf\x13\x6a\x18\xb8\x58\xb4\x39\xd9\x14\xb6\xce\x46\x81\x4a\x50\x94\xc6\x98\x4d\x87\x20\x01\x45\xa4\x2e\x6c\xfa\xe7\xba\x1d\x60\xea\x9b\x4e\x2c\xc8\xd4\x78\x45\x28\x03\x69\x82\x82\x66\xdf\xba\xcc\x3c\x62\x9a\x01\xda\x33\x3a\x34\x6e\xaf\xcf\x87\xb0\x91\xc3\x93\xaf\xcf\x71\xc3\x38\xf6\xbc\xd6\x10\x1d\x3b\x4a\x10\x26\x89\xc1\x17\x6a\xce\x4b\xa8\xc8\xf6\x60\x98\xe2\x20\x91\xe5\xda\xa8\x67\xc3\xf8\xda\x04\x47\x45\xb6\x07\xfb\x9c\xce\x57\x3f\x96\xa4\x3a\xcd\xac\x49\x69\x74\x77\xad\xf3\x88\x36\x3d\x6b\x84\x30\x0f\x6d\xcf\x66\xac\x88\x84\x14\x91\x41\x8e\x0a\x33\x85\x79\x0f\x0e\x02\x7a\x3d\x0d\x8e\xd3\x45\xd2\xfe\x81\xb7\xa4\x05\x76\x2c\x2a\xae\xc3\xb9\x5d\x23\xe3\x55\x45\x95\x39\x19\xc2\xba\x92\x73\x78\xf8\xd5\xb8\x68\x7f\x65\xc6\xa1\x6f\xc1\x86\x1d\x12\xbd\xaf\x76\xdc\x39\x2d\x50\xd6\x84\x0d\xa1\x1f\x85\x81\xb5\x32\x98\x1e\x2a\xf1\x11\xff\xef\xeb\x70\x97\xb9\xb0\x44\x5d\x62\x37\x2b\x9a\xad\x0e\x35\x1a\xba\x04\xbc\xb7\xb4\xbb\xdc\x70\x8d\x70\xf7\x99\x98\xeb\x18\x35\xf6\x35\x52\xf1\xaa\x5b\x64\x5f\x1d\xba\xd7\xe7\x2e\xef\x5f\x9a\x44\xdc\xd7\xb7\x81\xfe\xe1\x8d\xb9\x3d\xa6\x56\xf8\xb0\x6e\x56\x52\xed\x6b\x93\x31\x5f\x6f\x74\x88\x7e\x69\xa8\x40\xd8\x48\xe0\x02\x68\x9d\x75\x0f\xcf\x24\x2d\x8d\x1b\x33\xf3\x81\xda\xe2\xfc\xe6\x39\x4f\x2b\xa5\xea\xe1\xc9\x89\x0e\xa0\x52\xa7\x9e\x61\xec\x7b\x7e\x9b\xd9\xc8\xd6\x64\xb6\x3d\xd0\x4b\xa2\xf7\x44\x33\xa3\x57\x77\xc9\xee\x5b\x98\x28\x83\x0d\x52\x33\xdb\xb1\xe0\x74\x83\x14\x18\xdf\xb4\x78\x9d\x12\x39\xd7\xb3\x0d\x5f\xfb\x7f\x66\xe8\x29\x91\x50\xd2\x8a\x76\x17\x98\x9c\x16\x05\x1a\x92\x0e\x27\x74\x48\x63\x3a\x14\x97\x44\x9e\x9b\xd1\xfb\x37\xf3\xb1\xf9\xe0\x36\x31\xde\x69\xea\xd6\x24\xcf\xcf\x70\x37\x04\xf7\x79\xe3\x35\xae\xf9\x23\x9a\x76\xdf\xdf\x37\xb7\x8c\x8c\x0d\x5f\x43\x88\xbe\x6b\x9f\x0b\xdc\x77\xd9\x5f\xa5\x58\xa1\x2e\x28\x53\x43\x88\xbf\x69\xbb\xd1\xce\x28\x50\xcc\x04\xaf\x86\x60\xfb\x87\x3e\x22\x25\xaa\x45\x5b\xb9\x03\xdd\x0a\xaf\x0e\xe9\x4b\x60\xc5\xd7\x3a\x79\x49\x90\x9c\x33\xfd\x9b\x0a\x9a\x2f\x51\x67\x23\x1d\x2d\x4b\x41\xda\xd0\xf9\x5a\xb4\x14\x37\x79\xaa\x3d\x03\xf6\x95\x8b\xe7\xa7\xd1\x11\x90\xe7\xed\x9f\x21\x08\xa4\x25\xcf\x1e\xcd\x7d\xa0\x05\x01\x94\xa0\xcb\x25\x0a\xa3\xad\x6f\x88\xb8\x55\xfb\x14\xd7\x96\xb9\xc0\xda\xd7\xb9\x1f\x2d\x2c\x74\x1d\xe1\xac\x7c\x56\x67\xe4\x21\x24\xf7\x26\x7d\x95\xd6\x65\xe7\x5b\x79\xdb\xef\xd4\xff\xd9\xd9\xab\xf7\x0a\x08\xdb\x41\x8e\x69\xb3\x5c\x76\xb7\x08\x1d\xe3\xe6\x80\x97\x1c\xb4\x23\x7a\xa6\xb7\xcd\x25\xc8\x4c\x58\x9a\x16\x5d\xbe\xf5\x9c\x1e\xe8\xff\x0d\xa1\x20\xa5\x44\x33\xaa\xae\x05\x2f\xda\x88\xd8\x0b\xeb\x5b\x8c\x6e\xdd\x0f\xeb\xb5\x88\x76\x7f\x3f\xaa\x05\x66\x1d\xa9\x4a\x34\xd8\xfb\xbf\x00\x00\x00\xff\xff\x51\xd8\xca\x20\x34\x1b\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6964, mode: os.FileMode(420), modTime: time.Unix(1576759941, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xc9\x6e\x1c\x37\x10\xbd\xf7\x57\x10\xcc\xc1\x97\x59\xb8\x6f\x37\x43\xf1\x12\x08\x11\xe2\x38\x80\x9c\x63\x91\xac\x96\x1a\xa3\x5e\xc2\x66\x4b\x1e\x1b\xfe\xf7\xa0\x67\x46\xb6\x6f\x51\x6e\x64\x75\xbd\xf7\x58\xd5\xef\x25\x1c\x6a\xe9\xda\xe5\x0e\x6f\xb0\x3e\x8d\xe5\x10\x48\xc5\xb9\x76\xc3\x5d\x83\xf5\x1e\x0b\x2e\x7d\x68\x08\x81\x94\xc6\x65\xa8\xf3\x7a\x26\xa4\x87\x6e\x08\xe4\x74\x24\xe4\x80\xc7\x40\x5e\x7d\xa5\x90\x73\xc1\x79\xa6\x81\x3a\x1f\x19\x38\xa3\x9d\x4c\x4a\x29\x05\xa9\xcd\x96\x47\x65\x24\xb2\x2c\x93\xd6\x80\x5c\x71\x01\x9a\x6e\x68\x2a\xc7\xa9\x8e\x34\x7c\xa5\xa9\x9b\xee\xb1\xd0\x40\x01\xe7\x2d\x17\x6e\x9b\x6a\x59\x1b\x4e\xe5\x8a\x9f\x2b\x0d\x34\x59\xeb\x5b\x27\xad\xcf\xd6\xb2\xec\x45\x6a\x13\xcf\x39\x2b\x70\xad\xe4\x59\x03\x83\x9c\x5c\x2b\x80\x45\x01\x5c\x31\x2e\x2d\xcb\xd2\x48\xd6\x4a\x97\x58\x72\xf0\x9d\x6f\x82\x02\xfd\xbc\xca\x76\x8f\x34\x50\x69\x12\x37\x0e\xad\x8c\xad\x77\xac\x45\xab\x23\xb3\xc2\xb6\xce\x33\xb0\x1c\x32\xfd\xb6\xa1\x87\xdc\xd2\x40\xe7\xd3\x83\xe9\xe9\xfa\x83\x24\x1f\x1e\x70\xa0\x41\x8a\x0d\x1d\x68\x10\x46\x70\xa5\x36\x74\xa2\x81\x6f\x68\xa1\xc1\x6d\xe8\x0c\x0f\xeb\x00\x19\x79\x44\x6e\x50\x26\xef\xb8\x57\x2a\x73\x4c\x20\xa2\x8b\xc2\xa2\x42\x83\x2c\xea\xd8\x46\x25\x23\x32\x69\x0d\xe8\xec\x9c\xf3\x2d\x18\xeb\x41\x38\x2e\xc4\xfa\x90\x1e\xd2\xba\x8a\xc4\x85\x8b\x8e\x6b\xad\x75\x04\x8e\x90\x6d\x02\xf4\xcc\x30\x74\x4e\x09\x68\x13\x38\xa9\x4d\x66\x46\x69\x1d\xb3\x07\x6d\xb5\x88\x60\xda\x94\x98\x17\xd8\xae\x4c\x5d\xa6\x81\x2a\x8d\xcc\x30\x30\xdb\x2c\x00\xb7\x4a\x46\xb7\xf5\x42\xb4\x5b\xa5\x9c\xf0\xca\xfb\x2c\x6d\xa6\x1b\xfa\x88\x65\xee\xc6\x75\xc8\x6f\xaf\x2e\x3f\x7e\x82\x79\x7e\x1a\x4b\x0e\xe4\xd5\x73\xe9\xe2\x81\x40\x5e\x6a\x81\xa6\xe9\x32\x0e\xb5\xab\xc7\xdf\x72\x20\x94\x7d\x7e\xb1\x77\x9a\x66\xb5\xee\xd5\xfd\x6a\xc5\x1f\x06\x3d\xfb\xb3\x3b\x73\x65\x25\xb5\x97\xc9\x72\xdd\xe6\x2c\x79\x32\x9c\x2b\x0e\x31\x33\x05\xde\xb7\xd9\x38\x21\x92\xd3\xda\x39\xad\x52\xca\x28\x3d\x68\xe3\x14\x5a\xd0\x26\x83\xb0\x99\x9e\xc8\x66\x4c\x05\x6b\x20\x74\xbf\x7f\xfd\xd0\x25\x3c\x57\xbf\x4f\x4a\xf5\xbb\xf2\xf4\x08\x6f\xde\xea\x2f\x9f\xa2\x30\x6f\xbf\xf8\x92\x3e\x4c\xbf\xde\x7e\xd4\xf6\xaa\xbe\xf9\xf3\xfd\x74\x83\xf7\x9f\xae\xfe\x48\x37\xe3\xfb\x77\xd7\x4b\xfd\xf0\x37\x6d\x9a\x5f\xc8\xeb\x4b\x9e\xd6\xf4\x90\xb9\x8e\x05\xee\xb0\xf9\x39\x64\x07\x3c\xae\x65\x0c\x64\x5f\xfb\x69\xff\xfc\xa9\x69\xfe\x59\x70\xc1\xb5\x63\x58\xfa\xdb\xb1\x1c\xb0\xcc\x81\x88\x86\x90\xa7\xd3\xe5\x16\xba\xfa\x57\xd7\xe3\xef\x1f\x03\xe1\x4d\xb3\xd2\xac\xcd\x93\x98\xce\xab\x99\x96\xf8\xd0\xa5\xeb\x35\xb3\xbb\xdd\x7e\xb7\xdb\xc7\xa5\x7b\xc8\xfb\x82\xf3\xb8\x94\x84\xf3\x7e\x12\xd3\x35\x1e\x77\xd3\x12\x77\x13\xf6\x67\x4c\xe9\x1e\xa1\xe2\x7f\x83\x0e\x2b\xf0\x04\x9a\xbb\xbb\xa1\x1b\xee\x5e\xa8\x79\xe9\xfe\xff\xba\x3f\x01\x9f\xb5\x1b\x18\xd2\xfd\x58\x2e\xe2\x53\xc1\x34\xf6\x7d\x57\x03\xa9\x65\xc1\xe6\xdf\x00\x00\x00\xff\xff\xdc\x3c\xc5\xc4\xef\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1263, mode: os.FileMode(420), modTime: time.Unix(1576502380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

