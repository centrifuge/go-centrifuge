// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x6f\xdb\x30\x12\xbe\xeb\x57\x0c\x9c\x4b\xbb\x68\x6d\x4b\xf2\x1b\xd8\x83\x63\x27\x69\x9a\x07\x9c\x38\x4d\xda\x5e\x16\x34\x35\x92\x58\x4b\xa4\x4a\x52\x7e\xe4\xd7\x2f\x86\x92\x9c\xa4\x69\xb7\xbb\x5d\xec\x02\x0b\x6c\x2e\x16\x48\xce\x37\xc3\x99\x6f\x1e\xcc\x11\xcc\x31\x66\x65\x66\x21\xc2\x0d\x66\xaa\xc8\x51\x5a\xb0\x68\xac\x44\x0b\x2c\x61\x42\x1a\x0b\x6b\xb5\x61\xd2\xe3\x28\xad\x16\x71\x99\xe0\x35\xda\xad\xd2\xeb\x09\xc4\x99\x90\xd6\x73\x20\x42\x22\xd8\x14\x21\xaa\xf1\x64\x75\xc6\x80\x4d\x99\x85\xd9\x41\x16\x72\x26\xa4\x25\x5c\xaf\x39\x32\xf1\x00\x8e\xe0\x52\x71\x96\x39\xd5\x42\x26\xc0\x95\xb4\x9a\x71\x0b\x2c\x8a\x34\x1a\x83\x06\x24\x62\x04\x56\xc1\x0a\xc1\xa0\x85\xad\xb0\x29\xa0\xdc\xc0\x86\x69\xc1\x56\x19\x9a\xb6\x07\x8d\x3c\x41\x02\x88\x68\x02\x61\x18\xba\x6f\xb4\x29\x6a\x2c\xf3\xda\xf6\xf3\x68\x02\xa3\x70\x54\xed\xad\x94\xb2\xc6\x6a\x56\x2c\x10\xb5\xa9\x64\xdf\x43\xab\x23\x8a\x5e\xc7\x0f\x86\xed\x6e\xbb\xdb\xf6\x3b\x96\x17\x9d\x70\x14\x74\x83\x8e\x28\x62\xd3\xb9\xc9\xef\x6e\x76\xab\xed\xba\xfc\xfa\xe5\xcb\x3c\x2e\x1f\xef\x56\xbb\x93\xe9\x2d\xde\x5d\xcf\x2e\xd5\xe3\x7e\xdf\xef\x8f\x36\x37\x32\xb9\xdf\x2c\xae\xbe\x5d\x7e\x59\xb7\x7e\x03\x1a\x36\xa0\xf7\xf1\xe0\xe4\x7a\x90\xaf\xbf\x3f\xe0\xb7\x87\x8b\x87\xe0\xfb\xa2\xf4\x07\x9f\x8b\xe8\x2c\x5c\x7f\x54\xfe\x5d\x98\xa7\x2c\x5d\x1c\xf7\x97\xd8\x97\x7e\x05\xda\xb8\x6a\xda\x78\xaa\xba\x00\x5d\x1f\xa5\x15\x76\x7f\xca\xb8\x55\x7a\x3f\x81\x56\x77\x37\x8d\xc6\x27\x7c\x1c\xf6\xc2\x70\xca\x99\x3f\x9c\x75\xfd\xc0\x1f\x85\xa7\x41\xd7\xef\xfb\x03\x3f\x18\x07\xc1\xf0\xb4\x3b\xee\xb1\x96\xe7\x82\x72\xc5\x84\x7c\x45\x8d\x26\xb6\xf0\xe6\x82\x88\xf1\xd6\x83\x8a\x08\x95\xde\x23\xb8\x2e\x73\xd4\x82\xc3\xf9\x1c\x54\xec\x48\xf1\x2c\xfc\xb5\xec\x21\x3e\x7e\x50\x4b\x1d\x37\x41\x80\x4c\x18\x4b\x92\x52\x45\xf8\x9a\x3f\x85\x56\x1b\xe1\x36\x94\xc3\x76\xaa\x1b\xca\xfe\x36\x9c\x61\xbf\x1d\xf4\x82\x76\x10\x76\xdb\xbe\x3f\xf8\x31\xa6\x7e\x30\x0f\x2f\x94\x7a\x58\xae\x76\xab\x8b\xd9\xea\x6b\x3a\xfe\x78\x6f\xcd\xcd\xfe\xfe\x2c\xba\x5b\x68\xd6\xbb\x2d\x96\xd3\x9e\x5d\x6d\xcc\x80\x49\xdf\xff\xb6\x3d\x9b\x06\x8f\xad\x57\xf8\x61\xaf\x3d\x0c\xda\x7e\x30\xfc\x15\xfc\x4d\x1e\xf0\x65\xae\x4f\x04\x5b\x5e\xdd\xf7\x92\x4f\x9b\xe1\xc3\x59\x5a\x24\xb7\x5b\x35\xda\xaa\xd3\xa5\xf9\x90\x7e\x3d\x5b\x9d\x89\x90\x4d\x47\xbb\x56\xed\x9e\x93\x9a\xbf\x07\xe7\x9f\xcf\xe1\x3d\xb8\x00\xfc\x8a\xdf\xbd\xc6\xb5\x97\xcc\x85\x2d\xc2\x22\x53\x7b\x8c\x60\x99\x33\x6d\x61\x56\xf3\xc6\x40\xac\xb4\x73\x65\x22\x36\x28\x5f\xb8\xf2\x5f\xe2\x96\x1f\x0e\x82\x13\x7e\x1c\x8f\x06\xc3\x71\xd0\x0b\x4f\x82\x5e\x3c\xed\x9e\xcc\x7a\x41\x3f\x0a\xd0\xef\x4e\xbb\xa3\x20\x08\xf9\x70\xfe\x9c\x5b\xc6\xb2\x84\xf2\xfd\x35\xa5\x58\xbe\x42\xfd\x67\x94\xf2\xff\x4d\x4a\x39\xd5\xbf\xa5\xd4\x7f\x9e\x54\xff\xa7\xd5\x1f\xd2\x8a\x9a\xd7\x13\x2b\xf2\x6a\xe5\xcf\xb8\xd4\xfd\x67\x4a\x8a\x3f\x1e\xb5\xfd\x20\x68\xfb\xfe\x2f\x83\x33\x4d\xc2\x13\x3e\xb5\xfa\xcb\xfd\x6c\xb7\x7d\x1c\xac\x07\xe6\x6e\x2c\xbe\x2e\x6f\x1f\xed\xe3\x78\x3e\xdc\x7f\x7a\x2c\x8e\x17\xb7\x27\xa7\x8f\xfa\x93\xba\x7f\x5d\x52\x88\x5d\x81\xdf\xf6\xfd\x57\x6d\xa8\xc1\xbf\x38\xdb\x8a\xdd\x67\x94\xe5\xe7\xe9\xfd\xf7\xf5\xc7\x8b\x5c\x7e\x58\x4e\x3f\xce\xbf\x3d\xc6\x43\x3c\xbb\x52\x03\xab\x95\x48\xbe\xee\xf2\xe1\xb4\x7f\xfb\x8f\x83\x5f\xbb\xeb\x57\xe1\xf7\xff\xbb\xd1\x9f\x9e\xf6\xfa\x03\xee\x0f\xc2\xd1\x80\x0d\x7a\x71\xd4\x3b\xed\xad\x06\x63\x16\xfb\x21\x1b\x0d\xe6\x71\xf7\xb8\x3f\x08\xa6\xac\xdb\x6d\x79\x34\x87\x30\xcb\x60\x69\x95\x66\x09\x7a\xa6\xfa\xad\xa6\x8b\x05\xb3\xa9\x33\x29\xa3\x66\x36\x3f\x86\x58\x64\xe8\x01\x14\xcc\xa6\x13\xe8\xd8\xbc\xe8\x3c\xcd\x37\x7f\x8b\x98\x65\x6d\x77\x32\x5a\x11\xee\x4c\xc9\x58\x24\xa5\x66\x56\x28\x79\x50\xc0\xdd\xea\xf2\xcf\xd5\x54\x00\xaf\xb4\x4d\x39\x57\xa5\xb4\x06\xd6\xb8\x87\xfa\x16\x1e\xab\x17\x49\xcf\x1a\xf7\xb4\x8c\x35\x62\xb3\x45\xb2\xe7\xd2\xa2\x8e\x19\x47\xd8\x52\xe4\x5c\x04\xa6\x8b\x73\x60\x32\x82\x45\xb0\x80\x25\xea\x0d\x6a\x57\x0f\x51\x52\xc1\xf3\xa8\x24\x7e\x50\xc6\x4a\x96\x23\xb5\xe3\x7a\x32\xf1\x8e\x60\xa1\xb4\xad\x61\x08\xe2\xe7\xa2\x74\x68\x02\xa3\xee\x28\x20\xf5\x94\x1e\xef\xad\x7a\x5f\x20\x6a\xe0\xcf\xbd\x66\xbc\x22\x28\x2a\x27\x2d\x0b\xe4\x22\xde\xc3\xc9\xce\xa2\x96\x2c\x83\xf3\xc5\x33\x6b\x09\x14\x38\x93\x34\xe7\x69\x64\x3c\xc5\x08\x98\x05\x11\xc3\x0a\x53\x21\x23\xb8\x9e\xde\x11\x0c\xd6\xd2\xe7\x8b\x09\x6c\xdb\xbb\xf6\xbe\xfd\x58\x85\x80\xac\x2e\x0d\x46\x07\x06\xd2\xbd\x33\xb6\x47\x4d\x81\x70\xe6\xba\xfc\x71\xa7\xef\x44\x8e\xaa\x74\xd7\x94\xa0\x0a\x94\xf5\xf0\x29\x91\x3b\xab\xa9\x25\xd0\x65\x8c\x07\xcd\x72\x2d\x32\x81\x56\xd8\x35\x2d\x87\x92\x0b\x29\xf2\x32\x87\x08\x33\xb6\x77\x7a\x71\x83\x7a\x0f\x45\x50\x80\x46\x53\x28\x69\x90\x90\xd8\x46\x89\x08\xac\xc8\x49\x0b\xb3\x96\xf1\xb5\x71\x00\x2c\xfa\x56\x1a\x0b\x2b\x46\x76\x2b\x09\xa9\x32\x96\x24\x55\xa9\x39\x1a\x78\xb3\x5c\xce\xdf\xc1\x6c\xf1\xe9\x1d\x70\xa5\xd1\x40\xbb\xdd\x7e\x5b\x4f\xcd\x6a\x0d\x42\x42\xa6\x12\x97\x72\x13\x68\x91\x7d\x64\xab\x29\x73\x8c\x60\xb5\xa7\x6b\x55\x31\x68\x91\x17\x77\x7f\x7d\xb3\x61\x59\x89\xb7\xc8\x22\xf8\x0b\x04\x6f\x41\x18\xc8\xd0\xb8\xb6\x28\xc1\xed\xc1\x0a\x33\xb5\x7d\x47\xde\x93\xc0\x53\x26\x13\x3c\xdc\x63\xee\xee\x68\x15\xec\x3c\x78\xb9\x38\x81\x56\xbf\xdb\xcd\x8d\x4b\xc5\x9b\x12\x4b\xfc\x81\x02\xce\x33\xcc\xec\x25\x4f\xb5\x92\xaa\x34\xd4\x79\x39\x1a\x23\x64\xe2\x7d\x27\x81\x8a\x20\xd5\x73\xc2\x54\x74\x28\x5d\x33\x56\x31\x50\x01\x42\x6d\x3a\xf5\xd5\x74\xdd\xc7\xb7\x22\xcb\x88\x2b\x2c\xcb\x14\x67\xb6\x62\x8b\xb1\x4c\xdb\xb2\xf0\x80\xe4\x1f\x2a\x41\x2a\xe6\x5d\x87\x7f\xaa\x11\x0d\x94\x05\x79\x14\xf8\x9e\x67\x68\x2a\x02\x54\x2a\xc8\x21\x5b\x26\xdc\x3b\xa4\x8e\x25\x65\x17\xd4\xdb\x0f\x4c\x38\x0e\x5c\x2d\xab\x62\xe8\x3a\x4a\x6d\xa3\x46\xab\x05\x1a\x67\xcc\xb6\xa6\x20\x03\xcb\x0c\x75\x14\xfa\xb9\xad\x0e\xb8\xc6\x42\x85\x05\xa5\x9d\xa5\x6e\x10\x72\x49\x21\xf8\x4b\x97\xb9\x47\x97\x3b\x40\x9e\xa1\xd4\xf8\x74\x7b\x39\x81\xad\x99\x74\x9e\x1e\x11\x93\xf1\xb8\xd7\xab\x0c\xa1\xdc\xb1\x9a\x49\xc3\x1c\x7d\xa1\x50\x2a\x83\x9c\xed\x0e\x86\x59\x05\x06\x65\x44\x46\x3d\x3b\xa6\x36\x2e\x39\x72\xb6\x3b\xd8\x17\xd4\xbe\xfa\x39\xa4\xa0\x32\xb3\x61\x99\xc3\xdd\x57\xce\x63\x64\x3a\x2f\xb5\x76\xef\x84\x67\x12\x29\x33\xb0\x42\xa4\x87\x84\x45\x6e\x31\xf2\xe0\x00\x40\xfa\x88\x38\x41\x9d\x49\xcd\x73\x34\x13\x31\xd6\x5c\xb4\x8a\xd2\xb9\xd2\xc1\x55\x9e\x0b\xeb\x22\xc3\x24\x30\xc9\x53\x72\x70\xfd\x4c\x25\xba\x90\xbf\xb8\x73\xe8\x7b\xf0\x61\x8f\x8c\xee\x55\x9d\xbb\x14\x31\x9a\x82\xc9\x09\xb4\x46\xc3\x41\x37\x75\x34\x3d\xb4\xc0\x5f\xf8\xbf\x69\x80\x75\xe5\xc2\x0c\xa9\xb7\x6d\x53\xc1\xd3\x43\x73\x84\xba\x00\x37\x96\xd6\x53\x85\x22\x0a\xd7\xa3\x65\x44\x39\xea\xec\x2b\x8d\x55\x79\xad\xa4\xe9\x0e\xf5\x9b\xb9\xae\xfb\xd7\xae\x10\xb7\xa8\x0d\xb7\x0e\x2f\xe3\x2a\x4c\x15\xf0\x41\x2f\xcf\x04\xf9\xda\x55\xcc\x37\x5b\x4a\xd1\xef\xa5\xd0\x08\x5b\x03\x4a\x83\x28\x78\xfd\x5c\xa6\xd7\x31\x7d\x72\x66\xc9\x6c\x47\xe7\xb7\xcf\xf9\x94\x5a\x5b\x4c\x3a\x1d\x4a\xa0\x8c\x4a\xcf\x64\xdc\xef\xf5\xab\xca\xc6\x76\xae\xb2\x35\x84\x4e\x18\xdd\x49\x70\x87\x57\xd4\xc5\xee\x25\x99\x84\x84\x2d\x0a\x27\x1d\x74\xe1\x6c\x8b\x02\xa4\xda\x56\xf4\x3a\x63\x66\x41\xd2\x8e\x5f\xcd\x9f\x3b\x7a\xc6\x0c\x64\x22\x17\xf5\xe4\x10\x89\x38\x46\xc7\xa4\x43\x84\x0e\x65\x8c\x52\x31\x61\xe6\xd2\x9d\x6e\x5e\xfa\x33\x8d\xcc\xa2\xcb\xf1\x1a\x93\x56\xa7\x51\x74\x81\xfb\x09\x84\xcf\x17\x6f\x71\xa3\xd6\xe8\xd6\xfb\xfd\x66\xb9\xe2\xc8\xcc\xf1\x6b\x02\xa3\x1f\xd6\x17\x1a\x9b\x2d\xff\x09\x4a\xc6\xf6\x8a\xde\xbd\x30\x7e\xb1\x76\x47\xce\x88\x51\x9f\x6a\x95\x4f\xc0\xef\x1f\xf6\x98\x31\x68\x97\x55\xe7\x1e\xd0\x2a\x1c\x1d\xca\x97\xc6\x5c\x6d\xa8\x78\x19\x30\x4a\x49\xfa\x5d\x69\x11\x25\x48\xd5\x88\xb2\x25\xd1\xac\x4a\x9d\xa7\xa6\x65\x95\xab\x53\x55\x0c\xe4\x13\x2f\x9e\x47\xa3\x66\x40\x14\x55\xff\x3c\x61\xb0\xca\x14\x5f\xbb\x79\xa0\x22\x02\x58\x2d\x92\x04\xb5\xc3\xa6\xd1\x0c\x77\xb6\x29\x71\x55\x9b\x1b\x74\x9b\x3e\xf7\x33\xc5\x9a\xfa\x88\x92\xd9\xb3\x3e\x63\x0e\x29\xd9\x98\xf4\x04\x4d\x6d\xe7\x25\xbc\xdf\xaf\xd1\xff\xb7\xab\x97\x77\x04\x4c\xee\x21\xc2\x55\x99\x24\xf5\x14\x41\x39\xee\x02\x9c\x28\x20\x47\x78\x6e\xb7\xaa\x25\x28\x5d\x5a\xba\x15\x6a\xdf\x24\xe3\x01\x7d\x4d\x20\x66\x99\x41\x77\xaa\x28\xb4\x8a\xab\x8c\x68\x80\x69\x8a\xa1\xd5\xe6\x98\x57\x51\xb4\xfe\xaf\x57\xa1\x91\xd7\x4c\xb5\xba\x44\xef\xef\x01\x00\x00\xff\xff\xf0\x57\x86\x2a\xe2\x13\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 5090, mode: os.FileMode(420), modTime: time.Unix(1588236940, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xc9\x6e\x1c\x37\x10\xbd\xf7\x57\x10\xcc\xc1\x97\x59\xb8\x6f\x37\x43\xf1\x12\x08\x11\xe2\x38\x80\x9c\x63\x91\xac\x96\x1a\xa3\x5e\xc2\x66\x4b\x1e\x1b\xfe\xf7\xa0\x67\x46\xb6\x6f\x51\x6e\x64\x75\xbd\xf7\x58\xd5\xef\x25\x1c\x6a\xe9\xda\xe5\x0e\x6f\xb0\x3e\x8d\xe5\x10\x48\xc5\xb9\x76\xc3\x5d\x83\xf5\x1e\x0b\x2e\x7d\x68\x08\x81\x94\xc6\x65\xa8\xf3\x7a\x26\xa4\x87\x6e\x08\xe4\x74\x24\xe4\x80\xc7\x40\x5e\x7d\xa5\x90\x73\xc1\x79\xa6\x81\x3a\x1f\x19\x38\xa3\x9d\x4c\x4a\x29\x05\xa9\xcd\x96\x47\x65\x24\xb2\x2c\x93\xd6\x80\x5c\x71\x01\x9a\x6e\x68\x2a\xc7\xa9\x8e\x34\x7c\xa5\xa9\x9b\xee\xb1\xd0\x40\x01\xe7\x2d\x17\x6e\x9b\x6a\x59\x1b\x4e\xe5\x8a\x9f\x2b\x0d\x34\x59\xeb\x5b\x27\xad\xcf\xd6\xb2\xec\x45\x6a\x13\xcf\x39\x2b\x70\xad\xe4\x59\x03\x83\x9c\x5c\x2b\x80\x45\x01\x5c\x31\x2e\x2d\xcb\xd2\x48\xd6\x4a\x97\x58\x72\xf0\x9d\x6f\x82\x02\xfd\xbc\xca\x76\x8f\x34\x50\x69\x12\x37\x0e\xad\x8c\xad\x77\xac\x45\xab\x23\xb3\xc2\xb6\xce\x33\xb0\x1c\x32\xfd\xb6\xa1\x87\xdc\xd2\x40\xe7\xd3\x83\xe9\xe9\xfa\x83\x24\x1f\x1e\x70\xa0\x41\x8a\x0d\x1d\x68\x10\x46\x70\xa5\x36\x74\xa2\x81\x6f\x68\xa1\xc1\x6d\xe8\x0c\x0f\xeb\x00\x19\x79\x44\x6e\x50\x26\xef\xb8\x57\x2a\x73\x4c\x20\xa2\x8b\xc2\xa2\x42\x83\x2c\xea\xd8\x46\x25\x23\x32\x69\x0d\xe8\xec\x9c\xf3\x2d\x18\xeb\x41\x38\x2e\xc4\xfa\x90\x1e\xd2\xba\x8a\xc4\x85\x8b\x8e\x6b\xad\x75\x04\x8e\x90\x6d\x02\xf4\xcc\x30\x74\x4e\x09\x68\x13\x38\xa9\x4d\x66\x46\x69\x1d\xb3\x07\x6d\xb5\x88\x60\xda\x94\x98\x17\xd8\xae\x4c\x5d\xa6\x81\x2a\x8d\xcc\x30\x30\xdb\x2c\x00\xb7\x4a\x46\xb7\xf5\x42\xb4\x5b\xa5\x9c\xf0\xca\xfb\x2c\x6d\xa6\x1b\xfa\x88\x65\xee\xc6\x75\xc8\x6f\xaf\x2e\x3f\x7e\x82\x79\x7e\x1a\x4b\x0e\xe4\xd5\x73\xe9\xe2\x81\x40\x5e\x6a\x81\xa6\xe9\x32\x0e\xb5\xab\xc7\xdf\x72\x20\x94\x7d\x7e\xb1\x77\x9a\x66\xb5\xee\xd5\xfd\x6a\xc5\x1f\x06\x3d\xfb\xb3\x3b\x73\x65\x25\xb5\x97\xc9\x72\xdd\xe6\x2c\x79\x32\x9c\x2b\x0e\x31\x33\x05\xde\xb7\xd9\x38\x21\x92\xd3\xda\x39\xad\x52\xca\x28\x3d\x68\xe3\x14\x5a\xd0\x26\x83\xb0\x99\x9e\xc8\x66\x4c\x05\x6b\x20\x74\xbf\x7f\xfd\xd0\x25\x3c\x57\xbf\x4f\x4a\xf5\xbb\xf2\xf4\x08\x6f\xde\xea\x2f\x9f\xa2\x30\x6f\xbf\xf8\x92\x3e\x4c\xbf\xde\x7e\xd4\xf6\xaa\xbe\xf9\xf3\xfd\x74\x83\xf7\x9f\xae\xfe\x48\x37\xe3\xfb\x77\xd7\x4b\xfd\xf0\x37\x6d\x9a\x5f\xc8\xeb\x4b\x9e\xd6\xf4\x90\xb9\x8e\x05\xee\xb0\xf9\x39\x64\x07\x3c\xae\x65\x0c\x64\x5f\xfb\x69\xff\xfc\xa9\x69\xfe\x59\x70\xc1\xb5\x63\x58\xfa\xdb\xb1\x1c\xb0\xcc\x81\x88\x86\x90\xa7\xd3\xe5\x16\xba\xfa\x57\xd7\xe3\xef\x1f\x03\xe1\x4d\xb3\xd2\xac\xcd\x93\x98\xce\xab\x99\x96\xf8\xd0\xa5\xeb\x35\xb3\xbb\xdd\x7e\xb7\xdb\xc7\xa5\x7b\xc8\xfb\x82\xf3\xb8\x94\x84\xf3\x7e\x12\xd3\x35\x1e\x77\xd3\x12\x77\x13\xf6\x67\x4c\xe9\x1e\xa1\xe2\x7f\x83\x0e\x2b\xf0\x04\x9a\xbb\xbb\xa1\x1b\xee\x5e\xa8\x79\xe9\xfe\xff\xba\x3f\x01\x9f\xb5\x1b\x18\xd2\xfd\x58\x2e\xe2\x53\xc1\x34\xf6\x7d\x57\x03\xa9\x65\xc1\xe6\xdf\x00\x00\x00\xff\xff\xdc\x3c\xc5\xc4\xef\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1263, mode: os.FileMode(420), modTime: time.Unix(1583245934, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

