// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x6f\xdb\x30\x12\xbe\xeb\x57\x0c\x9c\x4b\xbb\x68\x6d\x4b\x7e\xc4\x31\xb0\x07\x27\x4e\xdc\x34\x0f\x38\x71\x9a\xb4\xbd\x2c\x68\x6a\x24\xb1\x96\x48\x95\xa4\xfc\xc8\xaf\x5f\x0c\x45\x39\x49\xd3\x6e\x77\xbb\xd8\x05\x16\xd8\x5c\x2c\x90\x9c\x6f\x86\x33\xdf\x3c\x98\x03\x98\x62\xc2\xaa\xdc\x42\x8c\x6b\xcc\x55\x59\xa0\xb4\x60\xd1\x58\x89\x16\x58\xca\x84\x34\x16\x56\x6a\xcd\x64\xc0\x51\x5a\x2d\x92\x2a\xc5\x6b\xb4\x1b\xa5\x57\x63\x48\x72\x21\x6d\xe0\x40\x84\x44\xb0\x19\x42\xec\xf1\x64\x7d\xc6\x80\xcd\x98\x85\x93\xbd\x2c\x14\x4c\x48\x4b\xb8\x41\x73\x64\x1c\x00\x1c\xc0\xa5\xe2\x2c\x77\xaa\x85\x4c\x81\x2b\x69\x35\xe3\x16\x58\x1c\x6b\x34\x06\x0d\x48\xc4\x18\xac\x82\x25\x82\x41\x0b\x1b\x61\x33\x40\xb9\x86\x35\xd3\x82\x2d\x73\x34\xed\x00\x1a\x79\x82\x04\x10\xf1\x18\x7a\xbd\x9e\xfb\x46\x9b\xa1\xc6\xaa\xf0\xb6\x9f\xc7\x63\x18\xf5\x46\xf5\xde\x52\x29\x6b\xac\x66\xe5\x1c\x51\x9b\x5a\xf6\x3d\xb4\x3a\xa2\xec\x77\xc2\xe8\xb0\xdd\x6d\x77\xdb\x61\xc7\xf2\xb2\xd3\x1b\x45\xdd\xa8\x23\xca\xc4\x74\x6e\x8a\xbb\x9b\xed\x72\xb3\xaa\xbe\x7e\xf9\x32\x4d\xaa\xc7\xbb\xe5\xf6\x74\x72\x8b\x77\xd7\x27\x97\xea\x71\xb7\x1b\x0c\x46\xeb\x1b\x99\xde\xaf\xe7\x57\xdf\x2e\xbf\xac\x5a\xbf\x01\xed\x35\xa0\xf7\xc9\xf0\xf4\x7a\x58\xac\xbe\x3f\xe0\xb7\x87\x8b\x87\xe8\xfb\xbc\x0a\x87\x9f\xcb\x78\xd6\x5b\x7d\x54\xe1\x5d\xaf\xc8\x58\x36\x3f\x1e\x2c\x70\x20\xc3\x1a\xb4\x71\xd5\xa4\xf1\x54\x7d\x01\xba\x3e\x4a\x2b\xec\xee\x8c\x71\xab\xf4\x6e\x0c\xad\x56\xe0\x5c\x7d\xc5\x84\x7c\x15\xf0\x26\x62\xf0\xe6\x82\xc2\xfd\x36\x80\x3a\xbc\x35\xda\x01\x5c\x57\x05\x6a\xc1\xe1\x7c\x0a\x2a\x71\xa1\x7e\x16\x54\x2f\xbb\xf7\x7a\x18\x79\xa9\xe3\xc6\xb5\x90\x0b\x63\x49\x52\xaa\x18\x5f\xb3\xa2\xd4\x6a\x2d\xdc\x86\x72\xd8\x4e\x75\x43\xc4\xdf\x06\xa9\x37\x68\x47\xfd\xa8\x1d\xf5\xba\xed\x30\x1c\xfe\x18\xa9\x30\x9a\xf6\x2e\x94\x7a\x58\x2c\xb7\xcb\x8b\x93\xe5\xd7\xec\xe8\xe3\xbd\x35\x37\xbb\xfb\x59\x7c\x37\xd7\xac\x7f\x5b\x2e\x26\x7d\xbb\x5c\x9b\x21\x93\x61\xf8\x6d\x33\x9b\x44\x8f\xad\x57\xf8\xbd\x7e\xfb\x30\x6a\x87\xd1\xe1\xaf\xe0\x6f\x8a\x88\x2f\x0a\x7d\x2a\xd8\xe2\xea\xbe\x9f\x7e\x5a\x1f\x3e\xcc\xb2\x32\xbd\xdd\xa8\xd1\x46\x9d\x2d\xcc\x87\xec\xeb\x6c\x39\x13\x3d\x36\x19\x6d\x5b\xde\x3d\xa7\x9e\x95\x7b\xe7\x9f\x4f\xe1\x3d\xb8\x00\xfc\x8a\xb5\xfd\xc6\xb5\x97\xcc\x85\x2d\xc6\x32\x57\x3b\x8c\x61\x51\x30\x6d\xe1\xc4\xb3\xc1\x40\xa2\xb4\x73\x65\x2a\xd6\x28\x5f\xb8\xf2\x5f\x60\x4c\x77\x1b\xf6\x86\xd1\x29\x3f\x4e\x46\xc3\xc3\xa3\xa8\xdf\x3b\x8d\xfa\xc9\xa4\x7b\x7a\xd2\x8f\x06\x71\x84\x61\x77\xd2\x1d\x45\x51\x8f\x1f\x4e\x9f\x73\xcb\x58\x96\x52\x16\xbf\xa6\x14\x2b\x96\xa8\xff\x8c\x52\xe1\xbf\x49\x29\xa7\xfa\xb7\x94\xfa\xcf\x93\xea\xff\xb4\xfa\x43\x5a\x51\x4b\x7a\x62\x45\x51\xaf\xfc\x19\x97\xba\xff\x4c\x49\x09\x8f\x46\xed\x30\x8a\xda\x61\xf8\xcb\xe0\x4c\xd2\xde\x29\x9f\x58\xfd\xe5\xfe\x64\xbb\x79\x1c\xae\x86\xe6\xee\x48\x7c\x5d\xdc\x3e\xda\xc7\xa3\xe9\xe1\xee\xd3\x63\x79\x3c\xbf\x3d\x3d\x7b\xd4\x9f\xd4\xfd\xeb\x92\x42\xec\x8a\xc2\x76\x18\xbe\x6a\x2e\x0d\xfe\xc5\x6c\x23\xb6\x9f\x51\x56\x9f\x27\xf7\xdf\x57\x1f\x2f\x0a\xf9\x61\x31\xf9\x38\xfd\xf6\x98\x1c\xe2\xec\x4a\x0d\xad\x56\x22\xfd\xba\x2d\x0e\x27\x83\xdb\x7f\x1c\x7c\xef\xae\x5f\x85\x3f\xfc\xef\x46\x7f\x72\xd6\x1f\x0c\x79\x38\xec\x8d\x86\x6c\xd8\x4f\xe2\xfe\x59\x7f\x39\x3c\x62\x49\xd8\x63\xa3\xe1\x34\xe9\x1e\x0f\x86\xd1\x84\x75\xbb\xad\x80\xa6\x0b\x66\x19\x2c\xac\xd2\x2c\xc5\xc0\xd4\xbf\xf5\xcc\x30\x67\x36\x73\x26\xe5\xd4\xcc\xa6\xc7\x90\x88\x1c\x03\x80\x92\xd9\x6c\x0c\x1d\x5b\x94\x9d\xa7\xa9\xe5\x6f\x31\xb3\xac\xed\x4e\xc6\x4b\xc2\x3d\x51\x32\x11\x69\xa5\x99\x15\x4a\xee\x15\x70\xb7\xba\xf8\x73\x35\x35\xc0\x2b\x6d\x13\xce\x55\x25\xad\x81\x15\xee\xc0\xdf\x22\x60\x7e\x91\xf4\xac\x70\x47\xcb\xe8\x11\x9b\x2d\x92\x3d\x97\x16\x75\xc2\x38\xc2\x86\x22\xe7\x22\x30\x99\x9f\x03\x93\x31\xcc\xa3\x39\x2c\x50\xaf\x51\xbb\x7a\x88\x92\x0a\x5e\x40\x25\xf1\x83\x32\x56\xb2\x02\xa9\x1d\xfb\x79\x23\x38\x80\xb9\xd2\xd6\xc3\x10\xc4\xcf\x45\xe9\xd0\x18\x46\xdd\x51\x44\xea\x29\x3d\xde\x5b\xf5\xbe\x44\xd4\xc0\x9f\x7b\xcd\x04\x65\x54\xd6\x4e\x5a\x94\xc8\x45\xb2\x83\xd3\xad\x45\x2d\x59\x0e\xe7\xf3\x67\xd6\x12\x28\x70\x26\x69\x7a\xd3\xc8\x78\x86\x31\x30\x0b\x22\x81\x25\x66\x42\xc6\x70\x3d\xb9\x23\x18\xf4\xd2\xe7\xf3\x31\x6c\xda\xdb\xf6\xae\xfd\x58\x87\x80\xac\xae\x0c\xc6\x7b\x06\xd2\xbd\x73\xb6\x43\x4d\x81\x70\xe6\xba\xfc\x71\xa7\xef\x44\x81\xaa\x72\xd7\x94\xa0\x4a\x94\x7e\xa4\x94\xc8\x9d\xd5\xd4\x12\xe8\x32\x26\x80\x66\xd9\x8b\x8c\xa1\xd5\xeb\x9a\x96\x43\x29\x84\x14\x45\x55\x40\x8c\x39\xdb\x39\xbd\xb8\x46\xbd\x83\x32\x2a\x41\xa3\x29\x95\x34\x48\x48\x6c\xad\x44\x0c\x56\x14\xa4\x85\x59\xcb\xf8\xca\x38\x00\x16\x7f\xab\x8c\x85\x25\x23\xbb\x95\x84\x4c\x19\x4b\x92\xaa\xd2\x1c\x0d\xbc\x59\x2c\xa6\xef\xe0\x64\xfe\xe9\x1d\x70\xa5\xd1\x40\xbb\xdd\x7e\xeb\x67\x61\xb5\x02\x21\x21\x57\xa9\x4b\xb9\x31\xb4\xc8\x3e\xb2\xd5\x54\x05\xc6\xb0\xdc\xd1\xb5\xea\x18\xb4\xc8\x8b\xdb\xbf\xbe\x59\xb3\xbc\xc2\x5b\x64\x31\xfc\x05\xa2\xb7\x20\x0c\xe4\x68\x5c\x5b\x94\xe0\xf6\x60\x89\xb9\xda\xbc\x23\xef\x49\xe0\x19\x93\x29\xee\xef\x31\x75\x77\xb4\x0a\xb6\x01\xbc\x5c\x1c\x43\x6b\xd0\xed\x16\xc6\xa5\xe2\x4d\x85\x15\xfe\x40\x01\xe7\x19\x66\x76\x92\x67\x5a\x49\x55\x19\xea\xbc\x1c\x8d\x11\x32\x0d\xbe\x93\x40\x4d\x90\xfa\x91\x60\x6a\x3a\x54\xae\x19\xab\x04\xa8\x00\xa1\x36\x1d\x7f\x35\xed\xfb\xf8\x46\xe4\x39\x71\x85\xe5\xb9\xe2\xcc\xd6\x6c\x31\x96\x69\x5b\x95\x01\x90\xfc\x43\x2d\x48\xc5\xbc\xeb\xf0\xcf\x34\xa2\x81\xaa\x24\x8f\x02\xdf\xf1\x1c\x4d\x4d\x80\x5a\x05\x39\x64\xc3\x84\x7b\x5d\xf8\x58\x52\x76\x81\xdf\x7e\x60\xc2\x71\xe0\x6a\x51\x17\x43\xd7\x51\xbc\x8d\x1a\xad\x16\x68\x9c\x31\x1b\x4f\x41\x06\x96\x19\xea\x28\xf4\x73\x5b\x1f\x70\x8d\x85\x0a\x0b\x4a\x7b\x92\xb9\x41\xc8\x25\x85\xe0\x2f\x5d\xe6\x9e\x52\xee\x00\x79\x86\x52\xe3\xd3\xed\xe5\x18\x36\x66\xdc\x79\x7a\x1a\x8c\x8f\x8e\xfa\xfd\xda\x10\xca\x1d\xab\x99\x34\xcc\xd1\x17\x4a\xa5\x72\x28\xd8\x76\x6f\x98\x55\x60\x50\xc6\x64\xd4\xb3\x63\x6a\xed\x92\xa3\x60\xdb\xbd\x7d\x91\xf7\xd5\xcf\x21\x05\x95\x99\x35\xcb\x1d\xee\xae\x76\x1e\x23\xd3\x79\xa5\xb5\x7b\x27\x3c\x93\xc8\x98\x81\x25\x22\x3d\x24\x2c\x72\x8b\x71\x00\x7b\x00\xd2\x47\xc4\x89\x7c\x26\x35\x8f\xcc\x5c\x24\xe8\xb9\x68\x15\xa5\x73\xad\x83\xab\xa2\x10\xd6\x45\x86\x49\x60\x92\x67\xe4\x60\xff\xf8\x24\xba\x90\xbf\xb8\x73\xe8\x7b\x08\x61\x87\x8c\xee\x55\x9f\xbb\x14\x09\x9a\x92\xc9\x31\xb4\x46\x87\xc3\x6e\xe6\x68\xba\x6f\x81\xbf\xf0\x7f\xd3\x00\x7d\xe5\xc2\x1c\xa9\xb7\x6d\x32\xc1\xb3\x7d\x73\x04\x5f\x80\x1b\x4b\xfd\x54\xa1\x88\xc2\x7e\xb4\x8c\x29\x47\x9d\x7d\x95\xb1\xaa\xf0\x4a\x9a\xee\xe0\x5f\xc2\xbe\xee\x5f\xbb\x42\xdc\xa2\x36\xdc\xda\xbf\x77\xeb\x30\xd5\xc0\x7b\xbd\x3c\x17\xe4\x6b\x57\x31\xdf\x6c\x28\x45\xbf\x57\x42\x23\x6c\x0c\x28\x0d\xa2\xe4\xfe\x11\x4c\x6f\x5e\xfa\xe4\xcc\x92\xd9\x8e\xce\x6f\x9f\xf3\x29\xb3\xb6\x1c\x77\x3a\x94\x40\x39\x95\x9e\xf1\xd1\xa0\x3f\xa8\x2b\x1b\xdb\xba\xca\xd6\x10\x3a\x65\x74\x27\xc1\x1d\x5e\xe9\x8b\xdd\x4b\x32\x09\x09\x1b\x14\x4e\x3a\xea\xc2\x6c\x83\x02\xa4\xda\xd4\xf4\x9a\x31\x33\x27\x69\xc7\xaf\xe6\xcf\x1d\x9d\x31\x03\xb9\x28\x84\x9f\x1c\x62\x91\x24\xe8\x98\xb4\x8f\xd0\xbe\x8c\x51\x2a\xa6\xcc\x5c\xba\xd3\xcd\xfb\xfd\x44\x23\xb3\x4f\xb8\x7e\x75\x12\xc7\x17\xb8\x1b\x43\xef\xf9\xe2\x2d\xae\xd5\x0a\xdd\xfa\x60\xd0\x2c\xd7\x1c\x39\x71\xfc\x1a\xc3\xe8\x87\xf5\xb9\xc6\x66\x2b\x7c\x82\x92\x89\xbd\xa2\x77\x2f\x1c\xbd\x58\xbb\x23\x67\x24\xa8\xcf\xb4\x2a\xc6\x10\x0e\xf6\x7b\xcc\x18\xb4\x8b\xba\x73\x0f\x69\x15\x0e\xf6\xe5\x4b\x63\xa1\xd6\x54\xbc\x0c\x18\xa5\x24\xfd\x2e\xb5\x88\x53\xa4\x6a\x44\xd9\x92\x6a\x56\xa7\xce\x53\xd3\xb2\xca\xd5\xa9\x3a\x06\xf2\x89\x17\xcf\xa3\xe1\x19\x10\xc7\xf5\xbf\x44\x18\x2c\x73\xc5\x57\x6e\x1e\xa8\x89\x00\x56\x8b\x34\x45\xed\xb0\x69\x34\xc3\xad\x6d\x4a\x5c\xdd\xe6\x86\xdd\xa6\xcf\xfd\x4c\xb1\xa6\x3e\xa2\x64\xfe\xac\xcf\x98\x7d\x4a\x36\x26\x3d\x41\x53\xdb\x79\x09\x1f\x0e\x3c\xfa\xff\x76\xf5\x0a\x0e\x80\xc9\x1d\xc4\xb8\xac\xd2\xd4\x4f\x11\x94\xe3\x2e\xc0\xa9\x02\x72\x44\xe0\x76\xeb\x5a\x82\xd2\xa5\xa5\x5b\xa1\xf6\x4d\x32\x01\xd0\xd7\x18\x12\x96\x1b\x74\xa7\xca\x52\xab\xa4\xce\x88\x06\x98\xa6\x18\x5a\x6d\x8e\x05\x35\x45\xfd\xff\xb2\x4a\x8d\xdc\x33\xd5\xea\x0a\x83\xbf\x07\x00\x00\xff\xff\x64\x88\xb7\x30\xb8\x13\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 5048, mode: os.FileMode(420), modTime: time.Unix(1588959810, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xc9\x6e\x1c\x37\x10\xbd\xf7\x57\x10\xcc\xc1\x97\x59\xb8\x6f\x37\x43\xf1\x12\x08\x11\xe2\x38\x80\x9c\x63\x91\xac\x96\x1a\xa3\x5e\xc2\x66\x4b\x1e\x1b\xfe\xf7\xa0\x67\x46\xb6\x6f\x51\x6e\x64\x75\xbd\xf7\x58\xd5\xef\x25\x1c\x6a\xe9\xda\xe5\x0e\x6f\xb0\x3e\x8d\xe5\x10\x48\xc5\xb9\x76\xc3\x5d\x83\xf5\x1e\x0b\x2e\x7d\x68\x08\x81\x94\xc6\x65\xa8\xf3\x7a\x26\xa4\x87\x6e\x08\xe4\x74\x24\xe4\x80\xc7\x40\x5e\x7d\xa5\x90\x73\xc1\x79\xa6\x81\x3a\x1f\x19\x38\xa3\x9d\x4c\x4a\x29\x05\xa9\xcd\x96\x47\x65\x24\xb2\x2c\x93\xd6\x80\x5c\x71\x01\x9a\x6e\x68\x2a\xc7\xa9\x8e\x34\x7c\xa5\xa9\x9b\xee\xb1\xd0\x40\x01\xe7\x2d\x17\x6e\x9b\x6a\x59\x1b\x4e\xe5\x8a\x9f\x2b\x0d\x34\x59\xeb\x5b\x27\xad\xcf\xd6\xb2\xec\x45\x6a\x13\xcf\x39\x2b\x70\xad\xe4\x59\x03\x83\x9c\x5c\x2b\x80\x45\x01\x5c\x31\x2e\x2d\xcb\xd2\x48\xd6\x4a\x97\x58\x72\xf0\x9d\x6f\x82\x02\xfd\xbc\xca\x76\x8f\x34\x50\x69\x12\x37\x0e\xad\x8c\xad\x77\xac\x45\xab\x23\xb3\xc2\xb6\xce\x33\xb0\x1c\x32\xfd\xb6\xa1\x87\xdc\xd2\x40\xe7\xd3\x83\xe9\xe9\xfa\x83\x24\x1f\x1e\x70\xa0\x41\x8a\x0d\x1d\x68\x10\x46\x70\xa5\x36\x74\xa2\x81\x6f\x68\xa1\xc1\x6d\xe8\x0c\x0f\xeb\x00\x19\x79\x44\x6e\x50\x26\xef\xb8\x57\x2a\x73\x4c\x20\xa2\x8b\xc2\xa2\x42\x83\x2c\xea\xd8\x46\x25\x23\x32\x69\x0d\xe8\xec\x9c\xf3\x2d\x18\xeb\x41\x38\x2e\xc4\xfa\x90\x1e\xd2\xba\x8a\xc4\x85\x8b\x8e\x6b\xad\x75\x04\x8e\x90\x6d\x02\xf4\xcc\x30\x74\x4e\x09\x68\x13\x38\xa9\x4d\x66\x46\x69\x1d\xb3\x07\x6d\xb5\x88\x60\xda\x94\x98\x17\xd8\xae\x4c\x5d\xa6\x81\x2a\x8d\xcc\x30\x30\xdb\x2c\x00\xb7\x4a\x46\xb7\xf5\x42\xb4\x5b\xa5\x9c\xf0\xca\xfb\x2c\x6d\xa6\x1b\xfa\x88\x65\xee\xc6\x75\xc8\x6f\xaf\x2e\x3f\x7e\x82\x79\x7e\x1a\x4b\x0e\xe4\xd5\x73\xe9\xe2\x81\x40\x5e\x6a\x81\xa6\xe9\x32\x0e\xb5\xab\xc7\xdf\x72\x20\x94\x7d\x7e\xb1\x77\x9a\x66\xb5\xee\xd5\xfd\x6a\xc5\x1f\x06\x3d\xfb\xb3\x3b\x73\x65\x25\xb5\x97\xc9\x72\xdd\xe6\x2c\x79\x32\x9c\x2b\x0e\x31\x33\x05\xde\xb7\xd9\x38\x21\x92\xd3\xda\x39\xad\x52\xca\x28\x3d\x68\xe3\x14\x5a\xd0\x26\x83\xb0\x99\x9e\xc8\x66\x4c\x05\x6b\x20\x74\xbf\x7f\xfd\xd0\x25\x3c\x57\xbf\x4f\x4a\xf5\xbb\xf2\xf4\x08\x6f\xde\xea\x2f\x9f\xa2\x30\x6f\xbf\xf8\x92\x3e\x4c\xbf\xde\x7e\xd4\xf6\xaa\xbe\xf9\xf3\xfd\x74\x83\xf7\x9f\xae\xfe\x48\x37\xe3\xfb\x77\xd7\x4b\xfd\xf0\x37\x6d\x9a\x5f\xc8\xeb\x4b\x9e\xd6\xf4\x90\xb9\x8e\x05\xee\xb0\xf9\x39\x64\x07\x3c\xae\x65\x0c\x64\x5f\xfb\x69\xff\xfc\xa9\x69\xfe\x59\x70\xc1\xb5\x63\x58\xfa\xdb\xb1\x1c\xb0\xcc\x81\x88\x86\x90\xa7\xd3\xe5\x16\xba\xfa\x57\xd7\xe3\xef\x1f\x03\xe1\x4d\xb3\xd2\xac\xcd\x93\x98\xce\xab\x99\x96\xf8\xd0\xa5\xeb\x35\xb3\xbb\xdd\x7e\xb7\xdb\xc7\xa5\x7b\xc8\xfb\x82\xf3\xb8\x94\x84\xf3\x7e\x12\xd3\x35\x1e\x77\xd3\x12\x77\x13\xf6\x67\x4c\xe9\x1e\xa1\xe2\x7f\x83\x0e\x2b\xf0\x04\x9a\xbb\xbb\xa1\x1b\xee\x5e\xa8\x79\xe9\xfe\xff\xba\x3f\x01\x9f\xb5\x1b\x18\xd2\xfd\x58\x2e\xe2\x53\xc1\x34\xf6\x7d\x57\x03\xa9\x65\xc1\xe6\xdf\x00\x00\x00\xff\xff\xdc\x3c\xc5\xc4\xef\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1263, mode: os.FileMode(420), modTime: time.Unix(1588807361, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
