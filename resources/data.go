// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x59\x73\xdc\x36\x12\x7e\x9f\x5f\xd1\x25\xbf\x24\x55\xcb\x11\x78\x93\x53\x95\xda\x9a\xd3\x76\x2c\x2b\xa3\xc3\x51\xac\x97\x35\x08\x36\x67\x60\x71\x00\x1a\x00\xe7\xf0\xaf\xdf\x02\xc8\x51\x24\xcb\x52\x76\x93\xca\xae\x5e\xc4\x01\xd0\x8d\x3e\xbe\xfe\xd0\xc0\x2b\x98\x61\x45\xdb\xda\x40\x89\x5b\xac\x65\xb3\x41\x61\xc0\xa0\x36\x02\x0d\xd0\x15\xe5\x42\x1b\x50\x5c\xdc\x61\x71\x18\x30\x14\x46\xf1\xaa\x5d\xe1\x39\x9a\x9d\x54\x77\x23\x50\xad\xd6\x9c\x8a\x35\xaf\xeb\x81\x53\xc6\x05\x82\x59\x23\x94\xbd\x5e\xd1\xad\xd4\x60\xd6\xd4\xc0\xf4\x5e\x03\x6c\x28\x17\xc6\xea\x1f\x1c\x97\x8c\x06\x00\xaf\xe0\x4c\x32\x5a\x3b\x13\xb8\x58\x01\x93\xc2\x28\xca\x0c\xd0\xb2\x54\xa8\x35\x6a\x10\x88\x25\x18\x09\x05\x82\x46\x03\x3b\x6e\xd6\x80\x62\x0b\x5b\xaa\x38\x2d\x6a\xd4\xc3\x01\x1c\xe5\xad\x4a\x00\x5e\x8e\x20\x0c\x43\xf7\x8d\x66\x8d\x0a\xdb\x4d\xef\xc1\xdb\x72\x04\x59\x98\x75\x73\x85\x94\x46\x1b\x45\x9b\x25\xa2\xd2\x9d\xac\x07\x27\xa7\xbc\x89\x4e\xfd\x20\x1d\x92\x21\x19\xfa\xa7\x86\x35\xa7\x61\x16\x90\xe0\x94\x37\x95\x3e\xbd\xd8\x5c\x5f\xec\x8b\xdd\x5d\x7b\xfb\xf1\xe3\xac\x6a\xbf\x5e\x17\xfb\xf9\xf8\x12\xaf\xcf\xa7\x67\xf2\xeb\xe1\x10\xc7\xd9\xf6\x42\xac\x7e\xdd\x2e\xdf\x7f\x3e\xfb\x78\x77\xf2\x07\x4a\xc3\xa3\xd2\x5f\xab\x64\x7e\x9e\x6c\xee\xbe\xdc\xe0\xe7\x9b\x77\x37\xc1\x97\x65\xeb\x27\xbf\x35\xe5\xeb\xf0\xee\x67\xe9\x5f\x87\x9b\x35\x5d\x2f\x27\xf1\x15\xc6\xc2\xef\x94\x1e\x43\x35\x3e\x46\xaa\x73\xc0\xba\x8f\xc2\x70\x73\x58\x50\x66\xa4\x3a\x8c\xe0\xe4\xe4\x9b\x99\x4b\x5c\x71\x6d\x1e\x4d\x51\xc1\xd6\x52\x5d\x62\x23\x35\xff\x46\xaa\xa1\x07\x0b\x93\x5f\x8a\x9a\xaf\xa8\xe1\x52\xb8\x39\x97\xbc\xf7\x94\x8b\xef\x42\xa9\xcf\x31\xfc\x70\xd9\x61\xe9\xc7\x01\x3c\xc4\x4e\x67\xea\x2b\x38\x6f\x37\xa8\x38\x83\xb7\x33\x90\x95\xc3\xd1\x03\xc4\xf4\x3a\xee\x53\x1a\xfb\xbd\xd4\xe4\x98\x37\xa8\xb9\x36\x56\x52\xc8\x12\x9f\x42\xae\x51\x72\xcb\xdd\x84\x74\xba\x1f\x18\x70\x34\xf4\x0f\x71\x10\xc6\xc3\x20\x88\x87\x01\x21\xc3\x28\xf8\x16\x0b\x7e\x30\x0b\xdf\x49\x79\x73\xc6\x39\xbb\xf8\x75\x77\xbd\xbe\x9e\x7c\x4c\xf6\xef\xd8\x52\x9e\x55\xc9\xe5\xc5\xc7\x9f\x17\xcd\xae\xf2\x55\x1a\xef\xce\xf6\xc1\xed\x65\xd8\x4c\x4b\xff\xe4\x7b\xea\xb3\x64\x18\xf8\xe4\x39\xf5\x17\xb7\xef\xc7\xd9\xeb\xe5\x1b\xb5\x9d\xdf\x4e\xf2\x5d\x79\x27\x3f\xb0\xf1\x78\x33\xbd\x7d\xd3\xe4\x78\x38\xdc\x46\x57\xf3\x6c\xb5\x50\xe1\xfa\xfa\xfc\xb7\x93\x3e\x46\xf3\x1e\xf7\xf7\x99\x78\x3b\x03\x0f\xfa\x6c\x3c\x57\x19\x51\x2f\x7c\x46\x6d\x78\xa0\xc4\xa6\x96\x07\x2c\xe1\x6a\x43\x95\x81\x69\x0f\x38\x0d\x95\x54\x2e\xa0\x2b\xbe\x45\xf1\x28\x94\x4f\x41\x09\xcf\xa2\x92\xec\x17\x61\x99\x67\x55\x58\x25\x59\x92\xcc\xd3\x34\x08\x49\x1c\x93\x28\xf4\xd3\xd8\xcf\xc7\x7e\x30\x63\x55\x86\x19\xe6\xe3\x17\xf0\x4b\xf6\x79\x92\x10\x46\xc2\xbc\x0c\x7d\x3f\x8a\x43\x5a\x91\x32\xce\x58\x9c\x24\x49\x1a\x84\x65\xce\x82\x8a\xa6\x65\x82\xec\x05\xa4\x93\x7d\x1c\xa6\xc1\x04\x93\x24\xa4\x65\xb8\x98\x21\x99\x04\x8b\x24\x4a\xd3\x84\x64\xfe\x94\xa4\xe9\x34\x9a\xc4\x94\x46\x71\xfa\x52\x4d\x90\x7d\xbc\x20\x41\x9e\x67\xf9\x6c\x9e\x8e\xc7\x11\x49\xe8\x8c\xf8\xb3\x99\x5f\x06\x71\x99\x54\x01\x92\xc0\x9f\x23\x12\x92\xf5\xd5\xf3\x4e\x6e\x69\x17\xbe\x07\x58\x2f\x50\x09\x5a\xaf\x91\xaf\xd6\xa6\xc7\xe2\xab\x57\xaf\xfa\xc4\x74\x12\x8b\xf1\x45\xff\xdb\x83\x1b\x4b\x87\x5c\x54\xad\xa2\x70\x90\x2d\xac\x2c\x8f\x0b\x40\xa5\xa4\xb2\x28\xbb\x5e\x73\x0d\x0a\xbf\xb4\x76\x17\xae\x41\x48\x03\xba\x6d\x1a\xa9\x0c\x96\x50\x20\xa3\xad\x46\x2b\xa9\x5c\x11\xd9\x25\xaa\x15\xc2\x72\xb1\x63\x5a\x6d\xa8\xb1\x95\xd4\xda\xa1\x21\x5c\xb6\xa2\x1b\xf7\xbc\x7e\xec\x27\xaa\xd8\x9a\x6f\x71\x78\xf2\x8f\xde\x28\x80\x9d\x2d\x44\x23\xa1\x94\xff\x74\x12\x14\x6a\xc7\xf2\x0d\x55\xdc\x1c\xba\x8d\x9c\x96\x3b\xe7\x0f\xae\x46\xdd\xcf\x4f\xfd\x02\xcf\x63\x6b\xca\xc5\x4f\xdd\xb4\xe7\x59\x6b\x7f\x0a\x49\x48\x22\xf0\xbc\x1d\x55\x4d\xff\xcf\x2b\xa8\x52\x1c\x15\xc4\x49\x46\x08\x21\xe0\x79\x42\x7a\x54\x30\x8e\xc2\x78\x45\x2d\xd9\x9d\xee\xc6\x34\xaa\x2d\x7a\xb5\x0d\x2a\x78\xde\x86\xee\xbd\xc6\xd6\x3a\x04\xb1\x15\xd2\x82\x36\x7a\x2d\x4d\x3f\xe8\xc6\x36\x5c\x3c\xfa\x69\x6d\xa6\xcc\xf0\x2d\x82\xe7\x59\x8c\xdb\x10\xc9\xaa\x7a\x1a\x09\xf0\xbc\xb2\xf0\x98\xdc\x34\x76\xbd\x14\xa0\x75\x69\x5d\xa2\x6c\x8d\x9e\xe6\x5f\x11\x22\x92\x27\xe0\x79\x9f\xb5\x14\xaa\x61\xde\x5a\x6a\xa3\x81\xd6\xf5\x83\x31\x2e\x0c\xaa\x8a\x32\xb4\xe3\x9f\x1e\xa7\xfb\x69\x30\xbf\x97\xf9\x89\x75\x1f\x4b\x5b\x92\x02\x3b\x43\x8c\x84\x1b\x2c\xae\xec\xb8\xd1\xe0\x62\xa2\xa0\x52\x72\x03\xad\x30\xaa\xd5\x16\x12\x52\xf1\x15\x17\x23\x18\x0e\x4f\x9e\xcd\xa7\xad\xfd\x27\xb9\xfc\xe4\x79\xad\xd0\xb4\x42\x0f\xf7\x8d\xd4\xf8\x09\xaa\x9a\xae\xbe\x01\xf0\x7f\x47\xf8\xc1\x5f\x24\xfc\x47\xb5\xf4\x1f\x53\xbe\x4f\xa2\xa1\x1f\x47\x43\x3f\x1b\xc6\x4f\x8e\xff\x23\x27\x2f\x75\xc2\x29\x7e\x68\x17\xb7\xe7\xad\xff\x7a\xbf\xd5\x87\xc9\xf5\x95\xba\xd6\xf9\xd6\x4c\x92\xc2\xbc\x1f\x8b\x37\x0b\x79\xf6\xb9\xb8\xfb\x3a\xa5\x27\xdf\x51\x1f\x0f\xfd\x2c\x1e\x06\x61\xfa\xec\x06\xd3\xd7\x6c\xc7\xaf\x3f\xcb\x77\x37\x6f\xaa\x09\x8d\xb2\xe0\xc3\xd2\x50\xfc\xb0\x3f\x3f\xdb\x95\xd9\xd7\x42\x4c\xfc\xab\x74\x87\xe3\xdb\x0f\xfb\xdb\x97\x49\xdf\x91\xc6\xb3\x94\x1f\xfc\x0d\x9c\xff\x02\xe5\x4f\xc3\x10\xa3\x64\x9e\x55\x69\x56\x45\xc1\x74\x41\x22\x9f\x4e\x72\x42\x72\x3f\x88\x17\x61\x16\x64\x64\x9e\x91\x79\x38\x7d\x91\xf2\xe3\x88\x62\x98\x86\x15\xc9\x93\x8a\x56\x41\x59\x24\x45\x46\xa3\x24\xf5\x53\x46\x8a\x3c\x43\x56\x51\x92\xc6\x65\xf9\x22\xe5\xb3\x79\x40\x93\x79\x10\x05\xd3\x28\x4e\x27\x2c\x9d\xb3\x02\x09\x2b\xf2\x72\x9c\x55\xc1\x62\x31\x1d\x07\x7e\x90\x86\x2c\x7f\x99\xf2\xa3\x3c\x08\x90\xfa\x94\xc4\xcc\x8f\xe3\x28\xc5\x71\x58\xa5\x34\xc4\x71\x3e\x21\xd5\x64\x11\xe4\x49\x3c\x8f\x92\x64\xd1\x53\xfe\xa5\x6c\xb4\xc1\x27\xa4\x5f\xca\x55\x43\x0d\x5b\xff\xb9\xbe\x28\xfc\x8b\x65\x72\xdc\x1d\x7e\xb8\xfe\x65\xf6\x0b\x30\x85\x96\xf3\x55\x6f\xaa\x2d\x15\xa7\xe7\xc7\x67\x2b\xe7\x6f\x6f\x97\xfe\x7f\x0d\x53\x17\x84\xe7\xaa\x27\xfc\xdf\x16\x4f\x94\x96\xa1\x9f\x47\x55\x16\x67\xa5\xbf\xa0\x41\x32\x8d\x7d\x9a\x87\x49\xe8\x4f\xe7\xe3\x04\x17\x34\x4e\xc9\x3c\x0b\xc3\x97\x8b\x27\xf6\x13\x32\xf1\x03\x92\xfb\x2c\xf2\xe7\xe9\x34\xf2\x2b\x32\x19\xc7\x63\xcc\x83\x98\x92\x28\x48\x58\x44\xc7\xf3\xf1\x8b\xc5\x33\x0f\x83\x20\x23\x29\x09\xd3\x74\x82\xc9\x6c\x46\xc2\x2a\xc8\x93\xc4\x1f\xcf\xfc\x3c\x9a\x97\x24\xcc\xaa\x20\x0b\x49\xf5\x07\xfd\x52\x16\x10\x46\xe2\x79\x86\xf3\xb4\x4c\xc2\x34\x20\xb3\x45\x36\x8b\x31\x99\xc6\x79\x96\x8e\x59\x32\xcb\xf3\x6c\x1a\x05\x27\x03\x7b\xd9\xa4\x86\xc2\x95\x91\x8a\xae\x70\xa0\xbb\xff\xdd\x15\x72\x49\xcd\xda\x85\xb8\xb6\x37\x91\xd9\x04\x2a\x5e\xe3\xc0\x6e\x6a\xd6\x23\x38\x35\x9b\xe6\xf4\xf7\xab\xec\xbf\x4a\x6a\xe8\xd0\xad\x2c\x0b\xab\x77\x2a\x45\xc5\x57\xad\x72\x66\xdd\x6f\xc0\xdc\xe8\xd5\x9f\xdf\xa6\x53\xf0\x64\xb7\x31\x63\xb2\x15\x46\xc3\x1d\x1e\xa0\xf7\x62\x40\xfb\x41\xbb\xcf\x1d\x1e\xec\x30\xf6\x1a\x8f\x53\x56\xf6\xed\x7d\x4f\xb0\xb3\x48\x74\x88\x1a\x2f\xdf\x02\x15\x25\x2c\x83\x25\x5c\x75\x07\xba\x2d\x7e\x14\xb6\xba\x07\xb6\x6e\xdf\x48\x6d\x04\xdd\xe0\x08\x88\xbb\x7c\x92\xc1\x2b\x58\x4a\x65\x7a\x25\x56\xc1\xf7\x05\xed\xa2\x11\x64\x24\x0b\xec\xe6\xb6\xdc\x3d\x23\x5d\x4f\x04\xec\x61\xcc\xf4\xa0\x09\x9a\x2e\x44\x57\x0d\x32\x5e\x1d\x60\xbe\x37\xee\xe8\x85\xb7\xcb\x07\xb6\xba\x5e\x81\x51\x61\xaf\xf2\x0a\x6d\x3b\x54\x02\x35\xc0\x2b\x28\x70\xcd\x45\x09\xe7\xe3\x6b\xab\x06\x7b\xe9\xb7\xcb\x11\xec\x86\xfb\xe1\x61\xf8\xb5\x4b\x80\xb5\xba\xd5\x58\xde\xd7\x93\xf5\xba\xa6\x07\x54\x36\x0d\xce\x5c\xc7\x06\x6e\xf5\x35\xdf\xa0\x6c\x9d\x9b\x02\x64\x83\xa2\x7f\x5f\xe8\x9b\x21\xc7\x7e\xae\xc1\x1b\xc0\x71\xb8\x17\x19\xc1\x49\x48\xb4\x03\xdd\x45\x8b\x2d\x7e\xe3\xae\xdb\x9d\xea\x83\x60\x6b\x25\x85\x6c\xb5\x25\x54\x86\x5a\x73\xb1\x1a\x7c\xb1\x02\x5d\x30\xba\xd7\x11\xdd\xb9\xde\x6e\x0a\x54\x96\x92\x2d\x75\xa0\xd2\xa7\x4c\x0a\x6d\x59\xbe\xa7\xe7\x9d\xbd\x94\x16\xae\xdb\x93\x8c\x9a\x2e\x32\xda\x50\x65\xda\x66\x00\x56\xfe\xa6\x13\x1c\x41\xe7\xde\x42\x21\x6a\x68\x1b\x98\x2e\x3f\x00\x3b\xb0\x1a\x75\xe7\x6a\xb7\x81\x6d\xe4\x77\x94\xbb\x47\x15\x6b\x2f\x6e\xd1\xa2\x08\xfa\xe9\x1b\xca\x9d\xb7\xef\xaf\x46\xe0\x0f\xfa\x23\xa7\xb7\x50\xa1\x51\x1c\x5d\x43\x2a\x77\x7d\xb0\x29\x18\xaa\xed\x91\x63\xff\x5d\x76\x0b\x46\xe0\x13\x1b\xa3\x7b\xe6\xd4\x2e\xfb\x9c\x3d\x8e\xd7\xe0\xc8\x9b\x3d\x44\xb0\x46\x4b\x89\xbb\x35\x67\xeb\x7b\x4e\x85\x1e\xe7\x36\x29\xf6\x42\xd2\x9f\x7a\xd2\xc6\xaf\x3f\xae\x4a\xe0\x5d\xe7\xc9\x5a\x6d\xe4\xa6\xdf\xe4\x58\x84\xfd\xfb\x53\x5f\x5e\xe7\x0e\xef\x27\x1b\xca\xc5\xc9\xfd\x2b\x93\xab\xef\x5e\xf1\xfd\xbe\xac\xb6\x77\x85\x0e\x9a\x3f\xec\xd0\x5d\x95\xb8\x42\xd8\x69\x90\x0a\x78\xc3\xfa\xa7\x27\x5a\xd4\x68\x3f\x99\x3b\x28\xbb\x68\xda\x03\xd1\x0a\x7e\xb8\x3c\x1b\xc1\xda\x98\x66\x74\x7a\xea\x7a\x73\xdb\xd0\x8f\xf2\x38\x8a\x8f\x38\x70\x4f\x63\x2b\x6a\x7d\xe1\xcc\x9a\xbb\xa2\x7a\x69\x3f\x6d\x0c\x8f\x7f\x4f\x16\xd7\x7c\xc3\x4d\xb7\xf8\xcc\x7e\x8e\x20\x4a\xfd\x20\xcc\xb2\x47\xf8\x36\xd2\x25\xba\x4b\x93\xf8\xdd\x33\xa3\xa8\xd0\xf4\xbe\xf1\xb7\x3e\x94\x65\xf7\x94\x46\xc1\xdd\x8d\x1c\x71\x74\xae\x80\x51\x7c\xb5\x42\x85\x65\x57\x0d\x06\xf7\xe6\x88\x91\xae\x22\x12\x62\x4b\xe2\xb9\x8d\x15\xd2\x12\xa4\xa8\x0f\xb6\xd2\x8e\x75\x72\x7c\x4f\x3c\x9a\xf4\xbb\xea\x4b\xa4\xe5\x63\xf5\x7e\xdc\x6b\x3f\xb7\x99\x78\x68\x7b\x23\x65\x0d\x1b\xba\xbf\xc7\xa5\x91\xa0\x51\x94\x16\x93\x0f\x96\xc9\xad\x63\x81\x0d\xdd\xdf\xc3\x33\xe8\x63\xfa\x7d\x95\xee\x86\xb5\xa5\xb5\xd3\x7b\xe8\x6a\x87\x5a\x03\x59\xab\x94\x7b\xcb\x7a\x20\xb1\xa6\x1a\x0a\x44\x01\x25\x1a\x64\xc6\x85\xe9\xa8\xc0\xee\x67\x4f\xc5\xa0\xf7\x60\xc6\xb5\x43\x8b\xd3\xa8\xe5\xe6\x09\xda\x34\x94\xf2\xe1\x45\x1c\xcc\xde\x59\x44\x1b\x6e\x2b\x6c\xbf\x94\xb2\x1e\x33\xcb\x28\x73\x61\x35\x95\x23\x30\xaa\x45\x5b\x6b\x54\x1c\xa0\xc4\xa2\x5d\xad\x7a\x36\xb3\x25\xe0\xb8\x63\x25\xc1\x6e\x32\x70\xb3\x5d\xa9\x35\x8d\x92\x95\x4b\xcf\xbd\x88\xe5\x49\x3b\x3a\x82\x8a\xd6\x1a\x07\xff\x0e\x00\x00\xff\xff\x34\x74\x03\xb1\x11\x16\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 5649, mode: os.FileMode(420), modTime: time.Unix(1551103801, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x3b\x8f\xdc\x36\x10\xee\xf5\x2b\x08\xa6\xb8\x66\x1f\x7c\xbf\xba\x94\x81\x91\x34\x09\xe0\x7a\x48\x0e\xd7\xc4\xde\x6a\x15\x92\xba\xf3\xc2\xf0\x7f\x0f\xb4\xde\x4b\xae\xcb\xb9\x9b\x19\x7d\x8f\x19\xe9\x53\xc2\x79\xb4\x5a\xd6\x13\xfe\x81\xe3\xf5\xda\xce\x81\x0c\xec\xa3\xce\xa7\x09\xc7\x17\x6c\xb8\x5e\xc2\x44\x08\xa4\x74\x5d\xe7\xd1\xb7\x9a\x90\x0b\xd4\x39\x90\x7b\x49\xc8\x19\x6f\x81\x3c\x7d\xa3\x90\x73\xc3\xde\x69\xa0\xce\x47\x06\xce\x68\x27\x93\x52\x4a\x41\x2a\xd9\xf2\xa8\x8c\x44\x96\x65\xd2\x1a\x90\x2b\x2e\x40\xd3\x1d\x4d\xed\xb6\x8c\x2b\x0d\xdf\x68\xaa\xcb\x17\x6c\x34\x50\xc0\xbe\xe7\xc2\xed\xd3\x68\x1b\xe0\x3e\x1e\xf8\x75\xd0\x40\x93\xb5\xbe\x38\x69\x7d\xb6\x96\x65\x2f\x52\x49\x3c\xe7\xac\xc0\x15\xc9\xb3\x06\x06\x39\xb9\x22\x80\x45\x01\x5c\x31\x2e\x2d\xcb\xd2\x48\x56\xa4\x4b\x2c\x39\xf8\x57\x6f\x81\x06\x97\xbe\xd9\xd6\x17\x1a\xa8\x34\x89\x1b\x87\x56\xc6\xe2\x1d\x2b\x68\x75\x64\x56\xd8\xe2\x3c\x03\xcb\x21\xd3\xef\x3b\x7a\xce\x85\x06\xda\xef\x0b\xd3\x7b\xfb\x9f\x48\x3e\x3f\xe3\x4c\x83\x14\x3b\x3a\xd3\x20\x8c\xe0\x4a\xed\xe8\x42\x03\xdf\xd1\x46\x83\xdb\xd1\x0e\xcf\xdb\x01\x19\x79\x44\x6e\x50\x26\xef\xb8\x57\x2a\x73\x4c\x20\xa2\x8b\xc2\xa2\x42\x83\x2c\xea\x58\xa2\x92\x11\x99\xb4\x06\x74\x76\xce\xf9\x02\xc6\x7a\x10\x8e\x0b\xb1\x2d\x72\x81\xb4\xbd\x8a\xc4\x85\x8b\x8e\x6b\xad\x75\x04\x8e\x90\x6d\x02\xf4\xcc\x30\x74\x4e\x09\x28\x09\x9c\xd4\x26\x33\xa3\xb4\x8e\xd9\x83\xb6\x5a\x44\x30\x25\x25\xe6\x05\x96\x4d\xa9\x66\x1a\xa8\xd2\xc8\x0c\x03\xb3\xcf\x02\x70\xaf\x64\x74\x7b\x2f\x44\xd9\x2b\xe5\x84\x57\xde\x67\x69\x33\xdd\xd1\x17\x6c\xbd\x5e\xb7\x23\xbf\x3f\x3d\x3e\xfc\x02\xbd\xbf\x5e\x5b\x0e\xe4\xe9\x6d\xf4\xc8\x40\x20\x1f\x8d\xc0\x34\xd5\x8c\xf3\xa8\xe3\xf6\x5b\x0e\x84\xb2\xaf\x1f\xce\xce\x34\xfd\x42\x7e\x7d\xa4\x72\xcb\x20\xe9\xe3\xda\xe0\x84\xd3\xfb\xa8\x9e\xf1\xb6\x8d\x31\x90\xe3\xb8\x2c\xc7\xb7\x47\xd3\xf4\xf7\x8a\x2b\x6e\x88\x79\xbd\x7c\xbe\xb6\x33\xb6\x1e\x88\x98\x08\x79\xbd\x37\x9f\xa1\x8e\xbf\xea\x05\x7f\xff\x33\x10\x3e\x4d\x9b\xcc\x06\x5e\xc4\xf2\xe3\x07\x58\xd6\xf8\x5c\xd3\xa7\x2d\xf9\x87\xc3\xf1\x70\x38\xc6\xb5\x3e\xe7\x63\xc3\x7e\x5d\x5b\xc2\x7e\x5c\xc4\xf2\x09\x6f\x87\x65\x8d\x87\x05\x2f\x3f\x38\xad\xbe\xc0\xc0\xff\x27\x9d\x37\xe2\x9d\xd4\xeb\x69\xae\xf3\xe9\x83\x9e\x0f\xf4\xcf\xfb\xbe\x23\xbe\x79\xff\x13\x00\x00\xff\xff\x59\xcf\xd7\x6b\x17\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1047, mode: os.FileMode(420), modTime: time.Unix(1551360206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
