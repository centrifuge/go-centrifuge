// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x59\x73\xdb\xb8\x96\x7e\xd7\xaf\x38\xe3\xbc\xf4\xad\x1a\xca\xdc\x17\x55\x75\x4d\x51\x9b\x93\x38\x71\xcb\x96\x1d\x77\xe7\x65\x02\x82\x87\x12\x62\x11\x60\x00\x50\x8b\x7f\xfd\x14\x40\xca\x51\xe2\x38\x77\xa6\xef\xdc\xae\x9a\x9a\xeb\x17\x59\x87\x38\xfb\x77\x3e\x02\xd0\x2b\x98\x62\x45\xda\x8d\x86\x12\xb7\xb8\x11\x4d\x8d\x5c\x83\x46\xa5\x39\x6a\x20\x2b\xc2\xb8\xd2\x20\x19\x7f\xc0\xe2\x30\xa0\xc8\xb5\x64\x55\xbb\xc2\x2b\xd4\x3b\x21\x1f\x46\x20\x5b\xa5\x18\xe1\x6b\xb6\xd9\x0c\xac\x31\xc6\x11\xf4\x1a\xa1\xec\xed\xf2\x6e\xa5\x02\xbd\x26\x1a\x26\x4f\x16\xa0\x26\x8c\x6b\x63\x7f\x70\x5c\x32\x1a\x00\xbc\x82\x77\x82\x92\x8d\x0d\x81\xf1\x15\x50\xc1\xb5\x24\x54\x03\x29\x4b\x89\x4a\xa1\x02\x8e\x58\x82\x16\x50\x20\x28\xd4\xb0\x63\x7a\x0d\xc8\xb7\xb0\x25\x92\x91\x62\x83\x6a\x38\x80\xa3\xbe\x31\x09\xc0\xca\x11\x04\x41\x60\xff\x47\xbd\x46\x89\x6d\xdd\x67\xf0\xa6\x1c\x41\x1a\xa4\xdd\xb3\x42\x08\xad\xb4\x24\xcd\x02\x51\xaa\x4e\xd7\x81\xb3\x73\xd6\x84\xe7\x9e\x9f\x0c\xdd\xa1\x3b\xf4\xce\x35\x6d\xce\x83\xd4\x77\xfd\x73\xd6\x54\xea\xfc\xba\xbe\xbd\xde\x17\xbb\x87\xf6\xe3\x1f\x7f\x4c\xab\xf6\xf1\xb6\xd8\xcf\xf2\x1b\xbc\xbd\x9a\xbc\x13\x8f\x87\x43\x14\xa5\xdb\x6b\xbe\xfa\xb0\x5d\xbc\xff\xfc\xee\x8f\x87\xb3\xbf\x63\x34\x38\x1a\xfd\x50\xc5\xb3\xab\xb8\x7e\xf8\x72\x8f\x9f\xef\x2f\xef\xfd\x2f\x8b\xd6\x8b\x7f\x6f\xca\x8b\xe0\xe1\xad\xf0\x6e\x83\x7a\x4d\xd6\x8b\x71\xb4\xc4\x88\x7b\x9d\xd1\x63\xa9\xf2\x63\xa5\xba\x04\x4c\xfa\xc8\x35\xd3\x87\x39\xa1\x5a\xc8\xc3\x08\xce\xce\xfa\x27\x84\xd3\xb5\x90\x37\xd8\x08\xc5\xbe\x7b\xc4\xf8\x56\x30\x8a\x77\xbc\x21\xa6\x7c\x67\x67\x03\xdb\x9d\xf7\x84\xf1\x1f\x62\xa5\x6f\x22\xfc\x72\xd3\x81\xe5\x6f\x03\x38\x05\x47\x17\xcb\x2b\xb8\x6a\x6b\x94\x8c\xc2\x9b\x29\x88\xca\x02\xe5\x04\x12\xbd\x8d\xa7\x9e\x45\x5e\xaf\x35\x3e\x36\x06\x36\x4c\x69\xa3\xc9\x45\x89\xcf\x31\xd5\x48\xb1\x65\xf6\x81\xb0\xb6\x4f\x02\x38\x06\xfa\x77\x1b\x1d\x44\x43\xdf\x8f\x86\xbe\xeb\x0e\x43\xff\xfb\x66\x7b\xfe\x34\xb8\x14\xe2\xfe\x4a\x7d\x54\xf7\xc9\x6d\x41\x3f\x46\xe9\x55\xe2\xdd\x5d\x2f\x2f\xa3\xe9\xe7\x8f\x5f\xea\xf9\xc3\xeb\xc5\xeb\xdd\x7e\x7e\x79\x9b\x1f\xc4\xdd\xdd\x34\x2d\xab\xb3\x1f\x99\x4f\xe3\xa1\xef\xb9\x2f\x99\x9f\xa2\xaf\x76\xf7\xb3\xa0\xf2\xd9\xdb\xe2\x0e\xaf\xb3\x8b\xbb\xbb\xeb\xf1\xeb\x89\xbc\x7f\x57\x8c\x29\xc9\xde\x5f\xbc\xff\x52\xd5\xc5\x64\x25\xdb\xe2\xac\xaf\xd1\xac\x07\xf6\x53\x27\xde\x4c\xc1\x81\xbe\x1b\x2f\x41\x3f\xec\x95\xdf\x11\x53\x1e\x28\xb1\xd9\x88\x03\x96\xb0\xac\x89\xd4\x30\xe9\x11\xa5\xa0\x12\xd2\x16\x74\xc5\xb6\xc8\xbf\x29\xe5\x73\xd4\xc1\x8b\xb0\x73\xf7\x55\x9a\xba\x45\x1a\xbb\x9e\x1b\x14\x65\x18\x91\xc8\x0f\xa2\x24\xcc\x11\x27\x6e\x32\x09\x33\xdf\x0d\xbc\x2a\x4c\x52\xef\x27\x00\x75\xf7\x99\x9f\x4f\xc3\x70\x3c\x4e\xe7\x7e\x30\x8d\x4a\xcf\xcf\x70\x9c\xfa\x24\x72\xcb\x20\x8d\xd3\x62\x1c\x16\x1e\xc5\xb9\x37\x7f\x09\xca\xee\x9e\x86\x79\x8a\x63\x3f\xa9\xc6\xc1\x8c\xf8\x13\x37\x8b\xa2\x79\x4a\xa2\xb1\x17\x7b\xd1\xd8\x8f\xcb\x34\x9a\x4f\xc6\x98\x62\x0f\xfa\x4b\xb1\x25\x5d\xd6\x27\x10\x2d\x50\x72\xb2\x59\x23\x5b\xad\x75\x0f\xa1\x57\xaf\x5e\xf5\xf5\xec\x34\xe6\xf9\x75\xff\xdd\x81\x7b\x43\x53\x8c\x57\xad\x24\x70\x10\x2d\xac\x0c\xbf\x72\x40\x29\x85\x34\xe0\xb8\x5d\x33\x05\x12\xbf\xb4\xc6\x0b\x53\xc0\x85\x06\xd5\x36\x8d\x90\x1a\x4b\x28\x90\x92\x56\xa1\xd1\x94\x16\xfb\x66\x89\x6c\x39\x37\x1c\x69\x19\x50\x69\xa2\xcd\x00\xb4\x46\x34\x84\x9b\x96\x77\x72\xc7\xe9\x65\xbf\x12\x49\xd7\x6c\x8b\xc3\xb3\x7f\xef\x83\x02\xd8\x99\xf9\xd1\x02\x4a\xf1\x1f\x56\x83\xc0\xc6\xb2\x6f\x43\x24\xd3\x87\xce\x91\xb5\xf2\x60\xf3\xc1\xd5\xa8\xfb\xfa\xa9\x5f\xe0\x38\x74\x4d\x18\xff\xb5\x7b\xec\x38\x26\xda\x5f\x03\x37\x70\x43\x70\x9c\x1d\x91\x4d\xff\xe1\x14\x44\x4a\x86\x12\xa2\x38\x75\x5d\xd7\x05\xc7\xe1\xc2\x21\x9c\x32\xe4\xda\x29\x36\x82\x3e\xa8\x4e\xa6\x50\x6e\xd1\xd9\x98\xa2\x82\xe3\xd4\x64\xef\x34\x66\x44\xc1\x8f\x8c\x92\xe2\xa4\x51\x6b\xa1\x7b\xa1\x95\xd5\x8c\x7f\xf3\xd5\xc4\x4c\xa8\x66\x5b\x04\xc7\x31\xd0\x34\x25\x12\x55\xf5\xbc\x12\xe0\x38\x65\xe1\x50\x51\x37\x66\xbd\xe0\xa0\x54\x69\x52\x22\x74\x8d\x8e\x62\x8f\x08\xa1\x9b\xc5\xe0\x38\x9f\x95\xe0\xb2\xa1\xce\x5a\x28\xad\x80\x6c\x36\x27\x32\xc6\x35\xca\x8a\x50\x34\xf2\x4f\xdf\xb6\xfb\x79\x31\x7f\xd4\xf9\xb1\x49\x1f\x4b\x33\x49\x1c\xbb\x40\xb4\x80\x7b\x2c\x96\x46\xae\x15\xd8\x9a\x48\xa8\xa4\xa8\xa1\xe5\x5a\xb6\xca\x40\x42\x48\xb6\x62\x7c\x04\xc3\xe1\xd9\x8b\xfd\x34\x23\xfb\xac\x97\x9f\x1c\xa7\xe5\x8a\x54\xe8\xe0\xbe\x11\x0a\x3f\x41\xb5\x21\xab\xef\x00\xfc\x3f\xe3\x69\xff\x1f\xe4\xe9\x6f\x66\xe9\xbf\xcd\xd4\x9e\x1b\x0e\xbd\x28\x1c\x7a\xe9\x30\x7a\xf6\x5a\x3e\x52\xe9\xb2\xd8\x17\x97\x93\xe2\xe3\x3a\x7b\xfb\x41\xab\xeb\xc3\x87\x8b\xf2\x76\x21\x49\x78\xd3\x2c\xf3\x50\x17\x5b\x15\x13\xee\x79\x9f\x77\x17\xb9\xff\x78\xf6\x03\xf3\xd1\xd0\x4b\xa3\xa1\x1f\x24\x2f\x39\xb8\xae\x7d\xba\xac\xe5\x8c\x91\xe5\xfb\x0f\xe1\xea\x6e\x9b\xdc\x5f\xac\x9b\xd5\xcd\x4e\xa4\x3b\x31\x5f\xaa\xd7\xeb\x8f\x17\xc5\x05\x0b\x48\x9e\xee\x7f\xce\xd5\x96\x34\x5e\x64\x6a\xff\x9f\x40\xd5\x3f\x61\x6a\x2f\x88\xfd\x19\x1d\x57\x69\x9c\x64\x7e\x18\xcc\xfc\xb0\xca\xdd\xd9\x24\xf4\xa3\xd2\x47\xcf\xcd\xdd\xd4\xf7\x03\x9a\x4c\x7f\xca\xd4\x89\x97\xba\xd3\x24\x09\x3c\xb7\x44\x9a\xe6\x63\x3f\xcd\x49\xea\xfa\x33\xea\x66\xf3\x2a\xf7\xa7\xf3\x38\xc4\xcc\x4d\xe8\xcb\x4c\xed\xa5\x81\x97\xb8\x61\xea\xc5\x61\x5a\x61\x55\x61\x98\x85\xee\x3c\x98\xe6\x79\x19\x90\xa4\xa0\x45\xe1\xd2\x28\xcf\xe7\x3d\x53\xdf\x88\x46\x69\x7c\xc6\xd5\xa5\x58\x35\x44\xd3\xf5\x9f\xdb\x85\x04\xff\x20\xba\x8f\xde\xe1\x97\xdb\xdf\xa6\xbf\x01\x95\x68\xa8\x5a\xf6\xa1\x1a\x84\x5b\x3b\x7f\xfb\xff\xb6\x35\xe9\x0a\xf0\x12\xe0\x83\xbf\x16\xef\x6e\x19\x64\xde\x2c\xf1\x03\x3f\x9a\x60\x39\x09\xbd\x59\x98\xba\x51\x30\x4b\x12\x3f\x4d\x49\x9a\xcd\xfd\x59\xe0\x79\x5e\xf4\x53\xbc\xfb\x93\xd4\x9d\x7b\x53\x52\x4d\x49\x42\xf2\x29\x16\xfe\xc4\x4b\xa2\x32\x1c\x87\x41\x9e\x46\x69\x98\x04\x33\xcf\x4b\xbc\xe0\x65\xbc\xcf\x92\x20\x0d\x3d\x2f\x74\xe7\x14\xb3\x20\xf3\xfc\x19\x4d\xe2\xac\xcc\xcb\x74\x1e\xa6\xfe\xb8\x8a\x68\x12\xa7\xd3\x3c\x3a\xd9\x8e\x9b\xdd\xf7\x29\xde\x61\xfa\x1b\x5c\xfd\x76\x0b\x77\xcb\xd9\xbf\x0d\x00\xb0\x2e\x88\xa4\xa4\x44\x29\xcc\xaa\x3f\x35\x02\x9e\xfb\x22\x36\xbf\x81\x8f\x97\xa5\x43\xcf\xf7\x87\x9e\xf7\x22\x5d\xe6\xab\x60\x46\x73\x2d\xff\xf8\x30\xd9\xef\x1e\xe3\x87\x58\xdd\x66\xec\xe3\xf2\xe6\x51\x3f\x66\xd3\xe4\x70\xf7\xd8\x8c\x17\x37\xb3\xf9\xa3\xbc\x13\x1f\xce\x9e\x7b\xf0\x43\x7f\xe8\xfb\xde\xd0\xf3\x5e\x64\xfc\xcb\x8b\x1d\xdb\xff\x8e\xbc\xfd\x3d\xff\xf0\xe5\xe1\xed\x65\xcd\x5f\x2f\xf3\xb7\xd3\xcf\x8f\x55\x82\x17\xef\x45\xac\xa5\x60\xab\x8f\xfb\x3a\xc9\xa3\x9b\x9f\x23\xb4\xee\xaa\xfb\x12\x42\xbd\xbf\x16\xa1\xf9\x3c\x8c\x62\xea\xc5\x41\x1a\x93\x38\xac\xca\x70\x1e\x16\x71\x46\x2a\x2f\x20\x69\x3c\xad\xdc\x71\x14\xfb\x39\x71\xdd\x9f\x22\x34\x0e\x92\x71\x3a\x09\xa6\x7e\x9e\x07\x13\xea\xbb\xf1\x34\x0b\x23\x2f\x2b\xa2\x30\xcd\x7c\x37\xcd\x68\x36\x8b\x93\x2c\x73\x5f\x46\xe8\x38\xc2\xd0\x0f\xca\x09\x4d\x42\xb7\x18\x4f\x52\xb7\xca\xdc\xd8\x0b\x02\xf4\xa2\xd8\xf5\xaa\x2c\x75\xb3\x2c\x0d\xa2\xf8\x3b\x84\x7e\x85\xd4\x09\x20\xff\xb7\xc1\xf8\xcf\x86\xe2\xbf\x80\xf8\x7f\x13\x88\xaf\x60\x4a\x34\x81\xa5\x16\x92\xac\x70\xa0\xba\xcf\xee\xbe\x69\x41\xf4\xda\x56\x66\x83\x5b\xdc\x4c\xc7\x50\xb1\x0d\x0e\x00\x1a\xa2\xd7\x23\x38\xd7\x75\x73\xfe\xf5\xde\xeb\x3f\x4b\xa2\xc9\xd0\xae\x2c\x0b\x63\x77\x22\x78\xc5\x56\xad\x24\x76\xdf\x7e\x74\x40\xad\x74\xf9\xe7\xdd\x74\x06\x9e\x79\xcb\x29\x15\x2d\xd7\x0a\x1e\xf0\x00\x7d\x16\x03\xd2\x0b\x8d\x9f\x07\x3c\x18\x31\xf6\x16\x8f\x8f\x8c\xee\x9b\xa7\x83\xca\xce\x00\xc8\x02\x21\x5f\xbc\x01\xc2\x4b\x58\xf8\x0b\x58\x76\xa7\x0c\xb3\xb5\x41\x6e\xf6\x2e\x03\xb3\x2b\x79\x2d\x94\xe6\xa4\xc6\x11\x3c\xdd\x55\x0d\x5e\xc1\x42\x48\xdd\x9b\x31\x26\x7e\xac\x6a\x16\x8d\x20\x75\x53\xdf\xb8\x37\x53\xea\x68\x61\x8f\x6a\x40\x4f\xab\xa6\x06\x8d\xdf\x74\x45\x5a\x36\x48\x59\x75\x80\xd9\x5e\xdb\x13\x01\xbc\x59\x9c\x44\x6b\x8f\x30\x94\x70\x28\x10\x24\x9a\x53\x5a\x09\x44\x03\xab\xa0\xc0\x35\xe3\x25\x5c\xe5\xb7\xc6\x0c\xf6\xda\x6f\x16\x23\xd8\x0d\xf7\xc3\xc3\xf0\xb1\x6b\x81\x89\xba\x55\x58\x3e\x0d\x82\xc9\x7b\x43\x0e\x28\x4d\x23\x6c\xb8\x76\x8c\xed\xea\x5b\x56\xa3\x68\x6d\x9a\x1c\x44\x83\xbc\xbf\x8e\xec\xcf\x68\x76\x77\x67\xcf\x9d\x03\x38\x8a\x7b\x95\x11\x9c\x05\xae\xb2\xb0\xbb\x6e\xb1\xc5\xef\xd2\xb5\xde\x89\x3a\x70\xba\x96\x82\x8b\x56\x99\x0d\x23\x45\xa5\x18\x5f\x0d\xbe\x18\x85\xae\x18\xdd\x65\xaa\xea\x52\x6f\xeb\x02\xa5\x21\x47\x33\xf3\x28\xd5\x39\x15\x5c\x19\xd6\xec\xb7\x9f\x3b\xb6\xd9\x98\xba\x90\x8d\x39\x74\xea\xae\x32\x4a\x13\xa9\xdb\x66\x00\x46\xff\xbe\x53\x34\xfc\xe9\x5a\xfb\x73\x89\xa8\xa0\x6d\x60\xb2\xb8\x03\x7a\xa0\x1b\x54\x5d\xb2\x9d\x0b\x60\x0a\x76\x84\xd9\x5b\x58\x13\x31\x6e\xd1\x20\x09\xfa\xc7\xf7\x84\xd9\x7c\xdf\x2f\x3b\xfe\xb1\x24\xde\xc7\x28\x51\x4b\x86\xf6\xa4\x2c\x76\x7d\xb9\x09\x68\xa2\x0c\x89\x9b\x8f\x9b\x6e\x81\xe5\xf2\xc1\x09\xe9\x29\xdb\x7f\x46\xbf\xad\xd8\xe0\x48\x79\x3d\x48\x70\x83\x86\xcd\x76\x6b\x46\xd7\x4f\x74\x08\x3d\xd6\x4d\x5b\x5a\x85\xc7\xf7\x88\x30\x15\xec\x37\xe4\x25\xb0\xee\x48\x4c\x5b\xa5\x45\xdd\x3b\x39\x0e\x62\x7f\x61\xdd\x8f\xd8\x95\xc5\xfc\x99\x21\xde\xb3\xa7\x6b\x69\x3b\xe3\xbd\xe1\x27\xbf\x74\xc3\x90\xeb\x0e\x9c\xbf\xec\xd0\xde\xe1\x30\x89\xb0\x53\x20\x24\xb0\x86\xf6\x77\xd5\xa4\xd8\xa0\xf9\x97\xda\xa3\x40\x57\x4d\xb3\xe5\x37\x8a\x77\x37\xef\x46\xb0\xd6\xba\x19\x9d\x9f\xdb\x4b\x83\xb5\x50\x7a\x94\x45\x61\x64\x7d\xd7\x64\xcf\x6a\x93\x62\x5f\xcf\x15\x31\x39\x31\x6a\xed\x35\xe4\x70\x2c\xb0\x24\x5c\xf5\x57\x19\x8c\xc3\x0e\x99\xd5\xf6\x5d\xb8\xd8\x21\x03\x2e\x76\x03\x30\xb6\x2e\x88\x5a\x18\xed\x11\xf8\xee\xd3\x9f\x5d\x7a\x41\x14\x6c\x58\xcd\xfa\x77\x45\xc9\xaa\x0a\xa5\xc9\xee\xa9\x43\xa2\xc1\xe3\xd4\x82\x89\xe3\x9d\x5d\x7d\xbc\x66\x9f\xd8\xa3\x8d\x85\x58\x6f\xd3\x48\xf3\xb2\xbc\xc4\xc3\x08\x82\x53\xe1\x0d\x6e\xc5\x03\x5a\x79\x14\x1d\xc5\xdd\x9b\x62\x22\xea\x9a\x19\xea\xf8\x4e\xbe\x90\x78\x7c\xe4\x7d\x35\xc5\x2b\xfd\x9e\x71\x3d\x82\xec\x6b\x1e\xc7\xd9\xd5\xc2\x42\xb8\xab\x0f\xff\xda\xb3\xd3\x4a\xf5\xdd\x29\xcb\xee\x57\x05\x02\xf6\x3a\xca\xd2\x62\xd7\x24\xd0\x92\xad\x56\x28\xb1\xec\x26\x5d\xe3\x5e\x1f\xd1\xdf\x4d\x7b\xec\x9a\x71\x7f\xc9\xb1\x44\x52\x82\xe0\x9b\xc3\x49\xf1\x9e\x7e\x5a\x39\x86\xf4\xd5\xf4\x0d\x92\xf2\x5b\xf3\x5e\xd4\x5b\xbf\x32\x18\x3b\x8d\xbd\x11\x62\x63\x3a\xfa\x34\x71\x5a\x80\x42\x5e\x7e\x07\x06\xb1\xb5\x0c\x57\x93\xfd\xd3\xe0\xf9\x7d\xa5\x7e\x6c\xd2\x5e\x6a\x6d\xc9\xc6\xda\x3d\x74\xac\x40\x4c\x80\xb4\x95\x16\x0f\xa7\x1a\x6b\xa2\xa0\x40\xe4\x50\xa2\x46\xaa\x6d\x99\x8e\x06\x8c\x3f\xf3\xbe\xf7\xfb\x0c\xa6\x4c\xd9\x39\xb0\x16\x95\xa8\x9f\xcd\x91\x82\x52\x9c\xde\x7d\x82\xde\xdb\x88\x48\x63\xc0\xac\xf7\x0b\x21\x36\x39\x35\x6c\x39\xe3\xc6\x52\x39\x02\x2d\x5b\x34\x2c\x42\xf8\x01\x4a\x2c\xda\xd5\xaa\x67\x6a\x33\xdc\x96\x17\x57\x02\x8c\x93\x81\x7d\xda\x91\x48\xd3\x48\x51\x75\x20\x3f\xaa\x98\x77\x80\x91\x8e\xa0\x22\x1b\x85\x83\x41\x87\xba\xfe\x57\xa4\x46\x22\xed\xc1\x67\x1d\xfe\x57\x00\x00\x00\xff\xff\x60\xe6\x2f\xe2\x3a\x1b\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6970, mode: os.FileMode(420), modTime: time.Unix(1554995686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1554467633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

