// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x49\x73\xdb\x3a\x12\xbe\xeb\x57\x74\xc9\x97\x99\xaa\xa1\xcc\x7d\x51\xd5\xab\x29\x79\x4b\xf2\xe2\x78\x64\x5b\x8e\x5f\x7c\x99\x80\x40\x53\x44\x4c\x01\x0c\x00\x6a\xc9\xaf\x9f\x02\x48\x39\x76\xbc\xbc\x59\x6a\x72\x31\x05\xa0\x1b\xbd\x7c\xfd\xa1\x3b\x07\x70\x82\x15\xe9\x1a\x03\x0c\xd7\xd8\xc8\x76\x85\xc2\x80\x41\x6d\x04\x1a\x20\x4b\xc2\x85\x36\xa0\xb8\xb8\xc7\x72\x37\xa2\x28\x8c\xe2\x55\xb7\xc4\x0b\x34\x1b\xa9\xee\xa7\xa0\x3a\xad\x39\x11\x35\x6f\x9a\x91\x53\xc6\x05\x82\xa9\x11\xd8\xa0\x57\xf4\x27\x35\x98\x9a\x18\x38\x7e\xd0\x00\x2b\xc2\x85\xb1\xfa\x47\xfb\x23\xd3\x11\xc0\x01\x9c\x4b\x4a\x1a\x67\x02\x17\x4b\xa0\x52\x18\x45\xa8\x01\xc2\x98\x42\xad\x51\x83\x40\x64\x60\x24\x94\x08\x1a\x0d\x6c\xb8\xa9\x01\xc5\x1a\xd6\x44\x71\x52\x36\xa8\x27\x23\xd8\xcb\x5b\x95\x00\x9c\x4d\x21\x8a\x22\xf7\x8d\xa6\x46\x85\xdd\x6a\xf0\xe0\x03\x9b\x42\x1e\xe5\xfd\x5e\x29\xa5\xd1\x46\x91\x76\x8e\xa8\x74\x2f\xeb\xc1\xf8\x90\xb7\xf1\x61\x10\x66\x13\x7f\xe2\x4f\x82\x43\x43\xdb\xc3\x28\x0f\xfd\xf0\x90\xb7\x95\x3e\xbc\x5c\x2d\x2e\xb7\xe5\xe6\xbe\xbb\xfb\xf2\xe5\xa4\xea\x7e\x2c\xca\xed\xe9\xec\x0a\x17\x17\xc7\xe7\xf2\xc7\x6e\x97\x24\xf9\xfa\x52\x2c\x3f\xaf\xe7\x9f\xbe\x9d\x7f\xb9\x1f\xff\x89\xd2\x68\xaf\xf4\x73\x95\x9e\x5e\xa4\xab\xfb\xef\xb7\xf8\xed\xf6\xe3\x6d\xf8\x7d\xde\x05\xe9\x1f\x2d\x7b\x17\xdd\xff\x2e\x83\x45\xb4\xaa\x49\x3d\x3f\x4a\xae\x31\x11\x41\xaf\x74\x1f\xaa\xd9\x3e\x52\xbd\x03\xd6\x7d\x14\x86\x9b\xdd\x19\xa1\x46\xaa\xdd\x14\xc6\xe3\x5f\x76\xae\x70\xc9\xb5\x79\xb2\x45\x04\xad\xa5\xba\xc2\x56\x6a\xfe\x8b\x54\x4b\x76\x16\x26\xff\x28\x1b\xbe\x24\x86\x4b\xe1\xf6\x5c\xf2\x3e\x11\x2e\x5e\x84\xd2\x90\xe3\x11\x3c\x46\x4c\x6f\xe0\x01\x5c\x74\x2b\x54\x9c\xc2\x87\x13\x90\x95\x43\xcf\x23\x9c\xfc\x94\xec\x13\x99\x04\x83\xd4\xd1\x3e\x5b\xd0\x70\x6d\xac\xa4\x90\x0c\x9f\x03\xad\x55\x72\xcd\xdd\x86\x74\xba\x1f\x19\xb0\x37\xef\x4f\xb3\x1f\x25\x93\x30\x4c\x26\xa1\xef\x4f\xe2\xf0\x57\x04\x04\xe1\x49\xf4\x51\xca\xdb\x73\xce\xe9\xe5\xe7\xcd\xa2\x5e\x1c\x7d\x49\xb7\x1f\xe9\x5c\x9e\x57\xe9\xd5\xe5\x97\xdf\xcf\xda\x4d\x15\xa8\x2c\xd9\x9c\x6f\xc3\xbb\xab\xa8\x3d\x66\xc1\xf8\x25\xf5\x79\x3a\x09\x03\xff\x35\xf5\x97\x77\x9f\x66\xf9\xbb\xf9\x7b\xb5\x3e\xbd\x3b\x2a\x36\xec\x5e\xde\xd0\xd9\x6c\x75\x7c\xf7\xbe\x2d\x70\xb7\xbb\x8b\xaf\x4f\xf3\xe5\x99\x8a\xea\xc5\xc5\x1f\xe3\x21\x46\xa7\x03\xda\xf7\x51\xb4\x21\xf6\xe0\x6a\xa8\xe7\x57\xea\x21\x1e\x84\xcf\x89\x0d\x0f\x30\x6c\x1b\xb9\x43\x06\xd7\x2b\xa2\x0c\x1c\x0f\x30\xd3\x50\x49\xe5\x02\xba\xe4\x6b\x14\x4f\x42\xf9\x1c\x8a\xf0\x2a\x16\xfd\x6d\xe1\xb3\xb0\x88\x93\x2c\xc0\x2c\xca\xe3\x30\x2d\x32\x92\xa6\x65\x46\x8a\x82\xf8\x05\x63\x29\xcd\x22\x16\x25\x29\x7b\x03\xb5\xfe\xb6\x48\x53\x9f\xfa\x51\xc1\xa2\x20\x88\x93\x88\x54\x3e\x4b\x72\x9a\xa4\x69\x9a\x85\x11\x2b\x68\x58\x91\x8c\xa5\x48\xdf\xc0\xb7\xbf\xcd\xaa\x3c\x89\x59\x45\x8a\xdc\x0f\x42\x96\x55\x24\x49\x68\xee\x47\x65\x49\xc2\x30\xf5\x4b\xca\x10\xe3\x32\x41\xf6\x56\x25\xf8\x5b\x56\xfa\x49\x1e\xcc\x8a\x28\xcc\xd3\x34\xce\x93\x24\x0a\xf3\x19\x3b\x29\xfd\xd3\x30\x09\x82\x3c\x4e\x63\xbf\x2a\x30\x39\x71\x35\x53\xa2\x12\xa4\xa9\x91\x2f\x6b\x33\x80\xee\xe0\xe0\x60\xc8\xc0\x47\xb9\x26\x02\xce\x66\x97\xc3\x6f\x0f\x6e\x2d\xdb\x71\x51\x75\x8a\xc0\x4e\x76\xb0\xb4\x34\x2d\x00\x95\x92\xca\xc2\x69\x51\x73\x0d\x0a\xbf\x77\x36\x73\x5c\x83\x90\x06\x74\xd7\xb6\x52\x19\x64\x50\x22\x25\x9d\x46\x2b\xa9\x5c\xb5\xd8\x23\xaa\x13\xc2\x52\xad\x23\x52\x6d\x88\xb1\x25\xd3\xd9\xa5\x09\x5c\x75\xa2\x5f\xf7\xbc\x61\xed\x37\xa2\x68\xcd\xd7\x38\x19\xff\x6d\x30\x0a\x60\x63\x2b\xce\x48\x60\xf2\xef\x4e\x82\x40\xe3\x48\xbc\x25\x8a\x9b\x5d\x7f\x91\xd3\x72\xef\xfc\xc1\xe5\xb4\xff\xf9\x75\x38\xe0\x79\xb4\x26\x5c\xfc\xd6\x6f\x7b\x9e\xb5\xf6\xb7\xc8\x8f\xfc\x18\x3c\x6f\x43\x54\x3b\xfc\xf1\x4a\xa2\x14\x47\x05\x49\x9a\xfb\xbe\xef\x83\xe7\x09\xe9\x11\x41\x39\x0a\xe3\x95\x8d\xa4\xf7\xba\x5f\xd3\xa8\xd6\xe8\x35\x36\xa8\xe0\x79\x2b\xb2\xf5\x5a\x5b\xd4\x10\x26\x56\x48\x0b\xd2\xea\x5a\x9a\x61\xd1\xad\xad\xb8\x78\xf2\xd3\xda\x4c\xa8\xe1\x6b\x04\xcf\xb3\x60\xb6\x21\x92\x55\xf5\x3c\x12\xe0\x79\xac\xf4\xa8\x5c\xb5\xf6\xbc\x14\xa0\x35\xb3\x2e\x11\x5a\xa3\xa7\xf9\x0f\x84\xd8\x2f\x52\xf0\xbc\x6f\x5a\x0a\xd5\x52\xaf\x96\xda\x68\x20\x4d\xf3\x68\x8d\x0b\x83\xaa\x22\x14\xed\xfa\xd7\xa7\xe9\x7e\x1e\xcc\x97\x32\x7f\x64\xdd\x47\x66\x6b\x4f\x60\x6f\x88\x91\x70\x8b\xe5\xb5\x5d\x37\x1a\x5c\x4c\x14\x54\x4a\xae\xa0\x13\x46\x75\xda\x42\x42\x2a\xbe\xe4\x62\x0a\x93\xc9\xf8\xd5\x7c\xda\x22\x7f\x96\xcb\xaf\x9e\xd7\x09\x4d\x2a\xf4\x70\xdb\x4a\x8d\x5f\xa1\x6a\xc8\xf2\x17\x00\xff\x67\xcc\x1e\xfe\x8f\xcc\xfe\xa4\x96\xfe\x6d\x6e\x0f\xfc\x78\x12\x24\xf1\x24\xc8\x27\xc9\xb3\xd7\x7d\x4f\xbe\x73\x9d\x72\x82\x37\xdd\xd9\xdd\x45\x17\xbc\xdb\xae\xf5\xee\x68\x71\xad\x16\xba\x58\x9b\xa3\xb4\x34\x9f\x66\xe2\xfd\x99\x3c\xff\x56\xde\xff\x38\x26\xe3\x17\xd4\x27\x93\x20\x4f\x26\x61\x94\xbd\x7a\xc1\xf1\x3b\xba\xe1\x8b\x6f\xf2\xe3\xed\xfb\xea\x88\xc4\x79\x78\x33\x37\x04\x6f\xb6\x17\xe7\x1b\x96\xff\x28\xc5\x51\x70\x9d\x6d\x70\x76\x77\xb3\xbd\x7b\x9b\xdd\x1d\x69\xbc\xca\xed\xe1\xff\x81\xdc\xdf\xe0\xf6\x3c\x29\xa3\xb0\xca\x48\x54\xc5\x7e\x9c\x07\x55\x10\x46\x51\xec\xc7\x41\x9a\xf9\x34\xa7\x25\xfa\x59\x95\xb1\xac\xa0\x6f\x72\x7b\x12\x13\x8c\xb2\xa8\xf2\x8b\xb4\x22\x55\xc8\xca\xb4\xcc\x49\x9c\x66\x41\x46\xfd\xb2\xc8\x91\x56\xc4\xcf\x12\xc6\xde\xe4\xf6\x38\x8e\xab\x34\x2e\x30\xf2\xb3\x38\x0e\x31\x4b\x29\xad\xb2\x28\x8b\xd3\x14\x93\xb0\x0a\x52\xbf\x28\x8b\x3c\x4c\xfd\xb7\xb9\xdd\x8f\x83\x0c\xcb\x28\x2b\xe2\x20\x48\xe3\x28\xcd\x63\x3f\x38\x49\xd3\xb4\xc8\x63\x7a\x7a\x92\xa5\x45\x3c\x3b\xa2\x47\x65\x30\x1e\xd9\x76\x98\x18\x02\xd7\x46\x2a\xb2\xc4\x91\xee\xff\xf6\x4d\xee\x9c\x98\xda\x85\xb8\xb1\xbd\xd2\xc9\x11\x54\xbc\xc1\x91\xbd\xd4\xd4\x53\x38\x34\xab\xf6\xf0\x67\xb3\xfd\x4f\x46\x0c\x99\xb8\x93\xac\xb4\x7a\x8f\xa5\xa8\xf8\xb2\x53\xce\xac\x87\x0b\xa8\x5b\xbd\xfe\xef\xaf\xe9\x15\x3c\xbb\x6d\x81\x82\x08\x03\xf7\xb8\x83\xc1\x87\x91\x71\x4b\x2e\xf1\xf7\xb8\xb3\xab\x38\xa8\x1b\x76\xac\xdc\x87\x07\x4a\xdb\x58\x18\x3a\x34\xcd\xe6\x1f\x80\x08\x06\xf3\x70\x0e\xd7\x3d\x1f\xd9\x12\x47\x61\x6b\x78\x64\xab\xfc\xbd\xd4\x46\x90\x15\x4e\xc1\x77\xad\xb1\x3f\x3a\x80\xb9\x54\x66\x50\x62\x15\xbc\x2c\x68\x0f\x4d\x21\xf7\xf3\xd0\x5e\x6e\xeb\xdc\x33\xd2\x51\x3a\xd0\xc7\xf1\xd2\xa3\x36\x6c\xfb\xf0\x5c\xb7\x48\x79\xb5\x83\xd3\xad\x71\xcc\x01\x1f\xe6\x8f\x6c\x75\x54\x47\x89\xb0\x83\x86\x42\xcb\xe6\x0c\x88\x01\x5e\x41\x89\x35\x17\x0c\x2e\x66\x0b\xab\x06\x07\xe9\x0f\xf3\x29\x6c\x26\xdb\xc9\x6e\xf2\xa3\x0f\xbe\xb5\xba\xd3\xc8\x1e\x6a\xc9\x7a\xdd\x90\x1d\x2a\x9b\x02\x67\xae\x23\x02\x77\x7a\xc1\x57\x28\x3b\xe7\xa6\x00\xd9\xa2\x18\xa6\x9f\x81\xcb\x1d\xc7\xb9\xf7\x69\x04\xfb\xe5\x41\x64\x0a\xe3\xc8\xd7\x0e\x70\x97\x1d\x76\xf8\x8b\xbb\xee\x76\xa2\x77\x82\xd6\x4a\x0a\xd9\x69\x4b\x9b\x14\xb5\xe6\x62\x39\xfa\x6e\x05\xfa\x60\xf4\xb3\x9b\xee\x5d\xef\x56\x25\x2a\x4b\xbc\x96\x37\x50\xe9\x43\x2a\x85\xb6\x5c\x3e\x90\xf0\xc6\x36\xcf\xa5\x7b\xac\x24\x25\xa6\x8f\x8c\x36\x44\x99\xae\x1d\x81\x95\xbf\xed\x05\xa7\xd0\xbb\x77\xa6\x10\x35\x74\x2d\x1c\xcf\x6f\x80\xee\x68\x83\xba\x77\xb5\xbf\xc0\xf6\x21\x1b\xc2\xdd\xc8\x67\xed\xc5\x35\x5a\x14\xc1\xb0\x7d\x4b\xb8\xf3\xf6\xd3\xf5\x14\x02\xeb\xe8\x03\xf3\x69\x97\x42\x4e\x9f\x3a\x3d\xda\x33\xdf\x90\x67\x6c\xd0\x72\xda\xa6\xe6\xb4\x7e\x60\x45\x20\x94\xca\x4e\xb8\x97\xce\x36\x45\xc3\x03\x25\x6d\x10\x86\x97\x85\x01\xef\x5f\x3f\xda\x69\x23\x57\xc3\x25\xfb\x2a\x1a\x46\xdc\x59\xaf\xe6\xc2\x81\x76\x6c\xc7\xda\xf1\xc3\x20\xeb\x0a\x74\x50\xfc\x70\x2f\x6d\x6c\xbf\xd2\xe3\xeb\x2f\x1b\x74\xed\x1a\x57\x08\x1b\x0d\x52\x01\x6f\xe9\x30\xdd\xda\x61\xd6\x7e\x52\x62\xac\xd9\x2e\x24\x7f\xb5\xd1\x95\x0c\x6f\xae\xce\xa7\x50\x1b\xd3\x4e\x0f\x0f\x5d\x7f\x60\x9b\x8a\x69\x91\xc4\xc9\x3e\x99\x6e\xfa\x5e\x12\xeb\x0b\xa7\xd6\xdc\x25\xd1\x73\xfb\x39\x85\xc0\xdf\xff\x7b\x76\xb8\xe1\x2b\x6e\xfa\xc3\xe7\xf6\x73\x0a\x71\x16\x84\x51\x9e\x3f\x01\xa9\x91\x2e\x5b\x3d\xb4\xc4\x4f\xcf\x8c\x22\x42\x93\x87\xe6\xc3\xfa\xc0\x58\x3f\xad\x13\x70\xfd\x99\xab\xfe\xde\x15\x30\x8a\x2f\x97\xa8\x90\xf5\x90\x36\xb8\x35\xfb\x44\xf7\xb0\x4e\x7d\x8b\xeb\xd7\x2e\x56\x48\x18\x48\xd1\xec\x6c\xb9\xec\xc1\xbe\xff\x2f\x8b\xbd\x49\x3f\x55\x5f\x21\x61\x4f\xd5\x07\xc9\xa0\xfd\xc2\x66\xe2\xb1\xed\xad\x94\x0d\xac\xc8\x16\x14\x1a\xc5\xfb\x06\x43\xa3\x60\x40\x9e\x1c\x93\x6b\x57\xca\x2b\xb2\xbd\xea\xcf\x4d\x21\x1c\x62\xfa\xb2\x4a\xd7\xe5\xad\x49\xe3\xf4\xee\xfa\x02\x20\xd6\x40\xda\x29\xe5\xc6\xe5\x47\x12\x35\xd1\x50\x22\xda\x79\xda\x20\x35\x2e\x4c\x7b\x05\xf6\x3e\xfb\xac\x85\x83\x07\x27\x5c\x3b\xb4\x38\x8d\x5a\xae\x9e\xa1\x4d\x03\x93\x8f\x87\x01\x30\x5b\x67\x11\x69\xf9\x08\xc0\x6c\xe7\x52\x36\x33\x6a\x69\xe1\x54\x58\x4d\x6c\x0a\x46\x75\x68\x6b\x8d\x88\x1d\x30\x2c\xbb\xe5\x72\xa0\x24\x5b\x02\x8e\x00\x96\x12\xec\x25\x23\xb7\xdb\x97\x5a\xdb\x2a\x59\xb9\xf4\x3c\x88\x58\xb2\xb3\xab\x53\xa8\x48\xa3\x71\xf4\xaf\x00\x00\x00\xff\xff\x32\xb3\x83\xb8\x74\x12\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 4724, mode: os.FileMode(420), modTime: time.Unix(1547483298, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xc9\x8e\xdc\x36\x10\xbd\xeb\x2b\x88\xca\x61\x2e\xbd\x70\x15\x97\x3f\x08\x8c\xe4\x12\x03\x3e\x17\xc9\x62\x8f\xd0\xd3\x6a\x85\xa4\x66\xdc\x30\xfc\xef\x81\xda\x3d\x99\xeb\x18\xba\x90\x4f\x6f\xa9\x92\x5e\xa2\xb9\xd7\xa9\xac\x27\xfa\x9b\xfa\xdb\xb5\x9e\x03\xeb\xd4\xfa\x34\x9f\x06\xea\xcf\x54\x69\xbd\x84\x81\x31\x4c\xe9\xba\xce\xbd\x6d\x67\xc6\x2e\x38\xcd\x81\xdd\x8f\x8c\x9d\xe9\x16\xd8\xd3\x0f\xc0\x9c\x2b\xb5\x06\x01\x9c\x8f\x1c\xdd\x68\x9c\x4a\x5a\x6b\x8d\xa9\x64\x2b\xa2\x1e\x15\xf1\xac\x92\x31\x48\x42\x0b\x89\x06\x76\x90\xea\x6d\xe9\x57\x08\x3f\x20\x4d\xcb\x33\x55\x08\x80\xd4\xf6\x42\xba\x7d\xea\x75\x23\xdc\xe1\x4e\xdf\x3b\x04\x48\xd6\xfa\xe2\x94\xf5\xd9\x5a\x9e\xbd\x4c\x25\x89\x9c\xb3\x46\x57\x94\xc8\x06\x39\xe6\xe4\x8a\x44\x1e\x25\x0a\xcd\x85\xb2\x3c\xab\x51\xf1\xa2\x5c\xe2\xc9\xe1\xff\x7e\x0b\x56\xbc\xb4\x2d\x76\x7a\x85\x00\x6a\x4c\x62\x74\x64\x55\x2c\xde\xf1\x42\xd6\x44\x6e\xa5\x2d\xce\x73\xb4\x02\x33\xfc\xdc\xc1\x39\x17\x08\xd0\xee\x03\xc3\xfd\xfa\x61\x92\xcf\x2f\x34\x43\x50\x72\x07\x33\x04\x39\x4a\xa1\xf5\x0e\x16\x08\x62\x07\x15\x82\xdb\x41\xc3\x97\x6d\x81\x4c\x22\x92\x18\x49\x25\xef\x84\xd7\x3a\x0b\x4a\x28\xa3\x8b\xd2\x92\xa6\x91\x78\x34\xb1\x44\xad\x22\x71\x65\x47\x34\xd9\x39\xe7\x0b\x8e\xd6\xa3\x74\x42\xca\x6d\x90\x0b\xa6\xed\x53\x24\x21\x5d\x74\xc2\x18\x63\x22\x0a\xc2\x6c\x13\x92\xe7\x23\x27\xe7\xb4\xc4\x92\xd0\x29\x33\x66\x3e\x6a\x63\x62\xf6\x68\xac\x91\x11\xc7\x92\x12\xf7\x92\xca\xe6\x34\x65\x08\xa0\x0d\xf1\x91\xe3\xb8\xcf\x12\x69\xaf\x55\x74\x7b\x2f\x65\xd9\x6b\xed\xa4\xd7\xde\x67\x65\x33\xec\xe0\x95\x6a\x9b\xae\xdb\x92\x3f\x9f\x1e\x3f\x7e\xc1\xd6\xde\xae\x35\x07\xf6\xf4\x0e\x3d\x3a\x10\xd8\x67\x2b\x30\x0c\x53\xa6\xb9\x4f\xfd\xf6\x67\x0e\x0c\xf8\x77\x2e\x3e\x1e\x18\x86\x3f\xd8\x57\x9a\x71\xee\x5b\xcb\x58\xeb\xd7\x8a\x27\x1a\xfa\x1d\xba\x77\xf1\x4c\xb7\x0d\xa5\xc0\x8e\xfd\xb2\x1c\x1f\x6f\x86\xe1\xdf\x95\x56\xda\x08\xf3\x7a\xf9\x76\xad\x67\xaa\x2d\x30\x39\x30\xf6\x76\xbf\x7c\xc3\xa9\x7f\x9d\x2e\xf4\xd7\x3f\x81\x89\x61\xd8\x5c\x36\x72\x9b\x4e\xf3\x34\x9f\x7e\x95\x7c\x59\xe3\xcb\x94\xbe\x6c\xed\x3e\x1c\x8e\x87\xc3\x31\xae\xd3\x4b\x3e\x56\x6a\xd7\xb5\x26\x6a\xc7\x07\xfb\x0b\xdd\x0e\xcb\x1a\x0f\x0b\x5d\x7e\xe9\xea\xf4\x8a\x9d\x3e\x27\x3c\x6f\xe2\xbb\x90\xfa\x33\xae\xfd\xf9\x93\xd9\x0f\xf6\x6f\x06\xbf\xab\xde\x53\xff\x0b\x00\x00\xff\xff\x35\xa4\xa3\x67\xfd\x03\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1021, mode: os.FileMode(420), modTime: time.Unix(1547483298, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
