// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x4b\x73\xdc\x36\x90\xbe\xcf\xaf\xe8\x92\x2e\x49\xd5\x72\x44\xf0\xcd\xa9\x4a\x6d\xcd\xd3\x76\x2c\x2b\xa3\x57\x14\xeb\xb2\x06\x89\xe6\x0c\x2c\x0e\x40\x03\xe0\x3c\xfc\xeb\xb7\x00\x72\x64\xd9\xb2\x9c\xdd\xa4\x92\x3d\xac\x2f\xf2\x34\xd1\x8d\x7e\x7c\xfd\xa1\x81\x53\x98\x61\x45\xdb\xda\x00\xc3\x2d\xd6\xb2\xd9\xa0\x30\x60\x50\x1b\x81\x06\xe8\x8a\x72\xa1\x0d\x28\x2e\x1e\xb0\x38\x0c\x4a\x14\x46\xf1\xaa\x5d\xe1\x05\x9a\x9d\x54\x0f\x23\x50\xad\xd6\x9c\x8a\x35\xaf\xeb\x81\x33\xc6\x05\x82\x59\x23\xb0\xde\xae\xe8\x56\x6a\x30\x6b\x6a\x60\xfa\x68\x01\x36\x94\x0b\x63\xed\x0f\x8e\x4b\x46\x03\x80\x53\x38\x97\x25\xad\x9d\x0b\x5c\xac\xa0\x94\xc2\x28\x5a\x1a\xa0\x8c\x29\xd4\x1a\x35\x08\x44\x06\x46\x42\x81\xa0\xd1\xc0\x8e\x9b\x35\xa0\xd8\xc2\x96\x2a\x4e\x8b\x1a\xf5\x70\x00\x47\x7d\x6b\x12\x80\xb3\x11\x84\x61\xe8\xfe\x8f\x66\x8d\x0a\xdb\x4d\x1f\xc1\x1b\x36\x82\x2c\xcc\xba\x6f\x85\x94\x46\x1b\x45\x9b\x25\xa2\xd2\x9d\xae\x07\x27\x67\xbc\x89\xce\x48\x90\x0e\xfd\xa1\x3f\x24\x67\xa6\x6c\xce\xc2\x2c\xf0\x83\x33\xde\x54\xfa\xec\x72\x73\x73\xb9\x2f\x76\x0f\xed\xfd\xfb\xf7\xb3\xaa\xfd\x7c\x53\xec\xe7\xe3\x2b\xbc\xb9\x98\x9e\xcb\xcf\x87\x43\x1c\x67\xdb\x4b\xb1\xfa\x7d\xbb\x7c\xf7\xf1\xfc\xfd\xc3\xc9\x9f\x18\x0d\x8f\x46\x7f\xaf\x92\xf9\x45\xb2\x79\xf8\x74\x87\x1f\xef\xde\xde\x05\x9f\x96\x2d\x49\xfe\x68\xd8\xab\xf0\xe1\x57\x49\x6e\xc2\xcd\x9a\xae\x97\x93\xf8\x1a\x63\x41\x3a\xa3\xc7\x54\x8d\x8f\x99\xea\x02\xb0\xe1\xa3\x30\xdc\x1c\x16\xb4\x34\x52\x1d\x46\x70\x72\xd2\x7f\xa1\xa2\x5c\x4b\x75\x85\x8d\xd4\xfc\x9b\x4f\x5c\x6c\x25\x2f\xf1\x56\x34\xd4\xa6\xef\xe4\x64\xe0\xaa\xf3\x8e\x72\xf1\x5d\xac\xf4\x45\x84\x9f\xae\x3a\xb0\xfc\x3c\x80\xa7\xe0\xe8\x7c\x39\x85\x8b\x76\x83\x8a\x97\xf0\x66\x06\xb2\x72\x40\x79\x02\x89\xde\xc6\x63\xcd\x62\xd2\x6b\x4d\x8e\x85\x81\x9a\x6b\x63\x35\x85\x64\xf8\x1c\x53\x8d\x92\x5b\xee\x3e\x48\x67\xfb\x89\x03\x47\x47\xff\xb4\xd0\x61\x3c\x0c\x82\x78\x18\xf8\xfe\x30\x0a\xbe\x2d\x36\x09\x66\xe1\x5b\x29\xef\xce\x39\x2f\x2f\x7f\xdf\xdd\xac\x6f\x26\xef\x93\xfd\xdb\x72\x29\xcf\xab\xe4\xea\xf2\xfd\xaf\x8b\x66\x57\x11\x95\xc6\xbb\xf3\x7d\x70\x7f\x15\x36\x53\x46\x4e\xbe\x67\x3e\x4b\x86\x01\xf1\x5f\x32\x7f\x79\xff\x6e\x9c\xbd\x5a\xbe\x56\xdb\xf9\xfd\x24\xdf\xb1\x07\x79\x5b\x8e\xc7\x9b\xe9\xfd\xeb\x26\xc7\xc3\xe1\x3e\xba\x9e\x67\xab\x85\x0a\xd7\x37\x17\x7f\x9c\xf4\x39\x9a\xf7\xc0\x7e\xac\xc4\x9b\x19\x78\xd0\x57\xe3\x25\xe8\x47\xbd\xf2\x39\xb5\xe9\x01\x86\x4d\x2d\x0f\xc8\xe0\x7a\x43\x95\x81\x69\x8f\x28\x0d\x95\x54\x2e\xa1\x2b\xbe\x45\xf1\x55\x2a\x9f\xa3\x0e\x5e\x84\x9d\xbf\xcf\xb1\x98\xcd\xb2\x49\x5a\x04\x98\xfa\xa4\xcc\xab\x94\xe5\xfe\x22\x23\x34\x4f\x49\x12\x27\x41\x39\x9e\xc6\x71\x54\x84\x3f\x00\xa8\xbf\x0f\x13\x0c\x8b\xac\xc8\xab\xaa\x4a\xfc\x31\x41\x3f\x24\x15\xf3\xd3\x24\x25\x41\x9e\x31\x3f\x4e\xa3\xb8\xac\x26\x34\x78\x09\xca\xfe\x7e\x4e\x92\x20\x1a\xcf\xa3\x34\x49\xb0\x0a\xe9\x38\x0a\x7d\x9f\x04\xc1\x2c\x9e\x8f\x69\x4c\x23\x1c\xa7\xd5\x34\xce\xd3\xac\x07\xfd\x5b\xb9\xa5\x5d\xd4\x4f\x20\x5a\xa0\x12\xb4\x5e\x23\x5f\xad\x4d\x0f\xa1\xd3\xd3\xd3\x3e\x9f\x9d\xc6\x62\x7c\xd9\xff\xf6\xe0\xce\xd2\x14\x17\x55\xab\x28\x1c\x64\x0b\x2b\xcb\xaf\x02\x50\x29\xa9\x2c\x38\x6e\xd6\x5c\x83\xc2\x4f\xad\xdd\x85\x6b\x10\xd2\x80\x6e\x9b\x46\x2a\x83\x0c\x0a\x2c\x69\xab\xd1\x6a\x2a\x87\x7d\xbb\x44\xb5\x42\x58\x8e\x74\x0c\xa8\x0d\x35\xb6\x01\x5a\x2b\x1a\xc2\x55\x2b\x3a\xb9\xe7\xf5\xb2\x5f\xa8\x2a\xd7\x7c\x8b\xc3\x93\xff\xe8\x9d\x02\xd8\xd9\xfe\x31\x12\x98\xfc\x4f\xa7\x41\xa1\x76\xec\xdb\x50\xc5\xcd\xa1\xdb\xc8\x59\x79\x70\xf1\xe0\x6a\xd4\xfd\xfc\xd0\x2f\xf0\xbc\x72\x4d\xb9\xf8\xa5\xfb\xec\x79\xd6\xdb\x5f\x42\x3f\xf4\x23\xf0\xbc\x1d\x55\x4d\xff\xc7\x2b\xa8\x52\x1c\x15\xc4\x49\xe6\xfb\xbe\x0f\x9e\x27\xa4\x47\x45\xc9\x51\x18\xaf\xa8\x65\xf9\xa0\x3b\x99\x46\xb5\x45\xaf\xb6\x49\x05\xcf\xdb\xd0\xbd\xd7\xd8\x16\x85\x20\xb6\x4a\x5a\xd0\x46\xaf\xa5\xe9\x85\x4e\xb6\xe1\xe2\xab\x9f\xd6\x67\x5a\x1a\xbe\x45\xf0\x3c\x0b\x4d\x9b\x22\x59\x55\xcf\x33\x01\x9e\xc7\x0a\xaf\x94\x9b\xc6\xae\x97\x02\xb4\x66\x36\x24\x5a\xae\xd1\xd3\xfc\x33\x42\xe4\xe7\x09\x78\xde\x47\x2d\x85\x6a\x4a\x6f\x2d\xb5\xd1\x40\xeb\xfa\x89\x8c\x0b\x83\xaa\xa2\x25\x5a\xf9\x87\xaf\xcb\xfd\x3c\x99\xdf\xab\xfc\xc4\x86\x8f\xcc\x76\x92\xc0\xce\x11\x23\xe1\x0e\x8b\x6b\x2b\x37\x1a\x5c\x4e\x14\x54\x4a\x6e\xa0\x15\x46\xb5\xda\x42\x42\x2a\xbe\xe2\x62\x04\xc3\xe1\xc9\x8b\xf5\xb4\x2d\xfb\xac\x96\x1f\x3c\xaf\x15\x9a\x56\xe8\xe1\xbe\x91\x1a\x3f\x40\x55\xd3\xd5\x37\x00\xfe\xdf\xf1\x74\xf0\x37\x79\xfa\xab\x5e\xfa\x1f\x33\x35\xf1\xa3\x21\x89\xa3\x21\xc9\x86\xf1\xb3\x63\xf9\x48\xa5\x4b\x9d\x70\x8a\xb7\xed\xe2\xfe\xa2\x25\xaf\xf6\x5b\x7d\x98\xdc\x5c\xab\x1b\x9d\x6f\xcd\x24\x29\xcc\xbb\xb1\x78\xbd\x90\xe7\x1f\x8b\x87\xcf\x53\x7a\xf2\x1d\xf3\xf1\x90\x64\xf1\x30\x08\xd3\x17\x37\x98\xbe\x2a\x77\xfc\xe6\xa3\x7c\x7b\xf7\xba\x9a\xd0\x28\x0b\x6e\x97\x86\xe2\xed\xfe\xe2\x7c\xc7\xb2\xcf\x85\x98\x90\xeb\x74\x87\xe3\xfb\xdb\xfd\xfd\x8f\xb9\xda\x91\xc6\x8b\x4c\x1d\xfc\x03\x54\xfd\x03\xa6\x0e\x93\xa4\x88\x08\x49\x02\x1a\x87\x15\x4b\x63\x96\xc7\x2c\x24\x6c\x96\x30\x32\x8d\x58\x16\x16\xb3\x28\x4c\x26\x13\xfc\x21\x53\xa7\xf1\x84\x96\x93\x3c\x18\x87\x3e\xa6\xf3\x8a\xcc\xc2\xac\x0c\x68\x48\x26\xd1\x22\xc8\xc3\x98\x85\xf9\x22\x49\xb3\xf2\x07\x4c\x9d\xa5\x99\x8f\x84\x44\xa1\x1f\x26\x45\x54\xe6\x69\x5e\xcd\x83\x38\x24\x41\x46\xa3\xcc\x4f\x23\x3f\x0f\x2b\x92\x67\x69\xcf\xd4\x57\xb2\xd1\x06\x9f\x71\x35\x93\xab\x86\x9a\x72\xfd\xd7\xa6\x90\xf0\x6f\xa2\xfb\xb8\x3b\xfc\x74\xf3\xdb\xec\x37\x28\x15\x5a\xaa\x56\xbd\xab\x16\xe1\xce\xce\xcf\x2f\x02\xfe\x1f\x1f\x4e\xfe\xef\xc6\x93\x2e\x09\x2f\x81\x3e\xfc\x77\x31\xef\xb3\x30\x27\xf3\x34\x08\x83\x78\x8a\x6c\x1a\x91\x79\x94\xf9\x71\x38\x4f\xd3\x20\xcb\x68\x96\x2f\x82\x79\x48\x08\x89\x7f\x88\xf9\x60\x9a\xf9\x0b\x32\xa3\xd5\x8c\xa6\x74\x3c\xc3\x22\x98\x92\x34\x66\xd1\x24\x0a\xc7\x59\x9c\x45\x69\x38\x27\x24\x25\xe1\xcb\x98\x4f\x8a\xa9\x4f\x92\x7c\x16\xc5\x55\x58\x61\x3a\x66\x55\x34\x89\xc9\x24\x8a\xe2\x99\x1f\x84\x73\x12\x60\x58\xa0\xcf\x92\xa7\x23\xb9\x1d\xc1\xbf\x01\x3d\x6e\x0a\xaa\x4a\xca\x50\x49\xfb\xe5\x2f\x61\x9f\xf8\xff\x0f\x41\x69\x6f\xa6\x47\xfc\x7c\x07\x94\xe4\xdf\x05\x65\x10\xc4\x29\xf5\x27\xe9\x3c\x26\x61\x9c\x05\x65\x98\x4c\x48\x90\x96\xd1\xdc\x67\x24\x0a\x16\xd9\x24\xcf\x82\x34\xa4\x3f\x1e\x99\x93\x00\xe3\x6c\x12\xe6\x39\x65\xa5\x1f\x86\x98\x60\xe4\x47\x79\x9a\xcd\x48\x32\x8b\x23\x12\x84\x55\x34\x25\xfe\xa4\x7c\x19\x94\x93\xa4\x48\x93\xd9\x74\x96\x8c\xa3\x38\x99\xc5\x2c\x5f\x54\x8b\x74\x46\xb2\x45\x9c\x04\xb3\x30\x8b\xa3\x8a\x10\x1a\x4f\xf3\x93\xc1\xe0\x14\x66\xd4\x50\xb8\x36\x52\xd1\x15\x0e\x74\xf7\xb7\xbb\xdd\x2f\xa9\x59\xbb\xcc\xd4\xf6\x0e\x39\x9b\x40\xc5\x6b\x1c\x00\x34\xd4\xac\x47\x70\x66\x36\xcd\xd9\x97\x57\x86\xff\x62\xd4\xd0\xa1\x5b\xc9\x0a\x6b\x77\x2a\x45\xc5\x57\xad\xa2\x6e\x4a\x3a\x6e\x50\x3a\xe9\xf5\x5f\xdf\xa6\x33\xf0\x6c\xb7\x71\x59\xca\x56\x18\x0d\x0f\x78\x80\x3e\x8a\x01\xed\x85\x76\x9f\x07\x3c\x58\x31\xf6\x16\x8f\x9f\xac\xee\x9b\xc7\xb1\x70\x67\x01\xe4\x80\x30\x5e\xbe\x01\x2a\x18\x2c\x83\x25\x5c\x77\x33\x9d\x3d\x48\x50\xd8\x93\x62\x60\xcf\x80\xd7\x52\x1b\x41\x37\x38\x82\xc7\x97\x81\xc1\x29\x2c\xa5\x32\xbd\x19\x6b\xe2\xfb\xaa\x76\xd1\x08\x32\x3f\x0b\xec\xf6\xb6\x4f\x3d\x23\xdd\x60\x0c\xe5\xd3\xac\xe9\x41\x13\x34\x5d\x92\xae\x1b\x2c\x79\x75\x80\xf9\xde\xb8\xf9\x0b\xde\x2c\x9f\x78\xeb\x06\xc6\x92\x0a\x28\x10\x14\xda\x99\x98\x01\x35\xc0\x2b\x28\x70\xcd\x05\x83\x8b\xf1\x8d\x35\x83\xbd\xf6\x9b\xe5\x08\x76\xc3\xfd\xf0\x30\xfc\xdc\x95\xc0\x7a\xdd\x6a\x64\x8f\x8d\x60\xe3\xae\xe9\x01\x95\x2d\x84\x73\xd7\xb5\xb1\x5b\x7d\xc3\x37\x28\x5b\x17\xa6\x00\xd9\xa0\xe8\x1f\x7f\xfa\x89\xd8\x9d\xa5\x6e\xca\x1f\xc0\x51\xdc\xab\x8c\xe0\x24\xf4\xb5\x83\xdd\x65\x8b\x2d\x7e\x13\xae\xdb\x9d\xea\x83\x28\xd7\x4a\x0a\xd9\x6a\x7b\x3c\x97\xa8\x35\x17\xab\xc1\x27\xab\xd0\x25\xa3\x7b\xba\xd2\x5d\xe8\xed\xa6\x40\x65\xe9\xd1\xf6\x3c\x2a\x7d\x56\x4a\xa1\x2d\x6f\xf6\x87\xfd\x8e\xd7\xb5\xcd\x0b\xad\xed\x88\x6f\xba\xcc\x68\x43\x95\x69\x9b\x01\x58\xfd\xbb\x4e\xd1\x32\xa8\xef\xec\x2f\x14\xa2\x86\xb6\x81\xe9\xf2\x16\xca\x43\x59\xa3\xee\x82\xed\xb6\xb0\xf7\xb9\x1d\xe5\xee\xcd\xcb\x7a\x8c\x5b\xb4\x48\x82\xfe\xf3\x1d\xe5\x2e\xde\x77\xd7\x1d\xff\x38\x1a\xef\x7d\x54\x68\x14\x47\x77\x2f\x91\xbb\x3e\xdd\x14\x0c\xd5\x96\xc6\xed\x9f\xab\x6e\x81\x63\xf3\xc1\x13\xd2\xd3\xae\xfe\xbc\xfc\x3a\x63\x83\x23\xe5\xf5\x20\xc1\x1a\x2d\x9b\xed\xd6\xbc\x5c\x3f\xd2\x21\xf4\x58\xb7\x65\xb1\xf7\xd2\xfe\x24\x91\x36\x83\xfd\xf8\xc3\x80\x77\x17\x90\xb2\xd5\x46\x6e\xfa\x4d\x8e\x8d\xd8\x3f\x0f\xf6\x2d\x76\xe1\x30\x7f\x62\x89\xf7\xe4\xf1\x11\xd0\xf5\x78\x6f\xf8\x71\xdf\xb2\xb6\x57\xc6\x0e\x9c\x3f\xed\xd0\xdd\x98\xb9\x42\xd8\x69\x90\x0a\x78\x53\xf6\x2f\x83\xb4\xa8\xd1\xfe\xb7\x74\x83\x57\x97\x4d\x3b\x60\x59\xc5\xdb\xab\xf3\x11\xac\x8d\x69\x46\x67\x67\xee\x8a\x66\xef\x75\xa3\x3c\x8e\x62\xb7\xf7\x86\xee\xf9\xc6\x86\xd8\xe7\x73\x45\x6d\x4c\xbc\x74\xf6\x1a\x7a\x38\x26\x58\x51\xa1\xfb\x8b\x23\x17\xb0\x43\xee\xb4\x03\x1f\x5e\xed\x90\x83\x90\xbb\x01\x58\x5b\xaf\xa8\x5e\x5a\xed\x11\x04\xfe\xe3\x3f\xb7\xf4\x15\xd5\x50\xf3\x0d\xef\xcf\x0a\xc6\xab\x0a\x95\x8d\xee\xb1\x42\xb2\xc1\x63\xd7\x82\xf5\xe3\xdc\xad\x3e\x3e\x6a\x4e\xdd\x20\xe9\x20\xd6\xdb\xb4\xd2\x31\x63\x6f\xf1\x30\x82\xf0\xa9\xf0\x0a\xb7\xf2\x01\x9d\x3c\x8e\x8f\xe2\xee\xa4\x98\xca\xcd\x86\x5b\xea\xf8\x46\xbe\x54\x78\xfc\x44\xbe\x98\x12\x95\x79\xc7\x85\x19\x41\xfe\x25\x8e\x63\xef\x1a\xe9\x20\xdc\xe5\x47\x7c\xa9\xd9\xd3\x4c\xf5\xd5\x61\xac\x7b\xc3\xa5\xe0\x2e\xff\x8e\x16\xbb\x22\x81\x51\x7c\xb5\x42\x85\xac\xeb\x74\x83\x7b\x73\x44\x7f\xd7\xed\x89\x6f\xdb\xfd\xa5\x8d\x15\x52\x06\x52\xd4\x87\x27\xc9\x7b\x7c\xc8\x3e\xba\xf4\xc5\xf4\x15\x52\xf6\xb5\x79\x12\xf7\xd6\x2f\x2c\xc6\x9e\xfa\xde\x48\x59\xdb\x8a\x3e\x76\x9c\x91\xa0\x51\xb0\x6f\xc0\x20\xb7\x8e\xe1\x36\x74\xff\xd8\x78\x41\x9f\xa9\xef\x9b\x74\x4f\x08\x5b\x5a\x3b\xbb\x87\x8e\x15\xa8\x75\xb0\x6c\x95\xc3\xc3\x53\x8d\x35\xd5\x50\x20\x0a\x60\x68\xb0\x34\x2e\x4d\x47\x03\x76\x3f\x7b\xde\x07\x7d\x04\x33\xae\x5d\x1f\x38\x8b\x5a\x6e\x9e\xf5\x91\x06\x26\x9f\xbe\x34\x81\xd9\x3b\x8f\x68\x63\xc1\x6c\xf6\x4b\x29\xeb\x71\x69\xd9\x72\x2e\xac\x25\x36\x02\xa3\x5a\xb4\x2c\x42\xc5\x01\x18\x16\xed\x6a\xd5\x33\xb5\x6d\x6e\xc7\x8b\x2b\x09\x76\x93\x81\xfb\xda\x91\x48\xd3\x28\x59\x75\x20\x3f\xaa\xd8\x33\xc0\x4a\x47\x50\xd1\x5a\xe3\x60\xd0\xa1\xae\x7f\xb3\x6f\x14\x96\x3d\xf8\xdc\x86\xff\x1d\x00\x00\xff\xff\x80\xa7\x55\x8c\xa8\x18\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6312, mode: os.FileMode(420), modTime: time.Unix(1554470655, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1552945185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

