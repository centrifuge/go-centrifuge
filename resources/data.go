// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x59\x73\x1b\x37\x12\x7e\xe7\xaf\xe8\xa2\x5e\x92\xaa\x1d\x6a\xee\x83\x55\xa9\x2d\x9e\xb6\x63\x59\xa1\xae\x28\xd6\xcb\x1a\x83\xe9\x21\x61\x0e\x81\x31\x80\xe1\xe1\x5f\xbf\x05\xcc\x90\x96\x2d\x4b\xd9\x4d\x2a\xd9\x87\xd5\x0b\x49\x00\xdd\xe8\xe3\xeb\x0f\x0d\xe8\x0c\xa6\x58\x92\xa6\xd2\x50\xe0\x16\x2b\x51\x6f\x90\x6b\xd0\xa8\x34\x47\x0d\x64\x49\x18\x57\x1a\x24\xe3\x6b\xcc\x0f\x3d\x8a\x5c\x4b\x56\x36\x4b\xbc\x44\xbd\x13\x72\x3d\x04\xd9\x28\xc5\x08\x5f\xb1\xaa\xea\x59\x65\x8c\x23\xe8\x15\x42\xd1\xe9\xe5\xed\x4a\x05\x7a\x45\x34\x4c\x4e\x1a\x60\x43\x18\xd7\x46\x7f\xef\xb8\x64\xd8\x03\x38\x83\x0b\x41\x49\x65\x4d\x60\x7c\x09\x54\x70\x2d\x09\xd5\x40\x8a\x42\xa2\x52\xa8\x80\x23\x16\xa0\x05\xe4\x08\x0a\x35\xec\x98\x5e\x01\xf2\x2d\x6c\x89\x64\x24\xaf\x50\x0d\x7a\x70\x94\x37\x2a\x01\x58\x31\x84\x20\x08\xec\x77\xd4\x2b\x94\xd8\x6c\x3a\x0f\xde\x14\x43\x48\x83\xb4\x9d\xcb\x85\xd0\x4a\x4b\x52\x2f\x10\xa5\x6a\x65\x1d\xe8\x9f\xb3\x3a\x3c\xf7\xfc\x64\xe0\x0e\xdc\x81\x77\xae\x69\x7d\x1e\xa4\xbe\xeb\x9f\xb3\xba\x54\xe7\x57\x9b\xdb\xab\x7d\xbe\x5b\x37\x0f\xef\xdf\x4f\xcb\xe6\xf3\x6d\xbe\x9f\x8d\xae\xf1\xf6\x72\x72\x21\x3e\x1f\x0e\x51\x94\x6e\xaf\xf8\xf2\xd7\xed\xe2\xdd\xc7\x8b\xf7\xeb\xfe\xef\x28\x0d\x8e\x4a\x7f\x2d\xe3\xd9\x65\xbc\x59\x7f\xba\xc7\x8f\xf7\x6f\xef\xfd\x4f\x8b\xc6\x8b\x7f\xab\x8b\x57\xc1\xfa\x67\xe1\xdd\x06\x9b\x15\x59\x2d\xc6\xd1\x0d\x46\xdc\x6b\x95\x1e\x43\x35\x3a\x46\xaa\x75\xc0\xb8\x8f\x5c\x33\x7d\x98\x13\xaa\x85\x3c\x0c\xa1\xdf\xef\x66\x08\xa7\x2b\x21\xaf\xb1\x16\x8a\x7d\x33\xc5\xf8\x56\x30\x8a\x77\xbc\x26\x26\x7c\xfd\x7e\xcf\x66\xe7\x1d\x61\xfc\xbb\x58\xe9\x92\x08\x3f\x5c\xb7\x60\xf9\xb1\x07\x8f\xc1\xd1\xda\x72\x06\x97\xcd\x06\x25\xa3\xf0\x66\x0a\xa2\xb4\x40\x79\x04\x89\x4e\xc7\x29\x67\x91\xd7\x49\x8d\x8f\x89\x81\x8a\x29\x6d\x24\xb9\x28\xf0\x29\xa6\x6a\x29\xb6\xcc\x4e\x08\xab\xfb\x91\x01\x47\x43\x7f\x37\xd1\x41\x34\xf0\xfd\x68\xe0\xbb\xee\x20\xf4\xbf\x4d\xb6\xe7\x4f\x83\xb7\x42\xdc\x5f\x30\x46\xaf\x7e\xdd\xdd\xae\x6e\xc7\xef\xe3\xfd\x5b\xba\x10\x17\x65\x7c\x7d\xf5\xfe\xe7\x79\xbd\x2b\x3d\x99\x44\xbb\x8b\xbd\xff\x70\x1d\xd4\x93\xc2\xeb\x7f\x4f\x7d\x1a\x0f\x7c\xcf\x7d\x4e\xfd\xd5\xc3\xbb\x51\xfa\x6a\xf1\x5a\x6e\x67\x0f\xe3\x6c\x57\xac\xc5\x1d\x1d\x8d\x36\x93\x87\xd7\x75\x86\x87\xc3\x43\x78\x33\x4b\x97\x73\x19\xac\x6e\x2f\x7f\xeb\x77\x31\x9a\x75\xc0\x3e\x65\xe2\xcd\x14\x1c\xe8\xb2\xf1\x1c\xf4\xc3\x4e\xf8\x82\x98\xf0\x40\x81\x75\x25\x0e\x58\xc0\xcd\x86\x48\x0d\x93\x0e\x51\x0a\x4a\x21\x6d\x40\x97\x6c\x8b\xfc\xab\x50\x3e\x45\x1d\x3c\x0b\x3b\x77\x9f\x61\x3e\x9d\xa6\xe3\x24\xf7\x31\x71\x3d\x9a\x95\x49\x91\xb9\xf3\xd4\x23\x59\xe2\xc5\x51\xec\xd3\xd1\x24\x8a\xc2\x3c\x78\x01\xa0\xee\x3e\x88\x31\xc8\xd3\x3c\x2b\xcb\x32\x76\x47\x1e\xba\x81\x57\x16\x6e\x12\x27\x9e\x9f\xa5\x85\x1b\x25\x61\x44\xcb\x31\xf1\x9f\x83\xb2\xbb\x9f\x79\xb1\x1f\x8e\x66\x61\x12\xc7\x58\x06\x64\x14\x06\xae\xeb\xf9\xfe\x34\x9a\x8d\x48\x44\x42\x1c\x25\xe5\x24\xca\x92\xb4\x03\xfd\x5b\xb1\x25\xad\xd7\x8f\x20\x9a\xa3\xe4\xa4\x5a\x21\x5b\xae\x74\x07\xa1\xb3\xb3\xb3\x2e\x9e\xad\xc4\x7c\x74\xd5\xfd\x76\xe0\xde\xd0\x14\xe3\x65\x23\x09\x1c\x44\x03\x4b\xc3\xaf\x1c\x50\x4a\x21\x0d\x38\x6e\x57\x4c\x81\xc4\x4f\x8d\xd9\x85\x29\xe0\x42\x83\x6a\xea\x5a\x48\x8d\x05\xe4\x48\x49\xa3\xd0\x48\x4a\x8b\x7d\xb3\x44\x36\x9c\x1b\x8e\xb4\x0c\xa8\x34\xd1\xa6\x00\x1a\x33\x34\x80\xeb\x86\xb7\xe3\x8e\xd3\x8d\xfd\x44\x24\x5d\xb1\x2d\x0e\xfa\xff\xe8\x8c\x02\xd8\x99\xfa\xd1\x02\x0a\xf1\x4f\x2b\x41\xa0\xb2\xec\x5b\x13\xc9\xf4\xa1\xdd\xc8\x6a\x59\x5b\x7f\x70\x39\x6c\x7f\x7e\xe8\x16\x38\x0e\x5d\x11\xc6\x7f\x6a\xa7\x1d\xc7\x58\xfb\x53\xe0\x06\x6e\x08\x8e\xb3\x23\xb2\xee\x3e\x9c\x9c\x48\xc9\x50\x42\x14\xa7\xae\xeb\xba\xe0\x38\x5c\x38\x84\x53\x86\x5c\x3b\x79\x25\xe8\x5a\xb5\x63\x0a\xe5\x16\x9d\xca\x04\x15\x1c\x67\x43\xf6\x4e\x6d\x4a\x14\xfc\xc8\x08\x29\x4e\x6a\xb5\x12\xba\x1b\xb4\x63\x1b\xc6\xbf\xfa\x69\x6c\x26\x54\xb3\x2d\x82\xe3\x18\x68\x9a\x10\x89\xb2\x7c\x1a\x09\x70\x9c\x22\x77\xa8\xd8\xd4\x66\xbd\xe0\xa0\x54\x61\x5c\x22\x74\x85\x8e\x62\x9f\x11\x42\x37\x8b\xc1\x71\x3e\x2a\xc1\x65\x4d\x9d\x95\x50\x5a\x01\xa9\xaa\x47\x63\x8c\x6b\x94\x25\xa1\x68\xc6\x3f\x7c\x9d\xee\xa7\xc1\xfc\x5e\xe6\xc7\xc6\x7d\x2c\x4c\x25\x71\x6c\x0d\xd1\x02\xee\x31\xbf\x31\xe3\x5a\x81\x8d\x89\x84\x52\x8a\x0d\x34\x5c\xcb\x46\x19\x48\x08\xc9\x96\x8c\x0f\x61\x30\xe8\x3f\x9b\x4f\x53\xb2\x4f\x72\xf9\xc1\x71\x1a\xae\x48\x89\x0e\xee\x6b\xa1\xf0\x03\x94\x15\x59\x7e\x03\xe0\xff\x8e\xa7\xfd\x3f\xc9\xd3\x5f\xd5\xd2\x7f\xcc\xd4\x9e\x1b\x0e\xbc\x28\x1c\x78\xe9\x20\x7a\x72\x2c\x1f\xa9\x74\xa1\x62\x46\xf0\xae\x99\x3f\x5c\x36\xde\xab\xfd\x56\x1d\xc6\xb7\x37\xf2\x56\x65\x5b\x3d\x8e\x73\xfd\x6e\xc4\x5f\xcf\xc5\xc5\xc7\x7c\xfd\x79\x42\xfa\xdf\x51\x1f\x0d\xbc\x34\x1a\xf8\x41\xf2\xec\x06\x93\x57\x74\xc7\x6e\x3f\x8a\xb7\xf7\xaf\xcb\x31\x09\x53\xff\x6e\xa1\x09\xde\xed\x2f\x2f\x76\x45\xfa\x39\xe7\x63\xef\x26\xd9\xe1\xe8\xe1\x6e\xff\xf0\x32\x57\x5b\xd2\x78\x96\xa9\xfd\xbf\x80\xaa\x5f\x60\xea\x20\x8e\xf3\xd0\xf3\x62\x9f\x44\x41\x59\x24\x51\x91\x45\x45\xe0\x15\xd3\xb8\xf0\x26\x61\x91\x06\xf9\x34\x0c\xe2\xf1\x18\x5f\x64\xea\x24\x1a\x13\x3a\xce\xfc\x51\xe0\x62\x32\x2b\xbd\x69\x90\x52\x9f\x04\xde\x38\x9c\xfb\x59\x10\x15\x41\x36\x8f\x93\x94\xbe\xc0\xd4\x69\x92\xba\xe8\x79\x61\xe0\x06\x71\x1e\xd2\x2c\xc9\xca\x99\x1f\x05\x9e\x9f\x92\x30\x75\x93\xd0\xcd\x82\xd2\xcb\xd2\xa4\x63\xea\x6b\x51\x2b\x8d\x4f\xb8\xba\x10\xcb\x9a\x68\xba\xfa\x63\x5d\x48\xf0\x27\xd1\x7d\xdc\x1d\x7e\xb8\xfd\x65\xfa\x0b\x50\x89\x86\xaa\x65\x67\xaa\x41\xb8\xd5\xf3\xe3\xb3\x80\xff\xcb\x9b\x93\xff\x5d\x7b\xd2\x06\xe1\x39\xd0\x07\x7f\x2f\xe6\xe7\x69\xec\x25\x49\xee\x27\xd1\x2c\x9c\xd3\xdc\x1f\xe5\xd1\x28\x98\xd3\x79\x34\x0b\x63\x42\xf2\xc8\x2b\x93\x60\x9a\x90\xf8\x45\xcc\x97\x71\xe0\x16\x69\x3e\x8b\xe2\x38\x9c\x24\xf3\xb1\xe7\x07\xe1\x64\x56\x86\x69\x1e\x8f\x12\x3f\xa3\x33\x0c\xc6\x89\x37\x4d\x9f\xc7\x7c\x86\x88\xe9\x3c\x9f\x05\x33\x3f\xa3\x59\x4c\x27\x59\x18\xce\x5d\xc4\x89\x17\x65\x61\x89\x5e\x1e\x07\x41\x31\x32\xa5\xf7\xa5\x25\x37\x2d\xf8\x37\xa0\xc7\x4d\x4e\x24\x25\x05\x4a\x61\x66\xfe\x10\xf6\x3d\xf7\xff\x10\x94\xe6\x66\x7a\xc4\xcf\x77\x40\xe9\xfd\xbd\xa0\xf4\xfd\x28\x21\xee\x38\x99\x45\x5e\x10\xa5\x3e\x0d\xe2\xb1\xe7\x27\x34\x9c\xb9\x85\x17\xfa\xf3\x74\x9c\xa5\x7e\x12\x90\x97\x5b\xe6\xd8\xc7\x28\x1d\x07\x59\x46\x0a\xea\x06\x01\xc6\x18\xba\x61\x96\xa4\x53\x2f\x9e\x46\xa1\xe7\x07\x65\x38\xf1\xdc\x31\x7d\x1e\x94\xe3\x38\x4f\xe2\xe9\x64\x1a\x8f\xc2\x28\x9e\x46\x45\x36\x2f\xe7\xc9\xd4\x4b\xe7\x51\xec\x4f\x83\x34\x0a\x4b\xcf\x23\xd1\x24\xeb\xf7\x7a\x67\x30\x25\x9a\xc0\x8d\x16\x92\x2c\xb1\xa7\xda\xcf\xf6\x76\xbf\x20\x7a\x65\x23\x53\x99\x3b\xe4\x74\x0c\x25\xab\xb0\x07\x50\x13\xbd\x1a\xc2\xb9\xde\xd4\xe7\x5f\x5e\x19\xfe\x55\x10\x4d\x06\x76\x65\x91\x1b\xbd\x13\xc1\x4b\xb6\x6c\x24\xb1\x5d\xd2\x71\x03\x6a\x47\x6f\xfe\xf8\x36\xad\x82\x27\xbb\x8d\x28\x15\x0d\xd7\x0a\xd6\x78\x80\xce\x8b\x1e\xe9\x06\xcd\x3e\x6b\x3c\x98\x61\xec\x34\x1e\xa7\x8c\xec\x9b\x53\x5b\xb8\x33\x00\xb2\x40\x18\x2d\xde\x00\xe1\x05\x2c\xfc\x05\xdc\xb4\x3d\x9d\x39\x48\x90\x9b\x93\xa2\x67\xce\x80\xd7\x42\x69\x4e\x36\x38\x84\xd3\xcb\x40\xef\x0c\x16\x42\xea\x4e\x8d\x51\xf1\x7d\x51\xb3\x68\x08\xa9\x9b\xfa\x66\x7b\x53\xa7\x8e\x16\xb6\x31\x06\xfa\x38\x6a\xaa\x57\xfb\x75\x1b\xa4\x9b\x1a\x29\x2b\x0f\x30\xdb\x6b\xdb\x7f\xc1\x9b\xc5\x23\x6b\x6d\xc3\x48\x09\x87\x1c\x41\xa2\xe9\x89\x0b\x20\x1a\x58\x09\x39\xae\x18\x2f\xe0\x72\x74\x6b\xd4\x60\x27\xfd\x66\x31\x84\xdd\x60\x3f\x38\x0c\x3e\xb7\x29\x30\x56\x37\x0a\x8b\x53\x21\x18\xbf\x2b\x72\x40\x69\x12\x61\xcd\xb5\x65\x6c\x57\xdf\xb2\x0d\x8a\xc6\xba\xc9\x41\xd4\xc8\xbb\xc7\x9f\xae\x23\xb6\x67\xa9\xed\xf2\x7b\x70\x1c\xee\x44\x86\xd0\x0f\x5c\x65\x61\x77\xd5\x60\x83\xdf\xb8\x6b\x77\x27\xea\xc0\xe9\x4a\x0a\x2e\x1a\x65\x8e\x67\x8a\x4a\x31\xbe\xec\x7d\x32\x02\x6d\x30\xda\xa7\x2b\xd5\xba\xde\x6c\x72\x94\x86\x1e\x4d\xcd\xa3\x54\xe7\x54\x70\x65\x78\xb3\x3b\xec\x77\xac\xaa\x4c\x5c\x48\x65\x5a\x7c\xdd\x46\x46\x69\x22\x75\x53\xf7\xc0\xc8\xdf\xb7\x82\x43\x68\xdd\x9b\x4b\x44\x05\x4d\x0d\x93\xc5\x1d\xd0\x03\xad\x50\xb5\xae\xb6\x1b\x98\xdb\xdc\x8e\x30\xfb\xe2\x65\xec\xc5\x2d\x1a\x1c\x41\x37\x7d\x4f\x98\xf5\xf6\xdd\x4d\xcb\x3e\x96\xc4\x3b\x0b\x25\x6a\xc9\xd0\xde\x4a\xc4\xae\x0b\x36\x01\x4d\x94\x21\x71\xf3\x71\xdd\x2e\xb0\x5c\xde\x7b\x44\x79\xca\x66\x9f\xd1\xaf\xe3\xd5\x3b\x12\x5e\x07\x11\xac\xd0\x70\xd9\x6e\xc5\xe8\xea\x44\x86\xd0\x21\xdd\x24\xc5\xdc\x4a\xbb\x73\x44\x98\xf8\x75\xcd\x4f\x01\xac\xbd\x7e\xd0\x46\x69\xb1\xe9\x36\x39\x96\x61\xf7\x38\xd8\x15\xd8\xa5\x45\x7c\xdf\xd0\x6e\xff\xf4\x04\x68\x2b\xbc\x53\x7c\xda\x97\x56\xe6\xc2\xd8\x42\xf3\x87\x1d\xda\xfb\x32\x93\x08\x3b\x05\x42\x02\xab\x69\xf7\x2e\x48\xf2\x0a\xcd\x57\x6a\xdb\xae\x36\x9a\xa6\xbd\x32\x82\x77\xd7\x17\x43\x58\x69\x5d\x0f\xcf\xcf\xed\x05\xcd\xdc\xea\x86\x59\x14\x46\x76\xef\x0d\xd9\xb3\x8d\x71\xb1\x8b\xe7\x92\x18\x9f\x18\xb5\xfa\x6a\x72\x38\x06\x58\x12\xae\xba\x6b\x23\xe3\xb0\x43\x66\xa5\x7d\x17\x5e\xed\x90\x01\x17\xbb\x1e\x18\x5d\xaf\x88\x5a\x18\xe9\x21\xf8\xee\xe9\xcf\x2e\x7d\x45\x14\x54\x6c\xc3\xba\x93\xa2\x60\x65\x89\xd2\x78\x77\xca\x90\xa8\xf1\x58\xb3\x60\xec\xb8\xb0\xab\x8f\x4f\x9a\x13\xdb\x46\x9a\xb4\x1e\x75\x9a\xd1\x51\x51\xbc\xc5\xc3\x10\x82\xc7\x83\xd7\xb8\x15\x6b\xb4\xe3\x51\x74\x1c\x6e\xcf\x89\x89\xd8\x6c\x98\x21\x8e\x6f\xc6\x17\x12\x8f\x53\xde\x17\x55\xbc\xd4\xef\x18\xd7\x43\xc8\xbe\xf8\x71\xac\x5c\x2d\x2c\x84\xdb\xf8\xf0\x2f\x39\x7b\x1c\xa9\x2e\x3b\x45\xd1\xbe\xe0\x12\xb0\x57\x7f\x4b\x8a\x6d\x92\x40\x4b\xb6\x5c\xa2\xc4\xa2\xad\x73\x8d\x7b\x7d\x44\x7f\x5b\xeb\xb1\x6b\x8a\xfd\xb9\x8d\x25\x92\x02\x04\xaf\x0e\x8f\x82\x77\x7a\xc6\x3e\x9a\xf4\x45\xf5\x35\x92\xe2\x6b\xf5\x5e\xd4\x69\xbf\x34\x18\x7b\x6c\x7b\x2d\x44\x65\x32\x7a\xaa\x38\x2d\x40\x21\x2f\xbe\x01\x83\xd8\x5a\x7e\xdb\x90\xfd\xa9\xf0\xfc\x2e\x52\xdf\x57\x69\x1f\x10\xb6\xa4\xb2\x7a\x0f\x2d\x2b\x10\x63\x20\x6d\xa4\xc5\xc3\x63\x89\x15\x51\x90\x23\x72\x28\x50\x23\xd5\x36\x4c\x47\x05\x66\x3f\x73\xda\xfb\x9d\x07\x53\xa6\x6c\x1d\x58\x8d\x4a\x6c\x9e\xd4\x91\x82\x42\x3c\x7e\x67\x02\xbd\xb7\x16\x91\xda\x80\x59\xef\x17\x42\x54\x23\x6a\xb8\x72\xc6\x8d\xa6\x62\x08\x5a\x36\x68\x58\x84\xf0\x03\x14\x98\x37\xcb\x65\xc7\xd3\xa6\xb8\x2d\x2b\x2e\x05\x98\x4d\x7a\x76\xb6\x25\x91\xba\x96\xa2\x6c\x41\x7e\x14\x31\x27\x80\x19\x1d\x42\x49\x2a\x85\x6d\x23\xbb\x5b\x59\x03\x4d\x60\x37\x44\xad\xdb\x17\x12\x65\xe2\xd2\x48\xde\x32\x4a\xed\xd7\x20\x51\xd5\x82\x2b\x6c\xeb\x46\x21\x6d\x24\xd3\x07\x1b\x73\xb5\x9e\x59\x99\x93\xda\x16\xcc\xdd\x3f\x02\x6a\x89\xb4\xc3\xb4\xf5\xe3\xdf\x01\x00\x00\xff\xff\x7c\xe1\x1b\x91\xfd\x18\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6397, mode: os.FileMode(420), modTime: time.Unix(1554396757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1552945185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

