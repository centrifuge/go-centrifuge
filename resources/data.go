// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x73\xdb\x36\x16\x7e\xd7\xaf\x38\x23\xbf\xb4\x33\x4b\x99\xf7\x8b\x66\x3a\x3b\xba\x26\x6e\x1c\x57\xb6\xe5\xba\xf1\xcb\x06\x04\x0f\x25\xc4\x14\xc0\x00\xa0\x2e\xf9\xf5\x3b\x00\x29\xc7\xb1\x63\x77\xb7\x9d\x76\x5f\xd6\x2f\xb6\x41\x9c\xfb\x77\x3e\x1c\xe0\x04\xa6\x58\x92\xa6\xd2\x50\xe0\x16\x2b\x51\x6f\x90\x6b\xd0\xa8\x34\x47\x0d\x64\x45\x18\x57\x1a\x24\xe3\xf7\x98\x1f\x7a\x14\xb9\x96\xac\x6c\x56\x78\x81\x7a\x27\xe4\xfd\x10\x64\xa3\x14\x23\x7c\xcd\xaa\xaa\x67\x95\x31\x8e\xa0\xd7\x08\x45\xa7\x97\xb7\x3b\x15\xe8\x35\xd1\x30\x79\xd0\x00\x1b\xc2\xb8\x36\xfa\x7b\xc7\x2d\xc3\x1e\xc0\x09\x9c\x0b\x4a\x2a\xeb\x02\xe3\x2b\xa0\x82\x6b\x49\xa8\x06\x52\x14\x12\x95\x42\x05\x1c\xb1\x00\x2d\x20\x47\x50\xa8\x61\xc7\xf4\x1a\x90\x6f\x61\x4b\x24\x23\x79\x85\x6a\xd0\x83\xa3\xbc\x51\x09\xc0\x8a\x21\x04\x41\x60\xff\x46\xbd\x46\x89\xcd\xa6\x8b\xe0\xac\x18\x42\x1a\xa4\xed\xb7\x5c\x08\xad\xb4\x24\xf5\x02\x51\xaa\x56\xd6\x81\xfe\x29\xab\xc3\x53\xcf\x4f\x06\xee\xc0\x1d\x78\xa7\x9a\xd6\xa7\x41\xea\xbb\xfe\x29\xab\x4b\x75\x7a\xb9\x59\x5e\xee\xf3\xdd\x7d\x73\xf7\xe1\xc3\xb4\x6c\xbe\x2c\xf3\xfd\x6c\x74\x85\xcb\x8b\xc9\xb9\xf8\x72\x38\x44\x51\xba\xbd\xe4\xab\x5f\xb7\x8b\xf7\x9f\xce\x3f\xdc\xf7\x7f\x47\x69\x70\x54\xfa\x6b\x19\xcf\x2e\xe2\xcd\xfd\xe7\x5b\xfc\x74\xfb\xee\xd6\xff\xbc\x68\xbc\xf8\xb7\xba\x78\x13\xdc\xff\x2c\xbc\x65\xb0\x59\x93\xf5\x62\x1c\x5d\x63\xc4\xbd\x56\xe9\x31\x55\xa3\x63\xa6\xda\x00\x4c\xf8\xc8\x35\xd3\x87\x39\xa1\x5a\xc8\xc3\x10\xfa\xfd\xee\x0b\xe1\x74\x2d\xe4\x15\xd6\x42\xb1\x27\x9f\x18\xdf\x0a\x46\xf1\x86\xd7\xc4\xa4\xaf\xdf\xef\xd9\xea\xbc\x27\x8c\x7f\x17\x2b\x5d\x11\xe1\x87\xab\x16\x2c\x3f\xf6\xe0\x31\x38\x5a\x5f\x4e\xe0\xa2\xd9\xa0\x64\x14\xce\xa6\x20\x4a\x0b\x94\x47\x90\xe8\x74\x3c\xd4\x2c\xf2\x3a\xa9\xf1\xb1\x30\x50\x31\xa5\x8d\x24\x17\x05\x3e\xc7\x54\x2d\xc5\x96\xd9\x0f\xc2\xea\x7e\xe4\xc0\xd1\xd1\xdf\x2d\x74\x10\x0d\x7c\x3f\x1a\xf8\xae\x3b\x08\xfd\xa7\xc5\xf6\xfc\x69\xf0\x4e\x88\xdb\x73\xc6\xe8\xe5\xaf\xbb\xe5\x7a\x39\xfe\x10\xef\xdf\xd1\x85\x38\x2f\xe3\xab\xcb\x0f\x3f\xcf\xeb\x5d\xe9\xc9\x24\xda\x9d\xef\xfd\xbb\xab\xa0\x9e\x14\x5e\xff\x7b\xea\xd3\x78\xe0\x7b\xee\x4b\xea\x2f\xef\xde\x8f\xd2\x37\x8b\xb7\x72\x3b\xbb\x1b\x67\xbb\xe2\x5e\xdc\xd0\xd1\x68\x33\xb9\x7b\x5b\x67\x78\x38\xdc\x85\xd7\xb3\x74\x35\x97\xc1\x7a\x79\xf1\x5b\xbf\xcb\xd1\xac\x03\xf6\x43\x25\xce\xa6\xe0\x40\x57\x8d\x97\xa0\x1f\x76\xc2\xe7\xc4\xa4\x07\x0a\xac\x2b\x71\xc0\x02\xae\x37\x44\x6a\x98\x74\x88\x52\x50\x0a\x69\x13\xba\x62\x5b\xe4\xdf\xa4\xf2\x39\xea\xe0\x45\xd8\xb9\xfb\x0c\xf3\xe9\x34\x1d\x27\xb9\x8f\x89\xeb\xd1\xac\x4c\x8a\xcc\x9d\xa7\x1e\xc9\x12\x2f\x8e\x62\x9f\x8e\x26\x51\x14\xe6\xc1\x2b\x00\x75\xf7\x41\x8c\x41\x9e\xe6\x59\x59\x96\xb1\x3b\xf2\xd0\x0d\xbc\xb2\x70\x93\x38\xf1\xfc\x2c\x2d\xdc\x28\x09\x23\x5a\x8e\x89\xff\x12\x94\xdd\xfd\xcc\x8b\xfd\x70\x34\x0b\x93\x38\xc6\x32\x20\xa3\x30\x70\x5d\xcf\xf7\xa7\xd1\x6c\x44\x22\x12\xe2\x28\x29\x27\x51\x96\xa4\x1d\xe8\xdf\x89\x2d\x69\xa3\x7e\x04\xd1\x1c\x25\x27\xd5\x1a\xd9\x6a\xad\x3b\x08\x9d\x9c\x9c\x74\xf9\x6c\x25\xe6\xa3\xcb\xee\x7f\x07\x6e\x0d\x4d\x31\x5e\x36\x92\xc0\x41\x34\xb0\x32\xfc\xca\x01\xa5\x14\xd2\x80\x63\xb9\x66\x0a\x24\x7e\x6e\x8c\x15\xa6\x80\x0b\x0d\xaa\xa9\x6b\x21\x35\x16\x90\x23\x25\x8d\x42\x23\x29\x2d\xf6\xcd\x16\xd9\x70\x6e\x38\xd2\x32\xa0\xd2\x44\x9b\x06\x68\xcc\xd2\x00\xae\x1a\xde\xae\x3b\x4e\xb7\xf6\x13\x91\x74\xcd\xb6\x38\xe8\xff\xa3\x73\x0a\x60\x67\xfa\x47\x0b\x28\xc4\x3f\xad\x04\x81\xca\xb2\x6f\x4d\x24\xd3\x87\xd6\x90\xd5\x72\x6f\xe3\xc1\xd5\xb0\xfd\xf7\x63\xb7\xc1\x71\xe8\x9a\x30\xfe\x53\xfb\xd9\x71\x8c\xb7\x3f\x05\x6e\xe0\x86\xe0\x38\x3b\x22\xeb\xee\x97\x93\x13\x29\x19\x4a\x88\xe2\xd4\x75\x5d\x17\x1c\x87\x0b\x87\x70\xca\x90\x6b\x27\xaf\x04\xbd\x57\xed\x9a\x42\xb9\x45\xa7\x32\x49\x05\xc7\xd9\x90\xbd\x53\x9b\x16\x05\x3f\x32\x42\x8a\x93\x5a\xad\x85\xee\x16\xed\xda\x86\xf1\x6f\xfe\x35\x3e\x13\xaa\xd9\x16\xc1\x71\x0c\x34\x4d\x8a\x44\x59\x3e\xcf\x04\x38\x4e\x91\x3b\x54\x6c\x6a\xb3\x5f\x70\x50\xaa\x30\x21\x11\xba\x46\x47\xb1\x2f\x08\xa1\x9b\xc5\xe0\x38\x9f\x94\xe0\xb2\xa6\xce\x5a\x28\xad\x80\x54\xd5\xa3\x35\xc6\x35\xca\x92\x50\x34\xeb\x1f\xbf\x2d\xf7\xf3\x64\x7e\xaf\xf2\x63\x13\x3e\x16\xa6\x93\x38\xb6\x8e\x68\x01\xb7\x98\x5f\x9b\x75\xad\xc0\xe6\x44\x42\x29\xc5\x06\x1a\xae\x65\xa3\x0c\x24\x84\x64\x2b\xc6\x87\x30\x18\xf4\x5f\xac\xa7\x69\xd9\x67\xb5\xfc\xe8\x38\x0d\x57\xa4\x44\x07\xf7\xb5\x50\xf8\x11\xca\x8a\xac\x9e\x00\xf8\xbf\xe3\x69\xff\x4f\xf2\xf4\x37\xbd\xf4\x1f\x33\xb5\xe7\x86\x03\x2f\x0a\x07\x5e\x3a\x88\x9e\x1d\xcb\x47\x2a\x5d\xa8\x98\x11\xbc\x69\xe6\x77\x17\x8d\xf7\x66\xbf\x55\x87\xf1\xf2\x5a\x2e\x55\xb6\xd5\xe3\x38\xd7\xef\x47\xfc\xed\x5c\x9c\x7f\xca\xef\xbf\x4c\x48\xff\x3b\xea\xa3\x81\x97\x46\x03\x3f\x48\x5e\x34\x30\x79\x43\x77\x6c\xf9\x49\xbc\xbb\x7d\x5b\x8e\x49\x98\xfa\x37\x0b\x4d\xf0\x66\x7f\x71\xbe\x2b\xd2\x2f\x39\x1f\x7b\xd7\xc9\x0e\x47\x77\x37\xfb\xbb\xd7\xb9\xda\x92\xc6\x8b\x4c\xed\xff\x05\x54\xfd\x0a\x53\x07\x71\x9c\x87\x9e\x17\xfb\x24\x0a\xca\x22\x89\x8a\x2c\x2a\x02\xaf\x98\xc6\x85\x37\x09\x8b\x34\xc8\xa7\x61\x10\x8f\xc7\xf8\x2a\x53\x27\xd1\x98\xd0\x71\xe6\x8f\x02\x17\x93\x59\xe9\x4d\x83\x94\xfa\x24\xf0\xc6\xe1\xdc\xcf\x82\xa8\x08\xb2\x79\x9c\xa4\xf4\x15\xa6\x4e\x93\xd4\x45\xcf\x0b\x03\x37\x88\xf3\x90\x66\x49\x56\xce\xfc\x28\xf0\xfc\x94\x84\xa9\x9b\x84\x6e\x16\x94\x5e\x96\x26\x1d\x53\x5f\x89\x5a\x69\x7c\xc6\xd5\x85\x58\xd5\x44\xd3\xf5\x1f\x9b\x42\x82\x3f\x89\xee\xa3\x75\xf8\x61\xf9\xcb\xf4\x17\xa0\x12\x0d\x55\xcb\xce\x55\x83\x70\xab\xe7\xc7\x17\x01\xff\x97\x0f\x27\xff\xbb\xf1\xa4\x4d\xc2\x4b\xa0\x0f\xfe\x5e\xcc\xcf\xd3\xd8\x4b\x92\xdc\x4f\xa2\x59\x38\xa7\xb9\x3f\xca\xa3\x51\x30\xa7\xf3\x68\x16\xc6\x84\xe4\x91\x57\x26\xc1\x34\x21\xf1\xab\x98\x2f\xe3\xc0\x2d\xd2\x7c\x16\xc5\x71\x38\x49\xe6\x63\xcf\x0f\xc2\xc9\xac\x0c\xd3\x3c\x1e\x25\x7e\x46\x67\x18\x8c\x13\x6f\x9a\xbe\x8c\xf9\x0c\x11\xd3\x79\x3e\x0b\x66\x7e\x46\xb3\x98\x4e\xb2\x30\x9c\xbb\x88\x13\x2f\xca\xc2\x12\xbd\x3c\x0e\x82\x62\x64\x5a\xef\xeb\x48\x6e\x46\xf0\x27\xa0\xc7\x4d\x4e\x24\x25\x05\x4a\x61\xbe\xfc\x21\xec\x7b\xee\xff\x41\xf9\x14\x94\xde\xdf\x0b\x4a\xdf\x8f\x12\xe2\x8e\x93\x59\xe4\x05\x51\xea\xd3\x20\x1e\x7b\x7e\x42\xc3\x99\x5b\x78\xa1\x3f\x4f\xc7\x59\xea\x27\x01\x79\x7d\x64\x8e\x7d\x8c\xd2\x71\x90\x65\xa4\xa0\x6e\x10\x60\x8c\xa1\x1b\x66\x49\x3a\xf5\xe2\x69\x14\x7a\x7e\x50\x86\x13\xcf\x1d\xd3\x97\x41\x39\x8e\xf3\x24\x9e\x4e\xa6\xf1\x28\x8c\xe2\x69\x54\x64\xf3\x72\x9e\x4c\xbd\x74\x1e\xc5\xfe\x34\x48\xa3\xb0\xf4\x3c\x12\x4d\xb2\x7e\xaf\x77\x02\x53\xa2\x09\x5c\x6b\x21\xc9\x0a\x7b\xaa\xfd\xdd\xde\xee\x17\x44\xaf\x6d\x66\x2a\x73\x87\x9c\x8e\xa1\x64\x15\xf6\x00\x6a\xa2\xd7\x43\x38\xd5\x9b\xfa\xf4\xeb\x2b\xc3\xbf\x0a\xa2\xc9\xc0\xee\x2c\x72\xa3\x77\x22\x78\xc9\x56\x8d\x24\x76\x4a\x3a\x1a\xa0\x76\xf5\xfa\x8f\x9b\x69\x15\x3c\xb3\x36\xa2\x54\x34\x5c\x2b\xb8\xc7\x03\x74\x51\xf4\x48\xb7\x68\xec\xdc\xe3\xc1\x2c\x63\xa7\xf1\xf8\xc9\xc8\x9e\x3d\x8c\x85\x3b\x03\x20\x0b\x84\xd1\xe2\x0c\x08\x2f\x60\xe1\x2f\xe0\xba\x9d\xe9\xcc\x41\x82\xdc\x9c\x14\x3d\x73\x06\xbc\x15\x4a\x73\xb2\xc1\x21\x3c\xbc\x0c\xf4\x4e\x60\x21\xa4\xee\xd4\x18\x15\xdf\x17\x35\x9b\x86\x90\xba\xa9\x6f\xcc\x9b\x3e\x75\xb4\xb0\x83\x31\xd0\xc7\x59\x53\xbd\xda\xaf\xdb\x24\x5d\xd7\x48\x59\x79\x80\xd9\x5e\xdb\xf9\x0b\xce\x16\x8f\xbc\xb5\x03\x23\x25\x1c\x72\x04\x89\x66\x26\x2e\x80\x68\x60\x25\xe4\xb8\x66\xbc\x80\x8b\xd1\xd2\xa8\xc1\x4e\xfa\x6c\x31\x84\xdd\x60\x3f\x38\x0c\xbe\xb4\x25\x30\x5e\x37\x0a\x8b\x87\x46\x30\x71\x57\xe4\x80\xd2\x14\xc2\xba\x6b\xdb\xd8\xee\x5e\xb2\x0d\x8a\xc6\x86\xc9\x41\xd4\xc8\xbb\xc7\x9f\x6e\x22\xb6\x67\xa9\x9d\xf2\x7b\x70\x5c\xee\x44\x86\xd0\x0f\x5c\x65\x61\x77\xd9\x60\x83\x4f\xc2\xb5\xd6\x89\x3a\x70\xba\x96\x82\x8b\x46\x99\xe3\x99\xa2\x52\x8c\xaf\x7a\x9f\x8d\x40\x9b\x8c\xf6\xe9\x4a\xb5\xa1\x37\x9b\x1c\xa5\xa1\x47\xd3\xf3\x28\xd5\x29\x15\x5c\x19\xde\xec\x0e\xfb\x1d\xab\x2a\x93\x17\x52\x99\x11\x5f\xb7\x99\x51\x9a\x48\xdd\xd4\x3d\x30\xf2\xb7\xad\xe0\x10\xda\xf0\xe6\x12\x51\x41\x53\xc3\x64\x71\x03\xf4\x40\x2b\x54\x6d\xa8\xad\x01\x73\x9b\xdb\x11\x66\x5f\xbc\x8c\xbf\xb8\x45\x83\x23\xe8\x3e\xdf\x12\x66\xa3\x7d\x7f\xdd\xb2\x8f\x25\xf1\xce\x43\x89\x5a\x32\xb4\xb7\x12\xb1\xeb\x92\x4d\x40\x13\x65\x48\xdc\xfc\xba\x6a\x37\x58\x2e\xef\x3d\xa2\x3c\x65\xab\xcf\xe8\xb7\xf9\xea\x1d\x09\xaf\x83\x08\x56\x68\xb8\x6c\xb7\x66\x74\xfd\x40\x86\xd0\x21\xdd\x14\xc5\xdc\x4a\xbb\x73\x44\x98\xfc\x75\xc3\x4f\x01\xac\xbd\x7e\xd0\x46\x69\xb1\xe9\x8c\x1c\xdb\xb0\x7b\x1c\xec\x1a\xec\xc2\x22\xbe\xbf\x21\x8c\xf7\x1f\x9e\x00\x6d\x87\x77\x8a\x1f\xec\xd2\xca\x5c\x18\x5b\x68\xfe\xb0\x43\x7b\x5f\x66\x12\x61\xa7\x40\x48\x60\x35\xed\xde\x05\x49\x5e\xa1\xf9\x93\xda\xb1\xab\xcd\xa6\x19\xaf\x8c\xe0\xcd\xd5\xf9\x10\xd6\x5a\xd7\xc3\xd3\x53\x7b\x41\x33\xb7\xba\x61\x16\x85\x91\xb5\xbd\x21\x7b\xb6\x31\x21\x76\xf9\x5c\x11\x13\x13\xa3\x56\x5f\x4d\x0e\xc7\x04\x4b\xc2\x55\x77\x6d\x64\x1c\x76\xc8\xac\xb4\xef\xc2\x9b\x1d\x32\xe0\x62\xd7\x03\xa3\xeb\x0d\x51\x0b\x23\x3d\x04\xdf\x7d\xf8\x39\x02\xce\x3e\x90\x1a\x03\x15\xdb\x30\x73\x34\xac\x88\x3a\x37\x7f\x9a\x62\x7d\xdd\x79\xec\x0d\x2d\x2c\x48\x5a\x0f\xf8\xd7\xac\x3c\xf6\xa5\x8b\xbf\x28\xda\x37\x52\x02\xf6\x72\x6d\x69\xa7\x4d\x03\x68\xc9\x56\x2b\x94\x58\xb4\x9d\xa4\x71\xaf\x8f\xf8\x6a\xbb\x29\x76\x4d\x3b\xbd\x64\x58\x22\x29\x40\xf0\xea\x60\xba\xf4\xd8\x63\xc7\x87\xe2\xa3\x4b\x5f\x55\x5f\x21\x29\xbe\x55\xef\x45\x9d\xf6\x0b\x53\xc5\xc7\xbe\xd7\x42\x54\x26\x67\x0f\x98\xd6\x02\x14\xf2\xe2\x49\xba\xc5\xd6\x32\xc8\x86\xec\x1f\xa0\xed\x77\x99\xfa\xbe\x4a\x7b\x45\xdf\x92\xca\xea\x3d\xb4\x7d\x47\x8c\x83\xb4\x91\xd2\xbe\x61\x3e\x92\x58\x13\x05\x39\x22\x87\x02\x35\x52\x6d\xd3\x74\x54\x60\xec\x99\xf3\xd4\xef\x22\x98\x32\x65\x91\x66\x35\x2a\xb1\x79\x86\x54\x05\x85\x78\xfc\x92\x03\x7a\x6f\x3d\x22\xb5\x81\x8b\xde\x2f\x84\xa8\x46\xd4\xb0\xd1\x8c\x1b\x4d\xc5\x10\xb4\x6c\xd0\xf4\x29\xe1\x07\x28\x30\x6f\x56\xab\x8e\x09\x4d\xfb\x58\xde\x59\x09\x30\x46\x7a\xf6\x6b\xdb\xa6\x75\x2d\x45\x69\xcb\xf3\x20\x62\x38\xd6\xac\x0e\xa1\x24\x95\xc2\x5e\xaf\x9d\x0b\xba\x37\xf1\x5a\x22\x15\x1b\x8b\x34\x6b\xf0\xdf\x01\x00\x00\xff\xff\x60\x37\x75\x1b\x08\x18\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6152, mode: os.FileMode(420), modTime: time.Unix(1554301662, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1552945185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

