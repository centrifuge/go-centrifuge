// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x49\x73\xdb\xb8\xb6\xc7\xf7\xfa\x14\xe7\x39\x9b\xee\x45\x64\x02\x9c\xb5\xa3\x26\x27\x71\xec\xc8\x96\x87\x8e\x37\xaf\x40\xf2\x50\x42\x4c\x12\x0c\x00\x4d\xfe\xf4\xaf\x00\x52\x8a\x32\x28\xfd\x2a\x7d\xbb\xab\x6e\xdd\xeb\x8d\x55\x20\xf0\xc7\x19\x7e\xe7\x10\xc4\x2b\x18\x63\xc1\x56\xa5\x86\x1c\xd7\x58\x8a\xa6\xc2\x5a\x83\x46\xa5\x6b\xd4\xc0\x16\x8c\xd7\x4a\x83\xe4\xf5\x33\xa6\xbb\x5e\x86\xb5\x96\xbc\x58\x2d\xf0\x1a\xf5\x46\xc8\xe7\x01\xc8\x95\x52\x9c\xd5\x4b\x5e\x96\x3d\x2b\xc6\x6b\x04\xbd\x44\xc8\x3b\xdd\xba\x9d\xa9\x40\x2f\x99\x86\xd1\x41\x01\x2a\xc6\x6b\x6d\xf4\x7b\xfb\x29\x83\x1e\xc0\x2b\x78\x2f\x32\x56\x5a\x13\x78\xbd\x80\x4c\xd4\x5a\xb2\x4c\x03\xcb\x73\x89\x4a\xa1\x82\x1a\x31\x07\x2d\x20\x45\x50\xa8\x61\xc3\xf5\x12\xb0\x5e\xc3\x9a\x49\xce\xd2\x12\x55\xbf\x07\xfb\xf5\x46\x12\x80\xe7\x03\x70\x5d\xd7\xfe\x46\xbd\x44\x89\xab\xaa\xf3\xe0\x6d\x3e\x80\xc8\x8d\xda\x67\xa9\x10\x5a\x69\xc9\x9a\x19\xa2\x54\xed\xda\xd7\x70\x76\xce\x1b\xef\x9c\xd0\xb0\xef\xf4\x9d\x3e\x39\xd7\x59\x73\xee\x46\xd4\xa1\xe7\xbc\x29\xd4\xf9\x4d\x75\x77\xb3\x4d\x37\xcf\xab\xa7\x8f\x1f\xc7\xc5\xea\xe5\x2e\xdd\x4e\x92\x5b\xbc\xbb\x1e\xbd\x17\x2f\xbb\x9d\xef\x47\xeb\x9b\x7a\xf1\xb0\x9e\x5d\x7d\x7a\xff\xf1\xf9\xec\x4f\x44\xdd\xbd\xe8\x43\x11\x4c\xae\x83\xea\xf9\xf3\x23\x7e\x7a\xbc\x7c\xa4\x9f\x67\x2b\x12\xfc\xd1\xe4\x17\xee\xf3\x3b\x41\xee\xdc\x6a\xc9\x96\xb3\xa1\x3f\x47\xbf\x26\xad\xe8\x3e\x54\xc9\x3e\x52\xad\x03\xc6\x7d\xac\x35\xd7\xbb\x29\xcb\xb4\x90\xbb\x01\x9c\x9d\x75\x4f\x58\x9d\x2d\x85\xbc\xc5\x46\x28\xfe\xcd\x23\x5e\xaf\x05\xcf\xf0\xbe\x6e\x98\x09\xdf\xd9\x59\xcf\x66\xe7\x8a\xf1\xfa\x87\xac\x74\x49\x84\xdf\x6e\x5b\x58\x7e\xef\xc1\x31\x1c\xad\x2d\xaf\xe0\x7a\x55\xa1\xe4\x19\xbc\x1d\x83\x28\x2c\x28\x47\x48\x74\x1a\x87\x9c\xf9\xa4\x5b\x35\xdc\x27\x06\x4a\xae\xb4\x59\x59\x8b\x1c\xbf\x67\xaa\x91\x62\xcd\xed\x03\x61\xb5\x8f\x0c\xd8\x1b\xfa\xa7\x89\x76\xfd\x3e\xa5\x7e\x9f\x3a\x4e\xdf\xa3\xdf\x26\x9b\xd0\xb1\x7b\x29\xc4\xe3\xb5\x7a\x52\x8f\xe1\x5d\x9a\x3d\xf9\xd1\x75\x48\xee\x6f\xe6\x97\xfe\xf8\xd3\xd3\xe7\x6a\xfa\xfc\x66\xf6\x66\xb3\x9d\x5e\xde\x25\x3b\x71\x7f\x3f\x8e\xf2\xe2\xec\x47\xf2\x51\xd0\xa7\xc4\x39\x25\x3f\x46\xaa\x36\x8f\x13\xb7\xa0\xfc\x5d\x7a\x8f\x37\xf1\xc5\xfd\xfd\xcd\xf0\xcd\x48\x3e\xbe\x4f\x87\x19\x8b\xaf\x2e\xae\x3e\x17\x55\x3a\x5a\xc8\x55\x7a\xd6\xc5\x68\xd2\x81\x7d\xc8\xc4\xdb\x31\xbc\x86\x2e\x1b\xa7\xd0\xf7\xba\xc5\xef\x99\x09\x0f\xe4\xd8\x94\x62\x87\x39\xcc\x2b\x26\x35\x8c\x3a\xa2\x14\x14\x42\xda\x80\x2e\xf8\x1a\xeb\xaf\x42\xf9\x3d\x75\x70\x12\x3b\x67\x5b\x44\x91\x93\x46\x81\x43\x1c\x37\xcd\x3d\x9f\xf9\xd4\xf5\x43\x2f\x41\x1c\x39\xe1\xc8\x8b\xa9\xe3\x92\xc2\x0b\x23\xf2\x13\x40\x9d\x6d\x4c\x93\xb1\xe7\x0d\x87\xd1\x94\xba\x63\x3f\x27\x34\xc6\x61\x44\x99\xef\xe4\x6e\x14\x44\xe9\xd0\x4b\x49\x86\x53\x32\x3d\x85\xb2\xb3\xcd\xbc\x24\xc2\x21\x0d\x8b\xa1\x3b\x61\x74\xe4\xc4\xbe\x3f\x8d\x98\x3f\x24\x01\xf1\x87\x34\xc8\x23\x7f\x3a\x1a\x62\x84\x1d\xf4\x97\x62\xcd\x5a\xaf\x8f\x10\x4d\x51\xd6\xac\x5c\x22\x5f\x2c\xb5\xfa\x35\xbc\xe9\x5f\xc4\xfb\x2b\x13\xfe\xdf\x80\x13\xc7\xeb\x13\xdf\xeb\x93\xa8\xef\x7f\xd7\xcd\xf6\x04\xce\xd3\x6d\x7a\x39\x4a\x9f\x96\xf1\xbb\x07\xad\x6e\x76\x0f\x17\xf9\xdd\x4c\x32\xef\xb6\x99\x27\x9e\x4e\xd7\x2a\x60\x35\x21\x9f\x36\x17\x09\x7d\x39\xfb\x81\xbc\xdf\x27\x91\xdf\xa7\x6e\x78\x6a\x83\x9b\x8a\x66\xf3\x4a\x4e\x38\x9b\x5f\x3d\x78\x8b\xfb\x75\xf8\x78\xb1\x6c\x16\xb7\x1b\x11\x6d\xc4\x74\xae\xde\x2c\x9f\x2e\xd2\x0b\xee\xb2\x24\xda\xfe\x1c\x71\x9b\x9d\x93\x80\xd3\xbf\x81\xf0\x9f\x00\x4e\xdc\x80\x4e\xb2\x61\x11\x05\x61\x4c\x3d\x77\x42\xbd\x22\x71\x26\x23\x8f\xfa\x39\x45\xe2\x24\x4e\x44\xa9\x9b\x85\xe3\x9f\x02\x1e\x92\xc8\x19\x87\xa1\x4b\x9c\x1c\xb3\x28\x19\xd2\x28\x61\x91\x43\x27\x99\x13\x4f\x8b\x84\x8e\xa7\x81\x87\xb1\x13\x66\xa7\x01\x27\x91\x4b\x42\xc7\x8b\x48\xe0\x45\x05\x16\x05\x7a\xb1\xe7\x4c\xdd\x71\x92\xe4\x2e\x0b\xd3\x2c\x4d\x9d\xcc\x4f\x92\x69\x07\xf8\xad\x68\x94\xc6\xef\x10\xcf\xc5\xa2\x61\x3a\x5b\xfe\x1a\xdd\xee\x5f\xa4\x7b\xbf\x3b\xfc\x76\xf7\x61\xfc\x01\x32\x89\x4c\x23\xc8\xce\x54\x43\xb8\xd5\xf9\xfd\x3f\xad\xa3\xb7\x01\x38\x05\xbc\xfb\xcf\xf2\xee\xe4\x6e\x4c\x26\x21\x75\xa9\x3f\xc2\x7c\xe4\x91\x89\x17\x39\xbe\x3b\x09\x43\x1a\x45\x2c\x8a\xa7\x74\xe2\x12\x42\xfc\x9f\xf2\x4e\x47\x91\x33\x25\x63\x56\x8c\x59\xc8\x92\x31\xa6\x74\x44\x42\x3f\xf7\x86\x9e\x9b\x44\x7e\xe4\x85\xee\x84\x90\x90\xb8\xa7\x79\xf7\xe2\x14\x63\xd7\x71\x46\x6e\x30\x2a\x7c\xea\x46\xe9\x34\x88\x27\xde\xc8\x8b\xfd\xc0\x99\x4e\xa3\x22\x9c\x06\x21\x9d\x78\x47\xa7\x18\x73\x68\x39\xe6\x1d\xc6\x1f\xe0\xfa\xc3\x1d\xdc\xcf\x27\xff\xd3\x03\xc0\x2a\x65\x32\x63\x39\x4a\x61\x66\xfd\x52\x09\x10\xe7\x24\x9b\x5f\xe1\x43\xe2\xa8\x4f\x28\xed\x13\x72\xb2\x5d\x26\x0b\x77\x92\x25\x5a\x7e\x7c\x18\x6d\x37\x2f\xc1\x73\xa0\xee\x62\xfe\x34\xbf\x7d\xd1\x2f\xf1\x38\xdc\xdd\xbf\x34\xc3\xd9\xed\x64\xfa\x22\xef\xc5\xc3\xd9\xf7\x3b\x50\x8f\xf6\x29\x25\x7d\x42\x4e\x76\xfc\xcb\x8b\x0d\xdf\xfe\x81\xf5\xea\x8f\xe4\xe1\xf3\xf3\xbb\xcb\xaa\x7e\x33\x4f\xde\x8d\x3f\xbd\x14\x21\x5e\x5c\x89\x40\x4b\xc1\x17\x4f\xdb\x2a\x4c\xfc\xdb\x9f\x13\x5a\xb5\xd1\x3d\x45\x28\xf9\x67\x09\x4d\xa6\x9e\x1f\x64\x24\x70\xa3\x80\x05\x5e\x91\x7b\x53\x2f\x0d\x62\x56\x10\x97\x45\xc1\xb8\x70\x86\x7e\x40\x13\xe6\x38\x3f\x25\x34\x70\xc3\x61\x34\x72\xc7\x34\x49\xdc\x51\x46\x9d\x60\x1c\x7b\x3e\x89\x53\xdf\x8b\x62\xea\x44\x71\x16\x4f\x82\x30\x8e\x9d\xd3\x84\x0e\x7d\xf4\xa8\x9b\x8f\xb2\xd0\x73\xd2\xe1\x28\x72\x8a\xd8\x09\x88\xeb\x22\xf1\x03\x87\x14\x71\xe4\xc4\x71\xe4\xfa\xc1\x37\x84\x7e\x41\xea\x08\xc8\x7f\x35\x8c\x7f\x37\x8a\xff\x05\xf1\xdf\x13\xc4\x57\x30\x66\x9a\xc1\x5c\x0b\xc9\x16\xd8\x53\xed\xff\xf6\x33\x7d\xc6\xf4\xd2\x46\xa6\x34\x1f\x83\xe3\x21\x14\xbc\xc4\x1e\x40\xc3\xf4\x72\x00\xe7\xba\x6a\xce\xbf\x5c\x17\xfc\x6f\xce\x34\xeb\xdb\x99\x79\x6a\x74\x47\xa2\x2e\xf8\x62\x25\x99\xe6\xa2\x3e\x6c\x90\xd9\xd1\xf9\xaf\x6f\xd3\x0a\x7c\xb7\x5b\x92\x65\x62\x55\x6b\x05\xcf\xb8\x83\xce\x8b\x1e\xeb\x06\xcd\x3e\xcf\xb8\x33\xc3\xd8\x29\xee\x1f\x99\xb5\x6f\x6b\x8d\xb2\x60\x19\xc2\xc6\x00\x64\x41\x48\x66\x6f\x81\xd5\x39\xcc\xe8\x0c\xe6\x28\xd7\x28\xed\xd1\x06\x6b\x73\x76\xe9\x99\x53\xc9\x1b\xa1\x74\xcd\x2a\x1c\xc0\xe1\x13\xbf\xf7\x0a\x66\x42\xea\x4e\xc6\x48\xfc\x78\xa9\x99\x34\x80\xc8\x89\xa8\xd9\xde\x54\xe9\x6b\x2d\x5e\x37\x88\x12\xb2\xe3\xa8\xa9\x5e\x43\x9b\x36\x48\xf3\x06\x33\x5e\xec\x60\xb2\xd5\xf6\x8b\x00\xde\xce\x8e\xac\x35\xa2\x90\xb1\x1a\x52\x04\x89\x2c\x5b\x62\x0e\x4c\x03\x2f\x20\xc5\x25\xaf\x73\xb8\x4e\xee\x8c\x0c\x76\xab\xdf\xce\x06\xb0\xe9\x6f\xfb\xbb\xfe\x4b\x9b\x02\x63\xf5\x4a\x61\x7e\x28\x04\xe3\x77\xc9\x76\x28\x4d\x22\xac\xb9\xb6\x8c\xed\xec\x3b\x5e\xa1\x58\x59\x37\x6b\x10\x0d\xd6\xdd\x2d\x4e\x8d\x99\xb5\xda\x9c\xee\x8c\x33\xaa\x07\xfb\xe1\x6e\xc9\x00\xce\x5c\x47\x59\xec\x6e\x56\xb8\xc2\x6f\xdc\xb5\xbb\x33\xb5\xab\xb3\xa5\x14\xb5\x58\x29\x73\x60\xcc\x50\x29\x5e\x2f\x7a\x9f\xcd\x82\x36\x18\xed\x1d\x94\x6a\x5d\x5f\x55\x29\x4a\xd3\x1c\x4d\xcd\xa3\x54\xe7\x99\xa8\x95\xe9\x9a\xdd\xf1\x73\xc3\xcb\xd2\xc4\x85\x95\xa5\xc8\x98\x6e\x23\xa3\x34\x93\x7a\xd5\xf4\xc0\xac\x7f\x6c\x17\x9a\xfe\xe9\x58\xfd\xa9\x44\x54\xb0\x6a\x60\x34\xbb\x87\x6c\x97\x95\xa8\x5a\x67\xdb\x2d\x80\x2b\xd8\x30\x6e\x2f\xaf\x8c\xc5\xb8\x46\x43\x12\x74\x8f\x1f\x19\xb7\xfe\x5e\xcd\xdb\xfe\x63\x9b\x78\x67\xa3\x44\x2d\x39\x2a\x6b\xcc\xa6\x0b\x37\x03\xcd\x94\x69\xe2\xe6\xdf\x6d\x3b\xc1\xf6\xf2\xde\x51\xd3\x53\x36\xff\x3c\xfb\x3a\x62\xbd\x7d\xcb\xeb\x20\xc1\x12\x4d\x37\xdb\x2c\x79\xb6\x3c\xb4\x43\xe8\x58\x37\x69\x59\x29\xdc\xbf\x47\x84\x89\x60\x77\x20\xcf\x81\xd7\x76\x30\x5b\x29\x2d\xaa\x6e\x93\x7d\x21\x76\xf7\x7c\x5d\x89\x5d\x5b\xe6\xcf\x4c\xe3\x3d\x3b\xdc\xe6\xd9\x1a\xef\x84\x0f\xfb\x66\x25\xc7\x5a\xb7\x70\xfe\xb6\x31\x64\x7e\x5e\x71\x89\xb0\x51\x20\x24\xf0\x26\xeb\xae\xf8\x58\x5a\xa2\xf9\x99\xd9\x4f\x81\x36\x9a\xe6\xc8\x6f\x16\xde\xdf\xbe\x1f\xc0\x52\xeb\x66\x70\x7e\x6e\xf2\x57\x2e\x85\xd2\x83\xd8\xf7\x7c\xbb\x77\xc5\xb6\xbc\x32\x2e\x76\xf1\x5c\x30\xe3\x13\xcf\xac\x5e\xc3\x76\xfb\x00\x4b\x56\x2b\x66\xe9\x34\x9e\x6e\x90\xdb\xd5\xd4\x81\x8b\x0d\x72\xa8\xc5\xa6\x07\x46\xeb\x82\xa9\x99\x59\x3d\x00\xea\x1c\xfe\xec\xd4\x0b\xa6\xa0\xe4\x15\xef\xde\x15\x39\x2f\x0a\x94\xc6\xbb\x43\x86\x44\x83\xfb\xaa\x05\x63\xc7\x7b\x3b\x7b\x7f\x3b\x39\xb2\x9f\x36\x16\xb1\x4e\xd3\x8c\x26\x79\x7e\x89\xbb\x01\xb8\xc7\x83\xb7\xb8\x16\xcf\x68\xc7\x7d\x7f\x3f\xdc\xbe\x29\x46\xa2\xaa\xb8\x69\x1d\xdf\x8c\xcf\x24\xee\x1f\x91\x2f\x52\x75\xa1\xaf\x78\xad\x07\x10\x7f\xf1\x63\x5f\xbb\x5a\x58\x84\xdb\xf8\xd4\x5f\x72\x76\x1c\xa9\x2e\x3b\x79\xde\x5e\xc6\x32\x48\x4b\x91\x3d\xdb\xb6\xd8\x26\x09\xb4\xe4\x8b\x05\x4a\xcc\xdb\x4a\xd7\xb8\xd5\x7b\xfa\xdb\x6a\x0f\x1c\x53\xee\xa7\x36\x96\xc8\x72\x10\x75\xb9\x3b\x0a\xde\xe1\x46\x7a\x6f\xd2\x17\xe9\x5b\x64\xf9\xd7\xf2\xc4\xef\xd4\xaf\x0d\x63\xc7\xb6\x37\x42\x94\x26\xa3\x87\x8a\xd3\x02\x14\xd6\xf9\x37\x30\x88\xb5\xed\x70\x15\xdb\x1e\x0a\x8f\x76\x91\xfa\xb1\x24\x37\xef\x8a\x35\x2b\xad\xee\xae\xed\x0a\xcc\x18\x98\xad\xa4\xe5\xe1\x78\xc5\x92\x29\x48\x11\x6b\xc8\x51\x63\xa6\x6d\x98\xf6\x02\x66\x3f\xf3\xbe\xa7\x9d\x07\x63\xae\x6c\x1d\x58\x45\x25\xaa\xef\xea\x48\x41\x2e\xa0\x16\x1a\xd4\xaa\x31\x1d\x19\xf4\xd6\x5a\xc4\x1a\x03\xb3\xde\xce\x84\x28\x93\xcc\x74\xcb\x49\x6d\x94\xf2\x01\x68\xb9\x42\xd3\x45\x58\xbd\x83\x1c\xd3\xd5\x62\xd1\x75\x6a\x53\xdc\xb6\x2f\x2e\x04\x98\x4d\x7a\xf6\x69\xdb\x44\xd0\xae\x6e\xe7\x43\x29\xec\x9a\x1e\x98\x5f\x03\x28\x58\xa9\xd0\xce\x6a\x1a\x29\x8a\xb6\x14\xf6\xc2\xe6\x4d\x61\x46\xf7\xd3\x7a\x2d\x9b\xdd\x15\x7d\x23\x31\xeb\x10\xb5\x66\xfd\x5f\x00\x00\x00\xff\xff\x22\x10\x9c\xcf\x97\x18\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6295, mode: os.FileMode(420), modTime: time.Unix(1555601559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1552945185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

