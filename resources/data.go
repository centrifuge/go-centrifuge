// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4b\x53\xe4\x38\x12\xbe\xd7\xaf\xc8\xa0\x2f\xbb\x87\x06\x5b\xb2\x65\xbb\x6e\x34\xd0\xf3\x68\x9a\x85\x82\x6e\x06\x6e\xb2\x94\xb6\x35\xb8\x24\xb7\x24\xd7\x63\x7e\xfd\x86\xfc\xa0\x81\x1e\xd8\x8d\x8d\x98\x1d\x4e\x0a\x2b\xf3\xcb\xd7\xf7\xa9\x92\x77\x70\x8a\x15\xef\x5b\x0f\x12\x37\xd8\x9a\x6e\x8d\xda\x83\x47\xe7\x35\x7a\xe0\x35\x57\xda\x79\xb0\x4a\x3f\x60\xb9\x5f\x08\xd4\xde\xaa\xaa\xaf\xf1\x02\xfd\xd6\xd8\x87\x25\xd8\xde\x39\xc5\x75\xa3\xda\x76\x31\x80\x29\x8d\xe0\x1b\x04\x39\xe1\xea\xd1\xd2\x81\x6f\xb8\x87\x93\x47\x04\x58\x73\xa5\x7d\xc0\x5f\xcc\x26\xcb\x05\xc0\x3b\x38\x37\x82\xb7\x43\x0a\x4a\xd7\x20\x8c\xf6\x96\x0b\x0f\x5c\x4a\x8b\xce\xa1\x03\x8d\x28\xc1\x1b\x28\x11\x1c\x7a\xd8\x2a\xdf\x00\xea\x0d\x6c\xb8\x55\xbc\x6c\xd1\x1d\x2e\x60\xf6\x0f\x90\x00\x4a\x2e\x81\x52\x3a\x9c\xd1\x37\x68\xb1\x5f\x4f\x15\xfc\x22\x97\x90\xd3\x7c\xbc\x2b\x8d\xf1\xce\x5b\xde\x5d\x22\x5a\x37\xfa\x02\xbc\x87\x83\x23\xd5\x25\x47\x31\xc9\x0e\xa3\xc3\xe8\x30\x3e\xf2\xa2\x3b\xa2\x39\x89\xc8\x91\xea\x2a\x77\x74\xb5\xbe\xb9\xda\x95\xdb\x87\xfe\xfe\xee\xee\xb4\xea\xff\xb8\x29\x77\x67\xc7\x2b\xbc\xb9\x38\x39\x37\x7f\xec\xf7\x69\x9a\x6f\xae\x74\xfd\x75\x73\xf9\xf9\xf7\xf3\xbb\x87\x83\xff\x08\x4b\x67\xd8\xaf\x15\x3b\xbb\x60\xeb\x87\x6f\xb7\xf8\xfb\xed\xa7\x5b\xf2\xed\xb2\x8f\xd9\x6f\x9d\xfc\x89\x3e\xfc\x6a\xe2\x1b\xba\x6e\x78\x73\xf9\x21\xbd\xc6\x54\xc7\x23\xec\xdc\xae\xe3\xb9\x5b\x73\x11\x4a\xa2\xf6\xca\xef\x3f\x72\xe1\x8d\xdd\x2f\xe1\xe0\xe0\xc5\xcd\x0a\x6b\xe5\xfc\xb3\x2b\xae\x45\x63\xec\x0a\x3b\xe3\xd4\x0b\xaf\x8e\xef\x03\x55\xfe\x55\xb6\xaa\xe6\x5e\x19\x3d\xdc\x0d\x03\xfc\xcc\x95\xfe\x53\x3a\x4d\x73\x5e\xc0\x53\xd6\x8c\x09\xbe\x83\x8b\x7e\x8d\x56\x09\xf8\xe5\x14\x4c\x35\x30\xe8\x09\x57\xbe\x7b\x8e\xc3\x4c\xe3\xc9\xeb\xc3\x3c\x31\x68\x95\xf3\xc1\x53\x1b\x89\x3f\x92\xad\xb3\x66\xa3\x86\x0b\x33\x60\x3f\x49\x60\x4e\xef\xbf\x60\x00\x4d\x0f\x09\x49\x0f\x49\x14\x1d\x26\xe4\x25\x0b\x62\x72\x4a\x3f\x19\x73\x7b\xae\x94\xb8\xfa\xba\xbd\x69\x6e\x3e\xdc\xb1\xdd\x27\x71\x69\xce\x2b\xb6\xba\xba\xfb\xf5\x63\xb7\xad\x62\x9b\xa5\xdb\xf3\x1d\xb9\x5f\xd1\xee\x44\xc6\x2f\xb9\x30\x05\xc8\xd9\x21\x89\xa3\xd7\x02\x5c\xdd\x7f\x3e\xce\x7f\xba\xfc\xd9\x6e\xce\xee\x3f\x14\x5b\xf9\x60\xbe\x88\xe3\xe3\xf5\xc9\xfd\xcf\x5d\x81\xfb\xfd\x7d\x72\x7d\x96\xd7\x1f\x2d\x6d\x6e\x2e\x7e\x3b\x98\xfa\x74\x36\xb1\x7e\xee\x64\x68\xf3\x7b\x58\x4d\xba\x7e\x45\x17\xc9\xe4\x7c\xce\x43\x8b\x40\x62\xd7\x9a\x3d\x4a\xb8\x5e\x73\xeb\xe1\x64\xa2\x9a\x83\xca\xd8\xa1\xa9\xb5\xda\xa0\x7e\xd6\xce\x1f\xe9\x08\xaf\xf2\x31\xda\x15\x91\x24\x45\x92\x66\x31\x66\x34\x4f\x08\x2b\x32\xce\x58\x99\xf1\xa2\xe0\x51\x21\x25\x13\x19\x95\x34\x65\xf2\x0d\xe6\x46\xbb\x82\xb1\x48\x44\xb4\x90\x34\x8e\x93\x94\xf2\x2a\x92\x69\x2e\x52\xc6\x58\x46\xa8\x2c\x04\xa9\x78\x26\x19\x8a\x37\x38\x1e\xed\xb2\x2a\x4f\x13\x59\xf1\x22\x8f\x62\x22\xb3\x8a\xa7\xa9\xc8\x23\x5a\x96\x9c\x10\x16\x95\x42\x22\x26\x65\x8a\xf2\x2d\x35\x44\x3b\x56\xc4\x24\x8f\x58\x96\x95\x29\x41\x2a\x78\x16\x63\x44\x28\xa2\x24\x32\xa7\x15\x2f\x2a\x2e\x68\xc9\x92\x72\xd0\x4d\x89\x56\xf3\xb6\x41\x55\x37\xde\xfd\x6f\xa2\x20\xff\x47\x51\xfc\xc5\x92\xf8\x9b\x04\xf1\xc9\x6c\xb8\x7e\x55\x0e\xe4\x2f\xd0\xc3\x1b\x72\xc8\xd3\x92\x92\x2a\xe3\xb4\x4a\xa2\x24\x8f\xab\x98\x50\x9a\x44\x49\xcc\xb2\x48\xe4\xa2\xc4\x28\xab\x32\x99\x15\xe2\x4d\x39\xa4\x09\x47\x9a\xd1\x2a\x2a\x58\xc5\x2b\x22\x4b\x56\xe6\x3c\x61\x59\x9c\x89\xa8\x2c\x72\x14\x15\x8f\xb2\x54\xca\x37\xe5\x90\x24\x49\xc5\x92\x02\x69\x94\x25\x09\xc1\x8c\x09\x51\x65\x34\x4b\x18\xc3\x94\x54\x31\x8b\x8a\xb2\xc8\x09\x8b\xde\x96\x03\xa7\x92\x96\x49\x5a\x25\x84\x44\x31\x23\x51\x2c\x33\x21\x13\x41\x4a\x41\xe2\x8c\xb1\x34\xc9\xa9\x2c\x22\x64\x07\x8b\xc5\x3b\x08\x54\x7b\xef\xcd\xfb\x0e\xd1\x86\xb6\x55\xaa\xee\xed\x80\xe5\x16\x1d\xe9\xc6\x55\xe1\x46\xad\xd1\xf4\x1e\xb6\x0d\x6a\x30\x1d\xea\x69\x63\xd0\x28\x06\xcb\x40\xec\x00\xe0\x16\x30\x7f\x9e\x5c\x96\x70\x40\x23\x37\x44\xba\xea\xb1\xc7\x17\x21\x86\x11\x72\xb7\xd7\xa2\xb1\x46\x9b\xde\x05\xad\x08\x74\x4e\xe9\x7a\xf1\x2d\x38\x8c\x09\x8c\xfb\x8e\x1b\xa6\xad\xfb\x75\x89\x36\xa8\x2d\x10\x06\xad\x3b\x12\x46\xbb\x20\xe0\x49\x79\xdb\xa0\xab\x12\x81\xb7\xad\x11\xdc\xa3\x04\xee\xc1\x79\x6e\x7d\xdf\x2d\x20\xf8\xdf\x8e\x8e\x4b\x20\x03\xfa\x47\x8b\xe8\xa0\xef\xe0\xe4\xf2\x0b\x88\xbd\x68\xd1\x8d\xa5\x8e\x01\x40\x39\xd8\x72\x35\xac\x49\x21\x5f\xdc\xa0\xf6\xa1\xd4\xf1\xfa\x96\xab\xa1\xda\xcf\xd7\x4b\x88\x43\xa1\x8f\x94\x77\x1d\x0a\x55\x29\xf1\xbc\xe8\xc5\x4c\xf9\xb1\xb4\x6b\x6c\x31\x90\x79\xdb\x28\xd1\x3c\xca\x01\xb8\x10\xa6\x0f\xbf\xe9\x06\x7a\x87\xf3\xab\x64\x42\x13\xa6\xe7\x44\x82\xd2\xc3\x47\xd1\x3b\x6f\xd6\x53\x10\xa8\x54\x8b\x0b\x98\xd7\xc2\xe3\x11\xe6\x82\xaf\x71\x09\x07\x61\x15\x3c\x78\x5c\xfe\x42\x32\x33\xf0\x63\x5c\xd1\xaa\xb0\x4a\x84\x87\x0c\xfe\xb1\x45\xb0\xf8\xad\x57\x16\x61\xeb\xc0\x58\x50\x9d\x98\x36\xc2\xb0\x00\x86\xa3\xe0\x3e\xa4\x3d\xb4\xe4\x9f\xa1\xbb\x46\xe2\x97\xd5\xf9\x12\x1a\xef\xbb\xe5\xd1\x51\x18\x41\xdb\x18\xe7\x97\x45\x9a\xa4\xf3\x30\x87\x8d\xb5\xe6\xa1\x16\x25\x42\xba\x35\x77\x97\xe1\xb8\x84\x38\x9a\xff\x7e\x30\x6e\xd5\x5a\xf9\xd1\xf8\x3c\x1c\x97\x90\x64\x31\xa1\x79\xfe\x8c\xa4\xde\x0c\xd3\x1a\xa9\xa5\xbf\x57\xe6\x2d\xd7\x8e\x0f\x84\x9d\x6b\x90\x72\xdc\x70\x39\x94\xad\x11\x0f\xc0\xb5\x9c\x4a\x01\x6f\x55\x5d\xa3\x45\x39\x52\xda\xe3\xce\xcf\x83\x1e\x69\xcd\xa2\xc0\xeb\xd7\x02\x5b\xe4\x12\x8c\x6e\xf7\x41\x2e\x33\xd9\xe7\x35\x7f\x4e\xe9\x3b\xf4\x0a\xb9\x7c\x0e\x1f\xa7\x13\xfa\x45\x98\xc4\xd3\xdc\x3b\x63\x5a\x58\xf3\x1d\x58\xf4\x56\x8d\xbf\x2a\x0e\xb5\x04\xfe\xcc\xcc\x6c\xd0\x2e\x20\x18\xae\x46\xbb\x25\x90\xa9\xa7\x7f\x0e\xa9\xb4\x47\xbb\xe1\xed\x80\xbb\x1f\x05\xc0\x43\x82\xa2\xb7\x76\x58\x2f\x9f\x78\x34\xdc\x41\x89\x18\xf6\x4f\x8f\xc2\x0f\x6d\x9a\x01\x42\xbc\xf0\x9e\x91\xa9\x82\x53\xe5\x06\xb6\x0c\x88\xce\xac\x7f\x60\x9b\x03\x69\x40\x1b\x0f\xae\xef\x3a\x63\x3d\xf8\xdd\x90\x11\xef\x54\xf8\x0f\x63\x77\x69\x4c\x7b\x2c\xc2\xb3\x70\xa6\x03\x92\x5c\x82\xb7\x3d\x06\xad\x71\xbd\x07\x89\x65\x5f\xd7\xd3\x93\x14\x24\x30\x3c\x00\xb5\x81\x10\x64\x31\xdc\x8e\x52\xeb\x3a\x6b\xaa\x61\x3c\x8f\x2e\x0b\x18\xbf\x2e\xa1\xe2\xad\xc3\xc5\xbf\x03\x00\x00\xff\xff\x12\x91\x2c\x71\xa8\x0d\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 3496, mode: os.FileMode(420), modTime: time.Unix(1543495615, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc9\x6e\xe3\x48\x0c\x86\xef\x7a\x0a\x81\x97\x5c\xbc\xd4\xbe\xbd\xc1\x20\x98\xd3\x0c\x90\x33\xab\xc8\x8a\x05\xdb\xb2\x5a\x4b\x12\x23\xc8\xbb\x37\xe4\x38\x9d\x6b\x1a\xba\x90\x04\x7f\xfe\xa4\xea\xe3\xf9\xc0\x23\x2f\xe7\xd4\xb4\x2d\x96\x72\x59\xfa\x79\x5a\xe3\xb6\x3d\x63\xd7\xa7\xf6\x16\xb6\xed\x91\xaf\xa9\x7d\x78\x07\x24\x1a\x79\x9a\x20\x41\x88\x59\x60\x70\x36\xe8\x62\x8c\x31\x58\x2a\x79\x99\x8d\xd3\x2c\x48\x17\x6b\x91\xa5\x91\x0a\x2d\x6c\xa0\x8c\xd7\x61\xbe\x40\x7a\x87\xd2\x0d\x07\x1e\x21\x01\xf2\xb4\x95\x2a\x6c\xcb\x3c\xae\x0d\xb7\xf2\xcc\x6f\x33\x24\x28\xde\xc7\x1a\xb4\x8f\xe4\xbd\xa0\xa8\x4a\x2d\x92\x88\x0c\x86\xaa\x25\x59\x14\x48\x25\x54\x85\x22\x2b\x94\x46\x48\xed\x05\x69\xa7\x45\xd5\xa1\x88\x12\xf0\xcf\xbc\x01\x47\x3c\x4f\xab\x6d\xf7\x02\x09\xb4\x2b\xd2\x05\xf6\x3a\xd7\x18\x44\x65\x6f\xb3\xf0\xca\xd7\x10\x05\x7a\x89\x04\x1f\x1b\x38\x52\x85\x04\xd3\x6d\x61\xb8\xa5\xdf\x43\xe8\x78\xe2\x1e\x92\x56\x1b\xe8\x21\x29\xa7\xa4\x31\x1b\x18\x20\xc9\x0d\x8c\x90\xc2\x06\x26\x3c\xad\x07\x10\xcb\xcc\xd2\xb1\x2e\x31\xc8\x68\x0c\x49\x2e\xa8\x72\xc8\xca\xb3\x61\xc7\x22\xdb\x5c\xb3\xd1\x99\x85\xf6\x0e\x2d\x85\x10\x62\x45\xe7\x23\xaa\x20\x95\x5a\x17\x39\x63\x59\x7f\x45\x91\x2a\xe4\x20\xad\xb5\x36\xa3\x64\x24\x5f\x90\xa3\x70\x82\x43\x30\x0a\x6b\xc1\xa0\xad\x23\xe1\x8c\xb5\x99\x22\x5a\x6f\x55\x46\x57\x4b\x11\x51\x71\x5d\x27\x75\x04\x09\x8c\x65\xe1\x04\xba\x2d\x29\xe4\xad\xd1\x39\x6c\xa3\x52\x75\x6b\x4c\x50\xd1\xc4\x48\xda\x13\x6c\xe0\x85\xc7\xa9\xbb\xac\x47\x7e\x3c\xdc\x1f\x7e\xc0\x69\x7a\xbd\x8c\x94\xda\x87\xaf\xd2\x9d\x81\xd4\xfe\x14\x81\xa6\xe9\x88\xfb\xb9\x9b\xaf\xff\x50\x6a\x41\xbc\x09\xf9\xfd\x41\xd3\xfc\x5a\x78\xe1\x15\xba\x7e\x39\x3f\x5d\xc6\x23\x8f\x53\x6a\x55\xd3\xb6\xaf\xb7\xe4\x09\xbb\xf9\xff\xee\xcc\xff\xfe\x97\x5a\xd9\x34\x47\xbe\xde\x08\x9d\xba\xe7\xbe\xeb\x9f\x3f\x61\x1d\x96\x7c\xea\xca\xe3\x4a\xe9\x6e\xb7\xdf\xed\xf6\x79\xe9\x4e\xb4\x1f\x79\xba\x2c\x63\xe1\x69\x7f\xef\x7e\xe4\xeb\x6e\x58\xf2\x6e\xe0\xf3\xa7\x6e\xec\x5e\x70\xe6\x9f\x09\x8f\xab\xf8\x26\xe4\xf9\x80\xcb\x7c\xf8\xa1\xf7\xbd\xfb\x2f\x8d\xbf\x54\x5f\xae\xbf\x03\x00\x00\xff\xff\xb0\x1c\xaf\x3f\xaa\x03\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 938, mode: os.FileMode(420), modTime: time.Unix(1540808141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
