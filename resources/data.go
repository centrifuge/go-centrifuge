// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5b\x73\xdb\x36\x16\x7e\xd7\xaf\x38\xe3\xbc\xb4\x33\x4b\x19\xbc\x93\x9a\xe9\xec\xc8\xb6\x9c\xa4\x71\x5c\xf9\x92\xba\xf1\xcb\x06\x04\x0e\x25\xc4\x14\xc0\x00\xa0\x2e\xf9\xf5\x3b\x00\x29\xd7\x8e\x63\x77\xb7\x9d\xee\xfa\xc5\x14\x88\x73\x70\x2e\xdf\xf7\x11\xc0\x2b\x38\xc1\x9a\x76\x8d\x05\x8e\x6b\x6c\x54\xbb\x42\x69\xc1\xa2\xb1\x12\x2d\xd0\x05\x15\xd2\x58\xd0\x42\xde\x61\xb5\x1b\x31\x94\x56\x8b\xba\x5b\xe0\x39\xda\x8d\xd2\x77\x13\xd0\x9d\x31\x82\xca\xa5\x68\x9a\x91\x77\x26\x24\x82\x5d\x22\xf0\xc1\xaf\xec\x67\x1a\xb0\x4b\x6a\xe1\xf8\xde\x03\xac\xa8\x90\xd6\xf9\x1f\xed\xa7\x4c\x46\x00\xaf\xe0\x4c\x31\xda\xf8\x10\x84\x5c\x00\x53\xd2\x6a\xca\x2c\x50\xce\x35\x1a\x83\x06\x24\x22\x07\xab\xa0\x42\x30\x68\x61\x23\xec\x12\x50\xae\x61\x4d\xb5\xa0\x55\x83\x66\x3c\x82\xbd\xbd\x73\x09\x20\xf8\x04\xe2\x38\xf6\xcf\x68\x97\xa8\xb1\x5b\x0d\x19\xbc\xe5\x13\x28\xe2\xa2\x7f\x57\x29\x65\x8d\xd5\xb4\x9d\x23\x6a\xd3\xdb\x06\x70\x70\x28\xda\xe4\x30\x8c\xf2\x31\x19\x93\x71\x78\x68\x59\x7b\x18\x17\x11\x89\x0e\x45\x5b\x9b\xc3\x8b\xd5\xf5\xc5\xb6\xda\xdc\x75\xb7\x1f\x3f\x9e\xd4\xdd\xd7\xeb\x6a\x3b\x9b\x5e\xe2\xf5\xf9\xf1\x99\xfa\xba\xdb\xa5\x69\xb1\xbe\x90\x8b\x5f\xd7\xf3\xf7\x9f\xcf\x3e\xde\x1d\xfc\x81\xd3\x78\xef\xf4\xd7\x3a\x9b\x9d\x67\xab\xbb\x2f\x37\xf8\xf9\xe6\xdd\x4d\xf4\x65\xde\x85\xd9\x6f\x2d\x7f\x1d\xdf\xfd\xac\xc2\xeb\x78\xb5\xa4\xcb\xf9\x51\x7a\x85\xa9\x0c\x7b\xa7\xfb\x52\x4d\xf7\x95\xea\x13\x70\xe9\xa3\xb4\xc2\xee\x4e\x29\xb3\x4a\xef\x26\x70\x70\xf0\xcd\x9b\x4b\x5c\x08\x63\x1f\xbd\xa2\x92\x2d\x95\xbe\xc4\x56\x19\xf1\x8d\x55\x4b\x77\x0e\x26\xbf\x54\x8d\x58\x50\x2b\x94\xf4\xef\x7c\xf3\xde\x53\x21\xbf\x0b\xa5\xa1\xc7\xf0\xc3\x65\x8f\xa5\x1f\x47\xf0\x10\x3b\x7d\xa8\xaf\xe0\xbc\x5b\xa1\x16\x0c\xde\x9e\x80\xaa\x3d\x8e\x1e\x20\x66\xf0\x71\xdf\xd2\x34\x1c\xac\x8e\xf6\x7d\x83\x46\x18\xeb\x2c\xa5\xe2\xf8\x14\x72\xad\x56\x6b\xe1\x5f\x28\xef\xfb\x41\x00\xfb\x40\xff\x10\x07\x71\x3a\x8e\xa2\x74\x1c\x11\x32\x4e\xa2\x6f\xb1\x10\x46\x27\xf1\x3b\xa5\x6e\xce\x84\x60\x17\xbf\x6e\xae\x97\xd7\x47\x1f\xb3\xed\x3b\x36\x57\x67\x75\x76\x79\xf1\xf1\xe7\xd3\x76\x53\x87\x3a\x4f\x37\x67\xdb\xe8\xf6\x32\x6e\x8f\x79\x78\xf0\x3d\xf7\x45\x36\x8e\x42\xf2\x9c\xfb\x8b\xdb\xf7\xd3\xe2\xf5\xfc\x8d\x5e\xcf\x6e\x8f\xca\x0d\xbf\x53\x1f\xd8\x74\xba\x3a\xbe\x7d\xd3\x96\xb8\xdb\xdd\x26\x57\xb3\x62\x71\xaa\xe3\xe5\xf5\xf9\x6f\x07\x43\x8d\x66\x03\xee\xef\x3b\xf1\xf6\x04\x02\x18\xba\xf1\x1c\x33\x92\xc1\xf8\x8c\xba\xf2\x00\xc7\xb6\x51\x3b\xe4\x70\xb5\xa2\xda\xc2\xf1\x00\x38\x03\xb5\xd2\xbe\xa0\x0b\xb1\x46\xf9\xa8\x94\x4f\x41\x09\xcf\xa2\x92\x6c\x4b\xc2\xa3\x32\x49\xf3\x10\xf3\xb8\x48\xa2\xac\xcc\x69\x96\x55\x39\x2d\x4b\x4a\x4a\xce\x33\x96\xc7\x3c\x4e\x33\xfe\x02\x7e\xc9\xb6\xcc\x32\xc2\x48\x5c\xf2\x38\x0c\x93\x34\xa6\x35\xe1\x69\xc1\xd2\x2c\xcb\xf2\x28\xe6\x25\x8b\x6a\x9a\xf3\x0c\xd9\x0b\x48\x27\xdb\xbc\x2e\xd2\x84\xd7\xb4\x2c\x48\x18\xf1\xbc\xa6\x69\xca\x0a\x12\x57\x15\x8d\xa2\x8c\x54\x8c\x23\x26\x55\x8a\xfc\x25\x4e\x90\x2d\xaf\x48\x5a\x84\xd3\x32\x8e\x8a\x2c\x4b\x8a\x34\x8d\xa3\x62\xca\x4f\x2a\x32\x8b\xd2\x30\x2c\x92\x2c\x21\x75\x89\xe9\xc9\xc0\x9e\x77\x6a\x4d\xfb\xf2\x3d\xc0\x7a\x85\x5a\xd2\x66\x89\x62\xb1\xb4\x03\x16\x5f\xbd\x7a\x35\x34\xa6\xb7\x38\x9d\x5e\x0c\xbf\x03\xb8\x71\x72\x28\x64\xdd\x69\x0a\x3b\xd5\xc1\xc2\xe9\xb8\x04\xd4\x5a\x69\x87\xb2\xeb\xa5\x30\xa0\xf1\x4b\xe7\x56\x11\x06\xa4\xb2\x60\xba\xb6\x55\xda\x22\x87\x0a\x19\xed\x0c\x3a\x4b\xed\x49\xe4\xa6\xe8\x4e\x4a\xa7\xc5\x5e\x69\x8d\xa5\xd6\x31\xa9\x73\x43\x63\xb8\xec\x64\x3f\x1e\x04\xc3\xd8\x4f\x54\xb3\xa5\x58\xe3\xf8\xe0\x1f\x43\x50\x00\x1b\x47\x44\xab\x80\xab\x7f\x7a\x0b\x0a\x8d\x57\xf9\x96\x6a\x61\x77\xfd\x42\xde\xcb\x9d\xcf\x07\x17\x93\xfe\xe7\xa7\x61\x42\x10\xb0\x25\x15\xf2\xa7\xfe\x75\x10\xb8\x68\x7f\x8a\x49\x4c\x12\x08\x82\x0d\xd5\xed\xf0\x2f\xa8\xa8\xd6\x02\x35\xa4\x59\x41\x08\x21\x10\x04\x52\x05\x54\x32\x81\xd2\x06\x55\xa3\xd8\x9d\xe9\xc7\x0c\xea\x35\x06\x8d\x2b\x2a\x04\xc1\x8a\x6e\x83\xd6\x71\x1d\xa2\xd4\x19\x19\x49\x5b\xb3\x54\x76\x18\xf4\x63\x2b\x21\x1f\xfd\x74\x31\x53\x66\xc5\x1a\x21\x08\x1c\xc6\x5d\x89\x54\x5d\x3f\xad\x04\x04\x01\xaf\x02\xa6\x56\xad\x9b\xaf\x24\x18\xc3\x5d\x4a\x94\x2d\x31\x30\xe2\x2b\x42\x42\xca\x0c\x82\xe0\xb3\x51\x52\xb7\x2c\x58\x2a\x63\x0d\xd0\xa6\x79\x30\x26\xa4\x45\x5d\x53\x86\x6e\xfc\xd3\xe3\x76\x3f\x2d\xe6\xf7\x3a\x7f\xe4\xd2\x47\xee\x28\x29\xb1\x0f\xc4\x2a\xb8\xc1\xea\xca\x8d\x5b\x03\xbe\x26\x1a\x6a\xad\x56\xd0\x49\xab\x3b\xe3\x20\xa1\xb4\x58\x08\x39\x81\xf1\xf8\xe0\xd9\x7e\x3a\xee\x3f\xe9\xe5\xa7\x20\xe8\xa4\xa1\x35\x06\xb8\x6d\x95\xc1\x4f\x50\x37\x74\xf1\x0d\x80\xff\x3b\xc1\x8f\xfe\xa2\xe0\x3f\xe2\xd2\x7f\x2c\xf9\x21\x49\xc6\x61\x9a\x8c\xc3\x62\x9c\x3e\xf9\xfc\xef\x35\x79\x6e\x32\x41\xf1\x43\x77\x7a\x7b\xde\x85\xaf\xb7\x6b\xb3\x3b\xba\xbe\xd2\xd7\xa6\x5c\xdb\xa3\xac\xb2\xef\xa7\xf2\xcd\xa9\x3a\xfb\x5c\xdd\x7d\x3d\xa6\x07\xdf\x71\x9f\x8e\xc3\x22\x1d\x47\x71\xfe\xec\x02\xc7\xaf\xd9\x46\x5c\x7f\x56\xef\x6e\xde\xd4\x47\x34\x29\xa2\x0f\x73\x4b\xf1\xc3\xf6\xfc\x6c\xc3\x8b\xaf\x95\x3c\x0a\xaf\xf2\x0d\x4e\x6f\x3f\x6c\x6f\x5f\x16\x7d\x2f\x1a\xcf\x4a\x7e\xf4\x37\x68\xfe\x0b\x92\x5f\xa4\x55\x1c\xd5\x39\x8d\xeb\x84\x24\x45\x58\x87\x51\x1c\x27\x24\x09\xb3\x9c\xb0\x82\x55\x48\xf2\x3a\xe7\x79\xc9\x5e\x94\xfc\x34\xa1\x18\xe7\x71\x4d\xca\xac\xa6\x75\xc4\xab\xac\x2a\x68\x92\xe5\x61\xce\x48\x55\x16\xc8\x6a\x4a\xf2\x94\xf3\x17\x25\x3f\x49\x92\x3a\x4b\x4a\x8c\x49\x9e\x24\x11\xe6\x19\x63\x75\x1e\xe7\x49\x96\x61\x1a\xd5\x61\x46\xca\xaa\x2c\xa2\x8c\xbc\x2c\xf9\x24\x09\x73\xac\xe2\xbc\x4c\xc2\x30\x4b\xe2\xac\x48\x48\x78\x92\x65\x59\x59\x24\x6c\x76\x92\x67\x65\x32\x3d\x62\x47\x55\x38\x48\xfe\xa5\x6a\x8d\xc5\x27\xa2\xcf\xd5\xa2\xa5\x96\x2d\xff\xdc\xbe\x28\xfe\x8b\x34\xd9\xaf\x0e\x3f\x5c\xff\x72\xf2\x0b\x30\x8d\x4e\xf3\xf5\x10\xaa\xa3\x8a\xf7\xf3\xe3\xb3\xcc\xf9\xdb\xb7\x4b\xff\xbf\x0d\x53\x5f\x84\xe7\xd8\x13\xff\x6f\xc9\x93\x26\xd9\xec\xb4\x88\x8e\x53\x12\x63\x1d\x93\x0c\xc3\x7a\x9a\xe4\x79\x5a\xc7\x84\x64\x45\x95\xf0\x12\x23\x52\x84\xc9\xcb\xe4\x49\xc3\x8c\x1c\x85\x11\x29\x43\x96\x84\xb3\xfc\x38\x09\x6b\x72\x34\x4d\xa7\x58\x46\x29\x25\x49\x94\xb1\x84\x4e\x67\xd3\x17\xc9\x13\x87\x75\x9e\x11\xcc\x49\x72\x1a\xe7\x79\x9a\xf2\xf0\x98\x26\xf5\x51\x8a\x27\xd3\xec\x24\x4f\xd3\x59\x48\xf2\x29\x86\xe1\xcb\xe4\x89\x67\x34\x8e\x8e\xa3\x64\x9a\x46\xe9\x2c\xc7\x82\x66\x61\x19\x1e\x97\x51\x9c\x97\x31\x49\xa3\xd3\x3c\xaf\xb2\xb4\x8c\xb3\x83\x91\x3b\x6c\x52\x4b\xe1\xca\x2a\x4d\x17\x38\x32\xfd\xff\xfe\x08\x39\xa7\x76\xe9\x4b\xdc\xb8\x93\xc8\xc9\x11\xd4\xa2\xc1\x91\x5b\xd4\x2e\x27\x70\x68\x57\xed\xe1\xef\x47\xd9\x7f\x71\x6a\xe9\xd8\xcf\xe4\x95\xf3\x7b\xac\x64\x2d\x16\x9d\xf6\x61\xdd\x2f\xc0\xfc\xe8\xd5\x9f\x5f\xa6\x77\xf0\x64\xb5\x29\x63\xaa\x93\xd6\xc0\x1d\xee\x60\xc8\x62\x44\x87\x41\xb7\xce\x1d\xee\xdc\x30\x0e\x1e\xf7\xaf\x9c\xed\xdb\xfb\x3d\xc1\xc6\x21\xd1\x23\x6a\x3a\x7f\x0b\x54\x72\x98\x47\x73\xb8\xea\x3f\xe8\x8e\xfc\x28\x1d\xbb\x47\x8e\xb7\x6f\x94\xb1\x92\xae\x70\x02\xc4\x1f\x3e\xc9\xe8\x15\xcc\x95\xb6\x83\x13\xe7\xe0\xfb\x86\x6e\xd2\x04\x0a\x52\x44\x6e\x71\x47\xf7\xc0\x2a\xbf\x27\x02\xf6\xb0\x66\x66\xd4\x46\x6d\x5f\xa2\xab\x16\x99\xa8\x77\x30\xdb\x5a\xff\xe9\x85\xb7\xf3\x07\xb1\xfa\xbd\x02\xa3\xd2\x1d\xe5\x35\xba\xed\x10\x07\x6a\x41\xd4\x50\xe1\x52\x48\x0e\xe7\xd3\x6b\xe7\x06\x07\xeb\xb7\xf3\x09\x6c\xc6\xdb\xf1\x6e\xfc\xb5\x6f\x80\x8b\xba\x33\xc8\xef\xf9\xe4\xb2\x6e\xe8\x0e\xb5\x6b\x83\x0f\xd7\xab\x81\x9f\x7d\x2d\x56\xa8\x3a\x9f\xa6\x04\xd5\xa2\x1c\xee\x17\x86\xcd\x90\x57\x3f\xbf\xc1\x1b\xc1\x7e\x78\x30\x99\xc0\x41\x4c\x8c\x07\xdd\x45\x87\x1d\x7e\x93\xae\x5f\x9d\x9a\x9d\x64\x4b\xad\xa4\xea\x8c\x13\x54\x86\xc6\x08\xb9\x18\x7d\x71\x06\x7d\x31\xfa\xdb\x11\xd3\xa7\xde\xad\x2a\xd4\x4e\x92\x9d\x74\xa0\x36\x87\x4c\x49\xe3\x54\x7e\x90\xe7\x8d\x3b\x94\x56\x7e\xb7\xa7\x18\xb5\x7d\x65\x8c\xa5\xda\x76\xed\x08\x9c\xfd\x4d\x6f\x38\x81\x3e\xbd\x53\x8d\x68\xa0\x6b\xe1\x78\xfe\x01\xd8\x8e\x35\x68\xfa\x54\xfb\x05\xdc\x46\x7e\x43\x85\xbf\x54\x71\xf1\xe2\x1a\x1d\x8a\x60\x78\x7d\x43\x85\xcf\xf6\xfd\xd5\x04\xc2\xd1\xf0\xc9\x19\x22\xd4\x68\xb5\x40\xbf\x21\x55\x9b\xa1\xd8\x14\x2c\x35\xee\x93\xe3\xfe\x5d\xf6\x13\x26\x10\x12\x57\xa3\x7b\xe5\x34\xbe\xfb\x82\x3d\xae\xd7\x68\xaf\x9b\x03\x44\xb0\x41\x27\x89\x9b\xa5\x60\xcb\x7b\x4d\x85\x01\xe7\xae\x29\xee\x40\x32\x7c\xf5\x94\xab\xdf\xf0\xb9\xe2\x20\xfa\x9d\x27\xeb\x8c\x55\xab\x61\x91\x3d\x09\x87\xfb\xa7\x81\x5e\xe7\x1e\xef\x07\x2b\x2a\xe4\xc1\xfd\x2d\x93\xe7\xf7\xe0\xf8\x7e\x5d\xd6\xb8\xb3\x42\x0f\xcd\x1f\x36\xe8\x8f\x4a\x42\x23\x6c\x0c\x28\x0d\xa2\x65\xc3\xd5\x13\xad\x1a\x74\x8f\xcc\x7f\x28\xfb\x6a\xba\x0f\xa2\x33\xfc\x70\x79\x36\x81\xa5\xb5\xed\xe4\xf0\xd0\xef\xcd\xdd\x86\x7e\x52\xa6\x49\xba\xc7\x81\xbf\x1a\x5b\x50\x97\x8b\x60\x2e\xdc\x05\x35\x73\xf7\xe8\x6a\xb8\xff\x7b\x32\xb9\x11\x2b\x61\xfb\xc9\x67\xee\x71\x02\x49\x1e\x46\x71\x51\x3c\xc2\xb7\x55\xbe\xd1\x7d\x9b\xe4\xef\x99\x59\x4d\xa5\xa1\xf7\x1b\x7f\x97\x03\xe7\xfd\x55\x1a\x05\x7f\x36\xf2\xc2\xd1\xa7\x02\x56\x8b\xc5\x02\x35\xf2\x9e\x0d\x16\xb7\x76\x8f\x91\x9e\x11\x19\x71\x94\x78\x6e\x61\x8d\x94\x83\x92\xcd\xce\x31\x6d\xcf\x93\xfd\x7d\xe2\x3e\xa4\xdf\x5d\x5f\x22\xe5\x8f\xdd\x87\xe9\xe0\xfd\xdc\x75\xe2\x61\xec\xad\x52\x0d\xac\xe8\xf6\x1e\x97\x56\x81\x41\xc9\x1d\x26\x1f\x4c\x53\x6b\xaf\x02\x2b\xba\xbd\x87\x67\x34\xd4\xf4\xfb\x2e\xfd\x09\x6b\x4d\x1b\xef\x77\xd7\x73\x87\xba\x00\x59\xa7\xb5\xbf\xcb\x7a\x60\xb1\xa4\x06\x2a\x44\x09\x1c\x2d\x32\xeb\xcb\xb4\x77\xe0\xd6\x73\x5f\xc5\x68\xc8\xe0\x44\x18\x8f\x16\xef\xd1\xa8\xd5\x13\xb4\x19\xe0\xea\xe1\x41\x1c\xec\xd6\x47\x44\x5b\xe1\x18\xb6\x9d\x2b\xd5\x4c\x99\x53\x94\x99\x74\x9e\xf8\x04\xac\xee\xd0\x71\x8d\xca\x1d\x70\xac\xba\xc5\x62\x50\x33\x47\x01\xaf\x1d\x0b\x05\x6e\x91\x91\x7f\xdb\x53\xad\x6d\xb5\xaa\x7d\x7b\xee\x4d\x9c\x4e\xba\xd1\x09\xd4\xb4\x31\x38\xfa\x77\x00\x00\x00\xff\xff\x55\x54\xf7\xc0\x11\x16\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 5649, mode: os.FileMode(420), modTime: time.Unix(1548259859, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x3b\x6f\xe4\x36\x10\xee\xf5\x2b\x88\x49\xe1\x66\x1f\x7c\x8a\x8f\x2e\x65\x70\x48\x9a\x04\xb8\x7a\x48\x0e\xd7\xc2\x7a\xb5\x0a\x49\xd9\xb7\x38\xdc\x7f\x0f\xb4\xb7\x8e\x53\x3a\x50\x33\x33\xfa\x1e\x33\xd2\x97\x68\xee\x75\x2a\xeb\x89\xfe\xa0\xfe\x76\xad\xe7\xc0\x3a\xb5\x3e\xcd\xa7\x81\xfa\x33\x55\x5a\x2f\x61\x60\x0c\x53\xba\xae\x73\x6f\x5b\xcd\xd8\x05\xa7\x39\xb0\x7b\xc9\xd8\x99\x6e\x81\x3d\x7d\x07\xcc\xb9\x52\x6b\x10\xc0\xf9\xc8\xd1\x8d\xc6\xa9\xa4\xb5\xd6\x98\x4a\xb6\x22\xea\x51\x11\xcf\x2a\x19\x83\x24\xb4\x90\x68\x60\x07\xa9\xde\x96\x7e\x85\xf0\x1d\xd2\xb4\x3c\x53\x85\x00\x48\x6d\x2f\xa4\xdb\xa7\x5e\x37\xc0\x7d\xdc\xe9\x5b\x87\x00\xc9\x5a\x5f\x9c\xb2\x3e\x5b\xcb\xb3\x97\xa9\x24\x91\x73\xd6\xe8\x8a\x12\xd9\x20\xc7\x9c\x5c\x91\xc8\xa3\x44\xa1\xb9\x50\x96\x67\x35\x2a\x5e\x94\x4b\x3c\x39\xfc\x57\x6f\xc1\x8a\x97\xb6\xd9\x4e\xaf\x10\x40\x8d\x49\x8c\x8e\xac\x8a\xc5\x3b\x5e\xc8\x9a\xc8\xad\xb4\xc5\x79\x8e\x56\x60\x86\x1f\x3b\x38\xe7\x02\x01\xda\x7d\x61\xb8\xb7\x1f\x22\xf9\xfc\x42\x33\x04\x25\x77\x30\x43\x90\xa3\x14\x5a\xef\x60\x81\x20\x76\x50\x21\xb8\x1d\x34\x7c\xd9\x0e\xc8\x24\x22\x89\x91\x54\xf2\x4e\x78\xad\xb3\xa0\x84\x32\xba\x28\x2d\x69\x1a\x89\x47\x13\x4b\xd4\x2a\x12\x57\x76\x44\x93\x9d\x73\xbe\xe0\x68\x3d\x4a\x27\xa4\xdc\x16\xb9\x60\xda\x3e\x45\x12\xd2\x45\x27\x8c\x31\x26\xa2\x20\xcc\x36\x21\x79\x3e\x72\x72\x4e\x4b\x2c\x09\x9d\x32\x63\xe6\xa3\x36\x26\x66\x8f\xc6\x1a\x19\x71\x2c\x29\x71\x2f\xa9\x6c\x4a\x53\x86\x00\xda\x10\x1f\x39\x8e\xfb\x2c\x91\xf6\x5a\x45\xb7\xf7\x52\x96\xbd\xd6\x4e\x7a\xed\x7d\x56\x36\xc3\x0e\x5e\xa9\xb6\xe9\xba\x1d\xf9\xe3\xe9\xf1\xe3\x17\x6c\xed\xed\x5a\x73\x60\x4f\xef\xa3\x47\x06\x02\xfb\x6c\x04\x86\x61\xca\x34\xf7\xa9\xdf\x7e\xcb\x81\x01\xff\xc6\xc5\xc7\x03\xc3\xf0\x0b\xfb\xf5\x91\xbc\x2d\x67\xac\xf5\x6b\xc5\x13\x0d\xff\x8d\xe3\x99\x6e\xdb\x98\x02\x3b\xf6\xcb\x72\x7c\x7f\x35\x0c\x7f\xaf\xb4\xd2\x86\x98\xd7\xcb\xd7\x6b\x3d\x53\x6d\x81\xc9\x81\xb1\xb7\x7b\xf3\x15\xa7\xfe\xd7\x74\xa1\xdf\xff\x0c\x4c\x0c\xc3\x26\xb3\x81\xdb\x74\x9a\xa7\xf9\xf4\x33\xe8\xcb\x1a\x5f\xa6\xf4\x65\x4b\xf8\xe1\x70\x3c\x1c\x8e\x71\x9d\x5e\xf2\xb1\x52\xbb\xae\x35\x51\x3b\x3e\xd0\x5f\xe8\x76\x58\xd6\x78\x58\xe8\xf2\x93\x57\xa7\x57\xec\xf4\x39\xe2\x79\x23\xdf\x89\xd4\x9f\x71\xed\xcf\x9f\xf4\x7e\xa0\xff\xa7\xf1\x3b\xeb\xdd\xf5\x9f\x00\x00\x00\xff\xff\x6a\x9a\xa9\xc9\x01\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1025, mode: os.FileMode(420), modTime: time.Unix(1547821748, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
