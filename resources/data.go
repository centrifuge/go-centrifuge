// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x4b\x57\xdc\x38\x16\xde\xfb\x57\xdc\x43\x36\x33\x8b\x80\x2c\xd9\xb2\x5d\x3b\x42\x48\x3f\x42\x18\x20\x24\x34\xec\x64\xe9\xba\x4a\x8d\x4b\x72\x24\xb9\x1e\xfd\xeb\xe7\xc8\x0f\x02\xa4\x61\xe6\xcc\x39\x3d\x5d\x2b\x1f\xeb\xde\xef\xbe\xbe\x4f\xbe\xf5\x06\xde\x63\x23\xfa\x36\x80\xc2\x0d\xb6\xb6\x5b\xa3\x09\x10\xd0\x07\x83\x01\xc4\x52\x68\xe3\x03\x38\x6d\xee\xb1\xde\x27\x12\x4d\x70\xba\xe9\x97\x78\x8e\x61\x6b\xdd\xfd\x02\x5c\xef\xbd\x16\x66\xa5\xdb\x36\x19\xc0\xb4\x41\x08\x2b\x04\x35\xe1\x9a\xd1\xd2\x43\x58\x89\x00\x27\x0f\x08\xb0\x16\xda\x84\x88\x9f\xcc\x26\x8b\x04\xe0\x0d\x9c\x59\x29\xda\x21\x05\x6d\x96\x20\xad\x09\x4e\xc8\x00\x42\x29\x87\xde\xa3\x07\x83\xa8\x20\x58\xa8\x11\x3c\x06\xd8\xea\xb0\x02\x34\x1b\xd8\x08\xa7\x45\xdd\xa2\x3f\x4c\x60\xf6\x8f\x90\x00\x5a\x2d\x80\x31\x36\x3c\x63\x58\xa1\xc3\x7e\x3d\x55\xf0\x8b\x5a\x40\xc9\xca\xf1\xac\xb6\x36\xf8\xe0\x44\x77\x81\xe8\xfc\xe8\x0b\xf0\x16\x0e\x8e\x74\x97\x1d\xa5\xb4\x38\x24\x87\xe4\x30\x3d\x0a\xb2\x3b\x62\x25\x25\xf4\x48\x77\x8d\x3f\xba\x5c\x5f\x5f\xee\xea\xed\x7d\x7f\x77\x7b\xfb\xbe\xe9\xff\xb8\xae\x77\xa7\xc7\x57\x78\x7d\x7e\x72\x66\xff\xd8\xef\xf3\xbc\xdc\x5c\x9a\xe5\xd7\xcd\xc5\xa7\xdf\xcf\x6e\xef\x0f\xfe\x23\x2c\x9b\x61\xbf\x36\xfc\xf4\x9c\xaf\xef\xbf\xdd\xe0\xef\x37\x1f\x6f\xe8\xb7\x8b\x3e\xe5\xbf\x75\xea\x27\x76\xff\xab\x4d\xaf\xd9\x7a\x25\x56\x17\xef\xf2\xcf\x98\x9b\x74\x84\x9d\xdb\x75\x3c\x77\x6b\x2e\x42\x2b\x34\x41\x87\xfd\x07\x21\x83\x75\xfb\x05\x1c\x1c\x3c\x3b\xb9\xc2\xa5\xf6\xe1\xc9\x91\x30\x72\x65\xdd\x15\x76\xd6\xeb\x67\x5e\x9d\xd8\x47\xaa\xfc\xab\x6e\xf5\x52\x04\x6d\xcd\x70\x36\x0c\xf0\x93\xd0\xe6\x4f\xe9\x34\xcd\x39\x81\xc7\xac\x19\x13\x7c\x03\xe7\xfd\x1a\x9d\x96\xf0\xcb\x7b\xb0\xcd\xc0\xa0\x47\x5c\xf9\xee\x39\x0e\x33\x4f\x27\xaf\x77\xf3\xc4\xa0\xd5\x3e\x44\x4f\x63\x15\xfe\x48\xb6\xce\xd9\x8d\x1e\x0e\xec\x80\xfd\x28\x81\x39\xbd\xff\x82\x01\x2c\x3f\xa4\x34\x3f\xa4\x84\x1c\x66\xf4\x39\x0b\x52\xfa\x9e\x7d\xb4\xf6\xe6\x4c\x6b\x79\xf9\x75\x7b\xbd\xba\x7e\x77\xcb\x77\x1f\xe5\x85\x3d\x6b\xf8\xd5\xe5\xed\xaf\x1f\xba\x6d\x93\xba\x22\xdf\x9e\xed\xe8\xdd\x15\xeb\x4e\x54\xfa\x9c\x0b\x53\x80\x92\x1f\xd2\x94\xbc\x14\xe0\xf2\xee\xd3\x71\xf9\xd3\xc5\xcf\x6e\x73\x7a\xf7\xae\xda\xaa\x7b\xfb\x45\x1e\x1f\xaf\x4f\xee\x7e\xee\x2a\xdc\xef\xef\xb2\xcf\xa7\xe5\xf2\x83\x63\xab\xeb\xf3\xdf\x0e\xa6\x3e\x9d\x4e\xac\x9f\x3b\x19\xdb\xfc\x16\xae\x26\x5d\xbf\xa0\x8b\x6c\x72\x3e\x13\xb1\x45\xa0\xb0\x6b\xed\x1e\x15\x7c\x5e\x0b\x17\xe0\x64\xa2\x9a\x87\xc6\xba\xa1\xa9\x4b\xbd\x41\xf3\xa4\x9d\x3f\xd2\x11\x5e\xe4\x23\xd9\x55\x44\xd1\x2a\xcb\x8b\x14\x0b\x56\x66\x94\x57\x85\xe0\xbc\x2e\x44\x55\x09\x52\x29\xc5\x65\xc1\x14\xcb\xb9\x7a\x85\xb9\x64\x57\x71\x4e\x24\x61\x95\x62\x69\x9a\xe5\x4c\x34\x44\xe5\xa5\xcc\x39\xe7\x05\x65\xaa\x92\xb4\x11\x85\xe2\x28\x5f\xe1\x38\xd9\x15\x4d\x99\x67\xaa\x11\x55\x49\x52\xaa\x8a\x46\xe4\xb9\x2c\x09\xab\x6b\x41\x29\x27\xb5\x54\x88\x59\x9d\xa3\x7a\x4d\x0d\x64\xc7\xab\x94\x96\x84\x17\x45\x9d\x53\x64\x52\x14\x29\x12\xca\x10\x15\x55\x25\x6b\x44\xd5\x08\xc9\x6a\x9e\xd5\x83\x6e\x6a\x74\x46\xb4\x2b\xd4\xcb\x55\xf0\xff\x9b\x28\xe8\xff\x51\x14\x7f\xb1\x24\xfe\x26\x41\x7c\xb4\x1b\x61\x5e\x94\x03\xfd\x0b\xf4\xf0\x8a\x1c\xca\xbc\x66\xb4\x29\x04\x6b\x32\x92\x95\x69\x93\x52\xc6\x32\x92\xa5\xbc\x20\xb2\x94\x35\x92\xa2\x29\x54\x51\xc9\x57\xe5\x90\x67\x02\x59\xc1\x1a\x52\xf1\x46\x34\x54\xd5\xbc\x2e\x45\xc6\x8b\xb4\x90\xa4\xae\x4a\x94\x8d\x20\x45\xae\xd4\xab\x72\xc8\xb2\xac\xe1\x59\x85\x8c\x14\x59\x46\xb1\xe0\x52\x36\x05\x2b\x32\xce\x31\xa7\x4d\xca\x49\x55\x57\x25\xe5\xe4\x75\x39\x08\xa6\x58\x9d\xe5\x4d\x46\x29\x49\x39\x25\xa9\x2a\xa4\xca\x24\xad\x25\x4d\x0b\xce\xf3\xac\x64\xaa\x22\xc8\x0f\x92\xe4\x0d\x44\xaa\xbd\x0d\xf6\x6d\x87\xe8\x62\xdb\x1a\xbd\xec\xdd\x80\xe5\x93\x8e\x76\xe3\xaa\x70\xad\xd7\x68\xfb\x00\xdb\x15\x1a\xb0\x1d\x9a\x69\x63\x30\x28\x07\xcb\x48\xec\x08\xe0\x13\x98\x5f\x4f\x2e\x0b\x38\x60\xc4\x0f\x91\x2e\x7b\xec\xf1\x59\x88\x61\x84\xc2\xef\x8d\x5c\x39\x6b\x6c\xef\xa3\x56\x24\x7a\xaf\xcd\x32\xf9\x16\x1d\xc6\x04\xc6\x7d\xc7\x0f\xd3\x36\xfd\xba\x46\x17\xd5\x16\x09\x83\xce\x1f\x49\x6b\x7c\x14\xf0\xa4\xbc\x6d\xd4\x55\x8d\x20\xda\xd6\x4a\x11\x50\x81\x08\xe0\x83\x70\xa1\xef\x12\x88\xfe\x37\xa3\xe3\x02\xe8\x80\xfe\xc1\x21\x7a\xe8\x3b\x38\xb9\xf8\x02\x72\x2f\x5b\xf4\x63\xa9\x63\x00\xd0\x1e\xb6\x42\x0f\x6b\x52\xcc\x17\x37\x68\x42\x2c\x75\x3c\xbe\x11\x7a\xa8\xf6\xd3\xe7\x05\xa4\xb1\xd0\x07\xca\xfb\x0e\xa5\x6e\xb4\x7c\x5a\x74\x32\x53\x7e\x2c\xed\x33\xb6\x18\xc9\xbc\x5d\x69\xb9\x7a\x90\x03\x08\x29\x6d\x1f\xbf\xe9\x16\x7a\x8f\xf3\xad\x64\x63\x13\xa6\xeb\x44\x81\x36\xc3\x4b\xd9\xfb\x60\xd7\x53\x10\x68\x74\x8b\x09\xcc\x6b\xe1\xf1\x08\x73\x2e\xd6\xb8\x80\x83\xb8\x0a\x1e\x3c\x2c\x7f\x31\x99\x19\xf8\x21\xae\x6c\x75\x5c\x25\xe2\x45\x06\xff\xd8\x22\x38\xfc\xd6\x6b\x87\xb0\xf5\x60\x1d\xe8\x4e\x4e\x1b\x61\x5c\x00\xe3\xa3\x14\x21\xa6\x3d\xb4\xe4\x9f\xb1\xbb\x56\xe1\x97\xab\xb3\x05\x6c\xfd\xe2\xe8\x28\x0e\xa0\x5d\x59\x1f\x16\x55\x9e\xf1\x79\x94\xc3\xbe\xba\x14\xb1\x12\x2d\x63\xb2\x4b\xe1\x2f\xe2\xe3\x02\x52\x32\xff\x7e\x30\x6e\xf5\x5a\x87\xd1\xf8\x2c\x3e\x2e\x20\x2b\x52\xca\xca\xf2\x09\x45\x83\x1d\x66\x35\x12\xcb\x7c\xaf\x2b\x38\x61\xbc\x18\xe8\x3a\x57\xa0\xd4\xb8\xdf\x0a\xa8\x5b\x2b\xef\x41\x18\x35\x15\x02\xc1\xe9\xe5\x12\x1d\xaa\x91\xd0\x01\x77\x61\x1e\xf3\x48\x6a\x4e\x22\xab\x5f\x0a\xec\x50\x28\xb0\xa6\xdd\x47\xb1\xcc\x54\x9f\x97\xfc\x39\xa5\xef\xd0\x57\x28\xd4\x53\xf8\x34\x9f\xd0\xcf\xe3\x1c\x1e\xe7\xde\x59\xdb\xc2\x5a\xec\xc0\x61\x70\x7a\xfc\xa6\x78\x34\x0a\xc4\x13\x33\xbb\x41\x97\x40\x34\xbc\x1a\xed\x16\x40\xa7\x9e\xfe\x39\xa4\x36\x01\xdd\x46\xb4\x03\xee\x7e\xa4\xbf\x88\x09\xca\xde\xb9\x61\xb9\x7c\xe4\xb1\x12\x1e\x6a\xc4\xb8\x7d\x06\x94\x61\x68\xd3\x0c\x10\xe3\xc5\xdb\x8c\x4e\x15\xbc\xd7\x7e\xe0\xca\x80\xe8\xed\xfa\x07\xae\x79\x50\x16\x8c\x0d\xe0\xfb\xae\xb3\x2e\x40\xd8\x0d\x19\x89\x4e\xc7\xff\x17\xbb\x0b\x6b\xdb\x63\x19\x2f\x85\x53\x13\x91\xd4\x02\x82\xeb\x31\x2a\x4d\x98\x3d\x28\xac\xfb\xe5\x72\xba\x90\xa2\x00\x06\xf9\x2f\x2d\xc4\x20\xc9\x70\x3a\x0a\xad\xeb\x9c\x6d\xc0\x61\x3b\x5c\x09\xa3\x71\x02\xe3\xeb\xf1\xf3\x80\x33\x7e\x23\x5a\x8f\xc3\xab\x98\xd0\x02\x0a\x52\x90\x24\xf9\x77\x00\x00\x00\xff\xff\x5a\xf0\xec\x28\xc4\x0d\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 3524, mode: os.FileMode(420), modTime: time.Unix(1542881123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc9\x6e\xe3\x48\x0c\x86\xef\x7a\x0a\x81\x97\x5c\xbc\xd4\xbe\xbd\xc1\x20\x98\xd3\x0c\x90\x33\xab\xc8\x8a\x05\xdb\xb2\x5a\x4b\x12\x23\xc8\xbb\x37\xe4\x38\x9d\x6b\x1a\xba\x90\x04\x7f\xfe\xa4\xea\xe3\xf9\xc0\x23\x2f\xe7\xd4\xb4\x2d\x96\x72\x59\xfa\x79\x5a\xe3\xb6\x3d\x63\xd7\xa7\xf6\x16\xb6\xed\x91\xaf\xa9\x7d\x78\x07\x24\x1a\x79\x9a\x20\x41\x88\x59\x60\x70\x36\xe8\x62\x8c\x31\x58\x2a\x79\x99\x8d\xd3\x2c\x48\x17\x6b\x91\xa5\x91\x0a\x2d\x6c\xa0\x8c\xd7\x61\xbe\x40\x7a\x87\xd2\x0d\x07\x1e\x21\x01\xf2\xb4\x95\x2a\x6c\xcb\x3c\xae\x0d\xb7\xf2\xcc\x6f\x33\x24\x28\xde\xc7\x1a\xb4\x8f\xe4\xbd\xa0\xa8\x4a\x2d\x92\x88\x0c\x86\xaa\x25\x59\x14\x48\x25\x54\x85\x22\x2b\x94\x46\x48\xed\x05\x69\xa7\x45\xd5\xa1\x88\x12\xf0\xcf\xbc\x01\x47\x3c\x4f\xab\x6d\xf7\x02\x09\xb4\x2b\xd2\x05\xf6\x3a\xd7\x18\x44\x65\x6f\xb3\xf0\xca\xd7\x10\x05\x7a\x89\x04\x1f\x1b\x38\x52\x85\x04\xd3\x6d\x61\xb8\xa5\xdf\x43\xe8\x78\xe2\x1e\x92\x56\x1b\xe8\x21\x29\xa7\xa4\x31\x1b\x18\x20\xc9\x0d\x8c\x90\xc2\x06\x26\x3c\xad\x07\x10\xcb\xcc\xd2\xb1\x2e\x31\xc8\x68\x0c\x49\x2e\xa8\x72\xc8\xca\xb3\x61\xc7\x22\xdb\x5c\xb3\xd1\x99\x85\xf6\x0e\x2d\x85\x10\x62\x45\xe7\x23\xaa\x20\x95\x5a\x17\x39\x63\x59\x7f\x45\x91\x2a\xe4\x20\xad\xb5\x36\xa3\x64\x24\x5f\x90\xa3\x70\x82\x43\x30\x0a\x6b\xc1\xa0\xad\x23\xe1\x8c\xb5\x99\x22\x5a\x6f\x55\x46\x57\x4b\x11\x51\x71\x5d\x27\x75\x04\x09\x8c\x65\xe1\x04\xba\x2d\x29\xe4\xad\xd1\x39\x6c\xa3\x52\x75\x6b\x4c\x50\xd1\xc4\x48\xda\x13\x6c\xe0\x85\xc7\xa9\xbb\xac\x47\x7e\x3c\xdc\x1f\x7e\xc0\x69\x7a\xbd\x8c\x94\xda\x87\xaf\xd2\x9d\x81\xd4\xfe\x14\x81\xa6\xe9\x88\xfb\xb9\x9b\xaf\xff\x50\x6a\x41\xbc\x09\xf9\xfd\x41\xd3\xfc\x5a\x78\xe1\x15\xba\x7e\x39\x3f\x5d\xc6\x23\x8f\x53\x6a\x55\xd3\xb6\xaf\xb7\xe4\x09\xbb\xf9\xff\xee\xcc\xff\xfe\x97\x5a\xd9\x34\x47\xbe\xde\x08\x9d\xba\xe7\xbe\xeb\x9f\x3f\x61\x1d\x96\x7c\xea\xca\xe3\x4a\xe9\x6e\xb7\xdf\xed\xf6\x79\xe9\x4e\xb4\x1f\x79\xba\x2c\x63\xe1\x69\x7f\xef\x7e\xe4\xeb\x6e\x58\xf2\x6e\xe0\xf3\xa7\x6e\xec\x5e\x70\xe6\x9f\x09\x8f\xab\xf8\x26\xe4\xf9\x80\xcb\x7c\xf8\xa1\xf7\xbd\xfb\x2f\x8d\xbf\x54\x5f\xae\xbf\x03\x00\x00\xff\xff\xb0\x1c\xaf\x3f\xaa\x03\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 938, mode: os.FileMode(420), modTime: time.Unix(1540471826, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

