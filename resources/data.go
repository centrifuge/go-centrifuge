// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\xdb\x73\xdb\xba\x73\xc7\xdf\xf5\x57\x6c\x95\x97\xa4\x73\x22\x93\xe0\x5d\x33\x7d\xa0\x6e\x4e\xe2\xd8\x91\x2d\x5f\x4e\xfc\xd2\x01\xc9\xa5\x84\x88\x24\x18\x00\xd4\xc5\x7f\x7d\x07\x20\xa5\x28\x71\x9c\xdf\x34\xa7\xe7\xcc\x74\xda\xbc\x58\x83\xcb\x17\x8b\xdd\xcf\x2e\x40\xe4\x15\x4c\x30\xa7\x4d\xa1\x20\xc3\x0d\x16\xbc\x2e\xb1\x52\xa0\x50\xaa\x0a\x15\xd0\x25\x65\x95\x54\x20\x58\xb5\xc6\x64\xdf\x4b\xb1\x52\x82\xe5\xcd\x12\xaf\x50\x6d\xb9\x58\x0f\x41\x34\x52\x32\x5a\xad\x58\x51\xf4\x8c\x18\xab\x10\xd4\x0a\x21\xeb\x74\xab\x76\xa4\x04\xb5\xa2\x0a\xc6\x47\x05\x28\x29\xab\x94\xd6\xef\x1d\x86\x0c\x7b\x00\xaf\xe0\x23\x4f\x69\x61\x4c\x60\xd5\x12\x52\x5e\x29\x41\x53\x05\x34\xcb\x04\x4a\x89\x12\x2a\xc4\x0c\x14\x87\x04\x41\xa2\x82\x2d\x53\x2b\xc0\x6a\x03\x1b\x2a\x18\x4d\x0a\x94\x83\x1e\x1c\xe6\x6b\x49\x00\x96\x0d\xc1\x71\x1c\xf3\x1b\xd5\x0a\x05\x36\x65\xb7\x83\xf7\xd9\x10\x42\x27\x6c\xfb\x12\xce\x95\x54\x82\xd6\x73\x44\x21\xdb\xb9\x6f\xa1\x7f\xc6\x6a\xf7\xcc\x26\xc1\xc0\x1a\x58\x03\xfb\x4c\xa5\xf5\x99\x13\x12\x8b\x9c\xb1\x3a\x97\x67\xd7\xe5\xed\xf5\x2e\xd9\xae\x9b\xc7\xcf\x9f\x27\x79\xf3\x74\x9b\xec\xa6\xf1\x0d\xde\x5e\x8d\x3f\xf2\xa7\xfd\xde\xf3\xc2\xcd\x75\xb5\xbc\xdf\xcc\x2f\xbf\x7c\xfc\xbc\xee\xff\x0b\x51\xe7\x20\x7a\x9f\xfb\xd3\x2b\xbf\x5c\x7f\x7d\xc0\x2f\x0f\x17\x0f\xe4\xeb\xbc\xb1\xfd\x3f\xeb\xec\xdc\x59\x7f\xe0\xf6\xad\x53\xae\xe8\x6a\x3e\xf2\x16\xe8\x55\x76\x2b\x7a\x70\x55\x7c\xf0\x54\xbb\x01\xbd\x7d\xac\x14\x53\xfb\x19\x4d\x15\x17\xfb\x21\xf4\xfb\x5d\x0f\xad\xd2\x15\x17\x37\x58\x73\xc9\x7e\xe8\x62\xd5\x86\xb3\x14\xef\xaa\x9a\x6a\xf7\xf5\xfb\x3d\x13\x9d\x4b\xca\xaa\x9f\xb2\xd2\x05\x11\x5e\xdf\xb4\xb0\xbc\xe9\xc1\x29\x1c\xad\x2d\xaf\xe0\xaa\x29\x51\xb0\x14\xde\x4f\x80\xe7\x06\x94\x13\x24\x3a\x8d\x63\xcc\x3c\xbb\x9b\x35\x3a\x04\x06\x0a\x26\x95\x9e\x59\xf1\x0c\x9f\x33\x55\x0b\xbe\x61\xa6\x83\x1b\xed\x13\x03\x0e\x86\xfe\xcb\x40\x3b\xde\x80\xb8\xfe\xc0\x76\xdc\x41\xe4\xfd\x18\x6c\x9b\x4c\x9c\x0b\xce\x1f\xae\xe4\xa3\x7c\x08\x6e\x93\xf4\xd1\x0b\xaf\x02\xfb\xee\x7a\x71\xe1\x4d\xbe\x3c\x7e\x2d\x67\xeb\x77\xf3\x77\xdb\xdd\xec\xe2\x36\xde\xf3\xbb\xbb\x49\x98\xe5\xfd\x1f\xe5\xed\x28\x1c\xd8\xbe\x3d\xb0\x43\xeb\x25\xfd\x09\x12\xb9\x7d\x98\x3a\x39\x61\x1f\x92\x3b\xbc\x8e\xce\xef\xee\xae\x47\xef\xc6\xe2\xe1\x63\x32\x4a\x69\x74\x79\x7e\xf9\x35\x2f\x93\xf1\x52\x34\x49\xbf\x73\xd2\xb4\x23\xfb\x18\x8a\xf7\x13\x78\x0b\x5d\x38\x5e\x62\xdf\xed\x26\x7f\xa4\xda\x3f\x90\x61\x5d\xf0\x3d\x66\xb0\x28\xa9\x50\x30\xee\x90\x92\x90\x73\x61\x3c\xba\x64\x1b\xac\xbe\xf3\xe5\x73\xec\xe0\x45\xee\xac\x5d\x1e\x86\x56\x12\xfa\x96\x6d\x39\x49\xe6\x7a\xd4\x23\x8e\x17\xb8\x31\xe2\xd8\x0a\xc6\x6e\x44\x2c\xc7\xce\xdd\x20\xb4\x7f\x41\xa8\xb5\x8b\x48\x3c\x71\xdd\xd1\x28\x9c\x11\x67\xe2\x65\x36\x89\x70\x14\x12\xea\x59\x99\x13\xfa\x61\x32\x72\x13\x3b\xc5\x99\x3d\x7b\x89\x65\x6b\x97\xba\x71\x88\x23\x12\xe4\x23\x67\x4a\xc9\xd8\x8a\x3c\x6f\x16\x52\x6f\x64\xfb\xb6\x37\x22\x7e\x16\x7a\xb3\xf1\x08\x43\xec\xa8\xbf\xe0\x1b\xda\xee\xfa\x84\xd1\x04\x45\x45\x8b\x15\xb2\xe5\x4a\xc9\xdf\xe3\x9b\xfc\x45\xbe\xbf\x33\xe1\xbf\x47\x38\x19\x10\xc7\x1a\xd8\xb6\xff\x12\x82\x8b\x64\x97\x5c\x8c\x93\xc7\x55\xf4\xe1\x5e\xc9\xeb\xfd\xfd\x79\x76\x3b\x17\xd4\xbd\xa9\x17\xb1\xab\x92\x8d\xf4\x69\x65\xdb\x5f\xb6\xe7\x31\x79\x7a\x86\x38\x71\xdc\x41\x40\x06\x36\x09\x5e\x92\xbf\x2e\x49\xba\x28\xc5\x94\xd1\xc5\xe5\xbd\xbb\xbc\xdb\x04\x0f\xe7\xab\x7a\x79\xb3\xe5\xe1\x96\xcf\x16\xf2\xdd\xea\xf1\x3c\x39\x67\x0e\x8d\xc3\xdd\xaf\x09\x37\xc1\x79\x91\x6f\xf2\x37\x00\xfe\x0b\xbe\x6d\xc7\x27\xd3\x74\x94\x87\x7e\x10\x11\xd7\x99\x12\x37\x8f\xad\xe9\xd8\x25\x5e\x46\xd0\xb6\x62\x2b\x24\xc4\x49\x83\xc9\x2f\xf9\x0e\xec\xd0\x9a\x04\x81\x63\x5b\x19\xa6\x61\x3c\x22\x61\x4c\x43\x8b\x4c\x53\x2b\x9a\xe5\x31\x99\xcc\x7c\x17\x23\x2b\x48\x5f\xe6\xdb\x0e\x1d\x3b\xb0\xdc\xd0\xf6\xdd\x30\xc7\x3c\x47\x37\x72\xad\x99\x33\x89\xe3\xcc\xa1\x41\x92\x26\x89\x95\x7a\x71\x3c\xeb\xf8\xbe\xe1\xb5\x54\xf8\x8c\xf0\x8c\x2f\x6b\xaa\xd2\xd5\xef\xc1\xed\xfc\x45\xb8\x0f\xab\xc3\xeb\xdb\x4f\x93\x4f\x90\x0a\xa4\x0a\x41\x74\xa6\x6a\xc0\x8d\xce\x9b\xff\x73\x15\xbd\xf5\xc0\x4b\xc4\x3b\xff\x2c\xf0\x56\xe6\x44\xf6\x34\x20\x0e\xf1\xc6\x98\x8d\x5d\x7b\xea\x86\x96\xe7\x4c\x83\x80\x84\x21\x0d\xa3\x19\x99\x3a\xb6\x6d\x7b\xbf\x04\x9e\x8c\x43\x6b\x66\x4f\x68\x3e\xa1\x01\x8d\x27\x98\x90\xb1\x1d\x78\x99\x3b\x72\x9d\x38\xf4\x42\x37\x70\xa6\xb6\x1d\xd8\xce\xcb\xc0\xbb\x51\x82\x91\x63\x59\x63\xc7\x1f\xe7\x1e\x71\xc2\x64\xe6\x47\x53\x77\xec\x46\x9e\x6f\xcd\x66\x61\x1e\xcc\xfc\x80\x4c\xdd\x93\x6b\x8c\xbe\xb5\x9c\x02\x0f\x93\x4f\x70\xf5\xe9\x16\xee\x16\xd3\x7f\xeb\x01\x60\x99\x50\x91\xd2\x0c\x05\xd7\xa3\x7e\x2b\x07\x6c\xeb\x45\x38\x9f\xf3\x43\xc8\xc0\xb6\x5f\xac\x97\xf1\xd2\x99\xa6\xb1\x12\x9f\xef\xc7\xbb\xed\x93\xbf\xf6\xe5\x6d\xc4\x1e\x17\x37\x4f\xea\x29\x9a\x04\xfb\xbb\xa7\x7a\x34\xbf\x99\xce\x9e\xc4\x1d\xbf\xef\x3f\x5f\xc1\x14\x7c\x62\x0f\x6c\xfb\xd9\x05\xf6\xb0\xc2\xc5\xf9\x96\xed\xfe\xc4\xaa\xf9\x33\xbe\xff\xba\xfe\x70\x51\x56\xef\x16\xf1\x87\xc9\x97\xa7\x3c\xc0\xf3\x4b\xee\x2b\xc1\xd9\xf2\x71\x57\x06\xb1\x77\xf3\x6b\x42\xcb\xd6\xbb\x2f\x11\x6a\xff\xb3\x84\xc6\x33\xd7\xf3\x53\xdb\x77\x42\x9f\xfa\x6e\x9e\xb9\x33\x37\xf1\x23\x9a\xdb\x0e\x0d\xfd\x49\x6e\x8d\x3c\x9f\xc4\xd4\xb2\x7e\x49\xa8\xef\x04\xa3\x70\xec\x4c\x48\x1c\x3b\xe3\x94\x58\xfe\x24\x72\x3d\x3b\x4a\x3c\x37\x8c\x88\x15\x46\x69\x34\xf5\x83\x28\xb2\x5e\x26\x74\xe4\xa1\x4b\x9c\x6c\x9c\x06\xae\x95\x8c\xc6\xa1\x95\x47\x96\x6f\x3b\x0e\xda\x9e\x6f\xd9\x79\x14\x5a\x51\x14\x3a\x9e\xff\x03\xa1\xdf\x90\x3a\x01\xf2\x7f\x1a\xc6\xbf\x1b\xc5\xff\x07\xf1\x7f\x27\x88\xaf\x60\x42\x15\x85\x85\xe2\x82\x2e\xb1\x27\xdb\xbf\xed\x77\xfa\x9c\xaa\x95\xf1\x4c\xa1\xbf\x06\x27\x23\xc8\x59\x81\x3d\x80\x9a\xaa\xd5\x10\xce\x54\x59\x9f\x7d\x7b\x2f\xf8\xcf\x8c\x2a\x3a\x30\x23\xb3\x44\xeb\x8e\x79\x95\xb3\x65\x23\xa8\x62\xbc\x3a\x2e\x90\x9a\xd6\xc5\xef\x2f\xd3\x0a\x3c\x5b\x2d\x4e\x53\xde\x54\x4a\xc2\x1a\xf7\xd0\xed\xa2\x47\xbb\x46\xbd\xce\x1a\xf7\xba\x19\x3b\xc5\x43\x97\x9e\xfb\xbe\x52\x28\x72\x9a\x22\x6c\x35\x40\x06\x84\x78\xfe\x1e\x68\x95\xc1\x9c\xcc\x61\x81\x62\x83\xc2\xdc\x6d\xb0\xd2\x97\x97\x9e\xbe\x96\xbc\xe3\x52\x55\xb4\xc4\x21\x1c\xbf\xf1\x7b\xaf\x60\xce\x85\xea\x64\xb4\xc4\xcf\xa7\xea\x41\x43\x08\xad\x90\xe8\xe5\x75\x96\xbe\x55\xfc\x6d\x8d\x28\x20\x3d\xf5\x9a\xec\xd5\xa4\x6e\x9d\xb4\xa8\x31\x65\xf9\x1e\xa6\x3b\x65\xbe\x08\xe0\xfd\xfc\xc4\x5a\x2d\x0a\x29\xad\x20\x41\x10\x48\xd3\x15\x66\x40\x15\xb0\x1c\x12\x5c\xb1\x2a\x83\xab\xf8\x56\xcb\x60\x37\xfb\xfd\x7c\x08\xdb\xc1\x6e\xb0\x1f\x3c\xb5\x21\xd0\x56\x37\x12\xb3\x63\x22\xe8\x7d\x17\x74\x8f\x42\x07\xc2\x98\x6b\xd2\xd8\x8c\xbe\x65\x25\xf2\xc6\x6c\xb3\x02\x5e\x63\xd5\x3d\xe3\x54\x98\x1a\xab\xf5\xf5\x4e\x6f\x46\xf6\xe0\xd0\xdc\x4d\x19\x42\xdf\xb1\x64\xdf\xa8\x94\xac\x62\x65\x53\x42\x86\x05\xdd\x9b\x75\x71\x83\x62\x0f\x35\xa9\x41\xa0\xac\x79\x25\x51\x2b\xd1\x0d\x67\x19\x28\x56\xea\x55\xa8\x52\x34\x5d\x4b\x23\x40\xb3\x2f\x8d\x54\x90\x50\x6d\x37\xaf\x60\xc5\xa5\xd2\x33\x79\x23\x52\x94\xf0\x7a\xb1\x98\xfc\x01\xe3\xf9\xdd\x1f\x90\x72\x81\x12\x06\x83\xc1\x9b\xee\xfd\x89\xaf\x81\x55\x50\xf0\xa5\xc9\xfc\x21\xf4\xb5\x7d\xda\x56\xd9\x94\x98\x41\xb2\xd7\xdb\x6a\x63\xd0\xd7\x5e\xdc\xfd\xc7\xeb\x0d\x2d\x1a\xbc\x41\x9a\xc1\xbf\x03\x79\x03\x4c\x42\x81\xd2\x5c\x71\x2b\x30\x7d\x90\x60\xc1\xb7\x7f\x68\xef\x55\x90\xae\x68\xb5\xc4\xe3\x3e\x26\x66\x8f\x8a\xc3\xae\x07\xdf\x37\x0e\xa1\xef\x59\x56\x29\x4d\x2a\x5e\x37\xd8\xe0\x0f\x08\x18\xcf\x50\xb9\xaf\xd2\x95\xe0\x15\x6f\xa4\xbe\x45\xa7\x28\x25\xab\x96\xbd\xaf\x7a\x42\x0b\x48\xfb\x30\x27\x5b\x1c\x9a\x32\x41\xa1\x0f\x0c\x5d\x07\x51\xc8\xb3\x6e\x6b\xa2\xbb\x93\x6f\x59\x51\x68\x56\x68\x51\xf0\x94\xaa\x96\x16\xa9\xa8\x50\x4d\xdd\x03\x3d\xff\xa1\x9d\xa8\xcf\x14\xcb\xe8\xcf\x04\xa2\x84\xa6\xd6\x1e\x85\x74\x9f\x16\x28\x5b\x00\xda\x25\xb4\x43\xb6\x94\x99\x17\xbd\x2e\x96\x3a\xbb\xa0\xeb\x7e\xa0\xcc\x30\x70\xb9\x68\x6b\xb2\x39\xd8\x3a\x1b\x05\x2a\xc1\x50\x1a\x63\xb6\x1d\x82\x14\x14\x95\xfa\x60\xd3\x7f\x6e\xda\x01\xe6\x7c\xeb\x9d\x1c\x04\xd2\xe4\x04\x4b\xbf\xf7\x58\xef\x70\x0c\x74\x89\x83\x05\xea\x0a\xbf\x5d\xb1\x74\x75\x3c\x22\xa0\xcb\x7f\x1d\x93\x46\xe2\xe1\x6c\xe5\xda\x83\xdd\x57\x4a\xa6\x11\xd1\x8d\x69\x23\x15\x2f\xbb\x45\x0e\xc5\xa9\x7b\xfc\xec\xca\xce\x95\xa9\x03\x7d\x7d\x18\xf5\x8f\x4f\x9c\xa6\xee\x75\xc2\xc7\x75\xd3\x82\x61\xa5\xda\x84\x7d\xbd\xd5\x84\x7c\x6d\x98\x40\xd8\x4a\xe0\x02\x58\x9d\x76\xef\x9e\x34\x29\x0c\xfd\xa9\xf9\x3e\x6a\xbd\xa9\xe9\xd5\x13\xef\x6e\x3e\x0e\x61\xa5\x54\x3d\x3c\x3b\xd3\xf1\x2b\x34\xf9\xc3\xc8\x73\xbd\x36\xb1\xe8\xce\x24\xd6\xc1\x9f\x4b\xaa\xf7\xc4\x52\xa3\x57\x77\xb9\x46\x41\x09\x5a\x49\x6a\x32\x56\xef\x74\x8b\xcc\xcc\x26\x16\x9c\x6f\x91\x41\xc5\xb7\x3d\xd0\x5a\xe7\x54\xce\xf5\xec\x21\x10\xeb\xf8\xcf\x0c\x3d\xa7\x12\x0a\x56\xb2\xee\xfc\xcc\x58\x9e\xa3\xd0\xbb\x3b\x46\xe8\x98\x45\x9a\x84\x25\x95\x1f\xcd\xe8\xc3\x93\xed\xd8\x7c\xef\x19\xc4\x3a\x4d\xdd\x1a\x67\xd9\x05\xee\x87\xe0\x9c\x36\xde\xe0\x86\xaf\xd1\xb4\x7b\xde\xa1\xb9\x3d\x3d\xc7\xbc\x2c\x99\x2e\xa7\x3f\xb4\xcf\x05\x1e\xba\xec\x6f\x52\x55\xae\x2e\x59\xa5\x86\x10\x7d\xd7\x76\xab\x9d\x91\xa3\x98\x09\x5e\x0e\xc1\xf6\x8e\x7b\x3c\xd4\x3a\xc5\x0d\xde\xad\xef\xaa\x6f\xf1\x3c\xf5\x62\x17\xb9\x2c\x6b\x5f\xaf\x29\x24\x05\x4f\xd7\xe6\x18\x69\x03\x08\x4a\xb0\xe5\x12\x05\x66\x6d\x65\x54\xb8\x53\x87\xcc\x68\xab\xa3\x6f\x1d\xca\xe3\xcf\x16\x16\xba\xfc\xf0\xaa\x38\x29\x4f\xf2\xf8\x84\x7f\x30\xe9\x9b\xb4\xae\x56\xdf\xcb\xdb\x5e\xa7\x7e\xa5\xf9\x3b\xb5\xbd\xe6\xbc\xd0\xd1\x3e\x66\xa3\xe2\x20\xb1\xca\x7e\x00\x85\x6f\xcc\x89\x50\xd2\xdd\x31\x29\x49\xe7\xa9\x9f\x4b\x32\x7d\xb6\x6e\x68\x61\x74\xf7\x6d\xc5\xa0\xda\xc0\xb4\x11\x86\x95\xd3\x19\x2b\x2a\x21\x41\xac\x20\x43\x85\xa9\x32\x6e\x3a\x08\xe8\xf5\x74\xb5\x24\x6d\xa9\xa4\xd5\x1e\x32\x4c\x9a\xe5\xb2\x3b\x7c\x74\x6e\x9a\xb2\xb6\xe4\xa0\x1d\xd1\x33\xbd\x6d\x0d\xc0\xca\xa4\x93\x69\xd1\x55\x5f\xcf\xe9\x81\xfe\x35\x84\x9c\x16\x12\xcd\xa8\xba\x16\x3c\x6f\x49\x3e\x08\xeb\xc3\x4f\xb7\x1e\x86\xf5\x5a\xb4\xba\xff\x76\xa8\x05\xa6\x1d\x61\x4a\x34\xd8\xfb\xaf\x00\x00\x00\xff\xff\x0e\x7f\x78\xe1\x6b\x19\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6507, mode: os.FileMode(420), modTime: time.Unix(1563019623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1554467633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

