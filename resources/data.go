// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\x59\x73\xdb\x3a\xb2\xc7\xdf\xf5\x29\xfa\x2a\x2f\xc9\xad\x13\x99\x04\x77\x55\xdd\x07\x6a\x73\x12\xc7\x8e\x6c\x79\x39\xf1\xcb\x2d\x90\x6c\x4a\x88\x48\x82\x01\x40\x2d\xfe\xf4\x53\x00\x29\x45\x59\x9c\x33\x95\x33\xe7\x54\x4d\xcd\xe4\xc5\x2a\x2c\x7f\x34\xba\x7f\xdd\x00\x91\x17\x30\xc1\x9c\x36\x85\x82\x0c\x37\x58\xf0\xba\xc4\x4a\x81\x42\xa9\x2a\x54\x40\x97\x94\x55\x52\x81\x60\xd5\x1a\x93\x7d\x2f\xc5\x4a\x09\x96\x37\x4b\xbc\x42\xb5\xe5\x62\x3d\x04\xd1\x48\xc9\x68\xb5\x62\x45\xd1\x33\x62\xac\x42\x50\x2b\x84\xac\xd3\xad\xda\x91\x12\xd4\x8a\x2a\x18\x1f\x15\xa0\xa4\xac\x52\x5a\xbf\x77\x18\x32\xec\x01\xbc\x80\xf7\x3c\xa5\x85\x31\x81\x55\x4b\x48\x79\xa5\x04\x4d\x15\xd0\x2c\x13\x28\x25\x4a\xa8\x10\x33\x50\x1c\x12\x04\x89\x0a\xb6\x4c\xad\x00\xab\x0d\x6c\xa8\x60\x34\x29\x50\x0e\x7a\x70\x98\xaf\x25\x01\x58\x36\x04\xc7\x71\xcc\x6f\x54\x2b\x14\xd8\x94\xdd\x0e\xde\x66\x43\x08\x9d\xb0\xed\x4b\x38\x57\x52\x09\x5a\xcf\x11\x85\x6c\xe7\xbe\x86\xfe\x19\xab\xdd\x33\x9b\x04\x03\x6b\x60\x0d\xec\x33\x95\xd6\x67\x4e\x48\x2c\x72\xc6\xea\x5c\x9e\x5d\x97\xb7\xd7\xbb\x64\xbb\x6e\x1e\x3f\x7e\x9c\xe4\xcd\xd3\x6d\xb2\x9b\xc6\x37\x78\x7b\x35\x7e\xcf\x9f\xf6\x7b\xcf\x0b\x37\xd7\xd5\xf2\x7e\x33\xbf\xfc\xf4\xfe\xe3\xba\xff\x07\xa2\xce\x41\xf4\x3e\xf7\xa7\x57\x7e\xb9\xfe\xfc\x80\x9f\x1e\x2e\x1e\xc8\xe7\x79\x63\xfb\xbf\xd7\xd9\xb9\xb3\x7e\xc7\xed\x5b\xa7\x5c\xd1\xd5\x7c\xe4\x2d\xd0\xab\xec\x56\xf4\xe0\xaa\xf8\xe0\xa9\x76\x03\x7a\xfb\x58\x29\xa6\xf6\x33\x9a\x2a\x2e\xf6\x43\xe8\xf7\xbb\x1e\x5a\xa5\x2b\x2e\x6e\xb0\xe6\x92\x7d\xd3\xc5\xaa\x0d\x67\x29\xde\x55\x35\xd5\xee\xeb\xf7\x7b\x26\x3a\x97\x94\x55\x3f\x64\xa5\x0b\x22\xbc\xbc\x69\x61\x79\xd5\x83\x53\x38\x5a\x5b\x5e\xc0\x55\x53\xa2\x60\x29\xbc\x9d\x00\xcf\x0d\x28\x27\x48\x74\x1a\xc7\x98\x79\x76\x37\x6b\x74\x08\x0c\x14\x4c\x2a\x3d\xb3\xe2\x19\x7e\xcf\x54\x2d\xf8\x86\x99\x0e\x6e\xb4\x4f\x0c\x38\x18\xfa\x87\x81\x76\xbc\x01\x21\xde\x80\x58\xd6\xc0\x25\xdf\x06\xdb\x26\x13\xe7\x82\xf3\x87\x2b\xf9\x28\x1f\x82\xdb\x24\x7d\xf4\xc2\xab\xc0\xbe\xbb\x5e\x5c\x78\x93\x4f\x8f\x9f\xcb\xd9\xfa\xcd\xfc\xcd\x76\x37\xbb\xb8\x8d\xf7\xfc\xee\x6e\x12\x66\x79\xff\x47\xf2\xa1\x3f\x20\xb6\xf5\x9c\xfc\x04\x89\xdc\x3e\x4c\x9d\x9c\xb0\x77\xc9\x1d\x5e\x47\xe7\x77\x77\xd7\xa3\x37\x63\xf1\xf0\x3e\x19\xa5\x34\xba\x3c\xbf\xfc\x9c\x97\xc9\x78\x29\x9a\xa4\xdf\xf9\x68\xda\x81\x7d\x8c\xc4\xdb\x09\xbc\x86\x2e\x1a\xcf\xa1\xef\x76\x93\xdf\x53\xed\x1e\xc8\xb0\x2e\xf8\x1e\x33\x58\x94\x54\x28\x18\x77\x44\x49\xc8\xb9\x30\x0e\x5d\xb2\x0d\x56\x5f\xb9\xf2\x7b\xea\xe0\x59\xec\xac\x5d\x1e\x86\x56\x12\xfa\x96\x6d\x39\x49\xe6\x7a\xd4\x23\x8e\x17\xb8\x31\xe2\xd8\x0a\xc6\x6e\x44\x2c\xc7\xce\xdd\x20\xb4\x7f\x02\xa8\xb5\x8b\x48\x3c\x71\xdd\xd1\x28\x9c\x11\x67\xe2\x65\x36\x89\x70\x14\x12\xea\x59\x99\x13\xfa\x61\x32\x72\x13\x3b\xc5\x99\x3d\x7b\x0e\x65\x6b\x97\xba\x71\x88\x23\x12\xe4\x23\x67\x4a\xc9\xd8\x8a\x3c\x6f\x16\x52\x6f\x64\xfb\xb6\x37\x22\x7e\x16\x7a\xb3\xf1\x08\x43\xec\xa0\xbf\xe0\x1b\xda\xee\xfa\x04\xd1\x04\x45\x45\x8b\x15\xb2\xe5\x4a\xc9\x5f\xc3\x9b\xfc\x49\xbc\xbf\x32\xe1\x9f\x06\xdc\xb6\xdc\x81\xed\xb9\x03\x3b\x1c\x78\xdf\x55\xb3\x03\x81\x8b\x64\x97\x5c\x8c\x93\xc7\x55\xf4\xee\x5e\xc9\xeb\xfd\xfd\x79\x76\x3b\x17\xd4\xbd\xa9\x17\xb1\xab\x92\x8d\xf4\x69\x65\xdb\x9f\xb6\xe7\x31\x79\xea\xff\x40\xde\x1b\xd8\xa1\x37\x20\x4e\xf0\xdc\x02\xd7\x25\x49\x17\xa5\x98\x32\xba\xb8\xbc\x77\x97\x77\x9b\xe0\xe1\x7c\x55\x2f\x6f\xb6\x3c\xdc\xf2\xd9\x42\xbe\x59\x3d\x9e\x27\xe7\xcc\xa1\x71\xb8\xfb\x39\xe2\x26\x3a\xcf\x02\x4e\xfe\x02\xc2\x7f\x02\xb8\xed\xf8\x64\x9a\x8e\xf2\xd0\x0f\x22\xe2\x3a\x53\xe2\xe6\xb1\x35\x1d\xbb\xc4\xcb\x08\xda\x56\x6c\x85\x84\x38\x69\x30\xf9\x29\xe0\x81\x1d\x5a\x93\x20\x70\x6c\x2b\xc3\x34\x8c\x47\x24\x8c\x69\x68\x91\x69\x6a\x45\xb3\x3c\x26\x93\x99\xef\x62\x64\x05\xe9\xf3\x80\xdb\xa1\x63\x07\x96\x1b\xda\xbe\x1b\xe6\x98\xe7\xe8\x46\xae\x35\x73\x26\x71\x9c\x39\x34\x48\xd2\x24\xb1\x52\x2f\x8e\x67\x1d\xe0\x37\xbc\x96\x0a\xbf\x43\x3c\xe3\xcb\x9a\xaa\x74\xf5\x6b\x74\x3b\x7f\x92\xee\xc3\xea\xf0\xf2\xf6\xc3\xe4\x03\xa4\x02\xa9\x42\x10\x9d\xa9\x9a\x70\xa3\xf3\xea\x3f\xad\xa2\xb7\x0e\x78\x0e\x78\xe7\xef\xe5\xdd\xca\x9c\xc8\x9e\x06\xc4\x21\xde\x18\xb3\xb1\x6b\x4f\xdd\xd0\xf2\x9c\x69\x10\x90\x30\xa4\x61\x34\x23\x53\xc7\xb6\x6d\xef\xa7\xbc\x93\x71\x68\xcd\xec\x09\xcd\x27\x34\xa0\xf1\x04\x13\x32\xb6\x03\x2f\x73\x47\xae\x13\x87\x5e\xe8\x06\xce\xd4\xb6\x03\xdb\x79\x9e\x77\x37\x4a\x30\x72\x2c\x6b\xec\xf8\xe3\xdc\x23\x4e\x98\xcc\xfc\x68\xea\x8e\xdd\xc8\xf3\xad\xd9\x2c\xcc\x83\x99\x1f\x90\xa9\x7b\x72\x8b\xd1\x97\x96\x53\xde\x61\xf2\x01\xae\x3e\xdc\xc2\xdd\x62\xfa\x3f\x3d\x00\x2c\x13\x2a\x52\x9a\xa1\xe0\x7a\xd4\x2f\xa5\x80\x6d\x3d\xcb\xe6\x57\xf8\xd8\x51\x38\xb0\x09\x19\xd8\xf6\xb3\xe5\x32\x5e\x3a\xd3\x34\x56\xe2\xe3\xfd\x78\xb7\x7d\xf2\xd7\xbe\xbc\x8d\xd8\xe3\xe2\xe6\x49\x3d\x45\x93\x60\x7f\xf7\x54\x8f\xe6\x37\xd3\xd9\x93\xb8\xe3\xf7\xfd\xef\x57\x20\x2e\x19\x10\x62\x0f\x6c\xfb\xd9\x8a\x7f\x71\xbe\x65\xbb\xdf\xb1\x6a\x7e\x8f\xef\x3f\xaf\xdf\x5d\x94\xd5\x9b\x45\xfc\x6e\xf2\xe9\x29\x0f\xf0\xfc\x92\xfb\x4a\x70\xb6\x7c\xdc\x95\x41\xec\xdd\xfc\x9c\xd0\xb2\xf5\xee\x73\x84\xda\x7f\x2f\xa1\xf1\xcc\xf5\xfc\xd4\xf6\x9d\xd0\xa7\xbe\x9b\x67\xee\xcc\x4d\xfc\x88\xe6\xb6\x43\x43\x7f\x92\x5b\x23\xcf\x27\x31\xb5\xac\x9f\x12\xea\x3b\xc1\x28\x1c\x3b\x13\x12\xc7\xce\x38\x25\x96\x3f\x89\x5c\xcf\x8e\x12\xcf\x0d\x23\x62\x85\x51\x1a\x4d\xfd\x20\x8a\xac\xe7\x09\x1d\x79\xe8\x12\x27\x1b\xa7\x81\x6b\x25\xa3\x71\x68\xe5\x91\xe5\xdb\x8e\x83\xb6\xe7\x5b\x76\x1e\x85\x56\x14\x85\x8e\xe7\x7f\x43\xe8\x17\xa4\x4e\x80\xfc\x57\xc3\xf8\x57\xa3\xf8\x5f\x10\xff\x3d\x41\x7c\x01\x13\xaa\x28\x2c\x14\x17\x74\x89\x3d\xd9\xfe\x6d\x3f\xd3\xe7\x54\xad\x8c\x67\x0a\xfd\x31\x38\x19\x41\xce\x0a\xec\x01\xd4\x54\xad\x86\x70\xa6\xca\xfa\xec\xcb\x73\xc1\xff\x67\x54\xd1\x81\x19\x99\x25\x5a\x77\xcc\xab\x9c\x2d\x1b\x41\x15\xe3\xd5\x71\x81\xd4\xb4\x2e\x7e\x7d\x99\x56\xe0\xbb\xd5\xe2\x34\xe5\x4d\xa5\x24\xac\x71\x0f\xdd\x2e\x7a\xb4\x6b\xd4\xeb\xac\x71\xaf\x9b\xb1\x53\x3c\x74\xe9\xb9\x6f\x2b\x85\x22\xa7\x29\xc2\x56\x03\x64\x40\x88\xe7\x6f\x81\x56\x19\xcc\xc9\x1c\x16\x28\x36\x28\xcc\xd5\x06\x2b\x7d\x77\xe9\xe9\x5b\xc9\x1b\x2e\x55\x45\x4b\x1c\xc2\xf1\x13\xbf\xf7\x02\xe6\x5c\xa8\x4e\x46\x4b\xfc\x78\xaa\x1e\x34\x84\xd0\x0a\x89\x5e\x5e\x67\xe9\x6b\xc5\x5f\xd7\x88\x02\xd2\x53\xaf\xc9\x5e\x4d\xea\xd6\x49\x8b\x1a\x53\x96\xef\x61\xba\x53\xe6\x8b\x00\xde\xce\x4f\xac\xd5\xa2\x90\xd2\x0a\x12\x04\x81\x34\x5d\x61\x06\x54\x01\xcb\x21\xc1\x15\xab\x32\xb8\x8a\x6f\xb5\x0c\x76\xb3\xdf\xce\x87\xb0\x1d\xec\x06\xfb\xc1\x53\x1b\x02\x6d\x75\x23\x31\x3b\x26\x82\xde\x77\x41\xf7\x28\x74\x20\x8c\xb9\x26\x8d\xcd\xe8\x5b\x56\x22\x6f\xcc\x36\x2b\xe0\x35\x56\xdd\x2b\x4e\x85\xa9\xb1\x5a\xdf\xee\xf4\x66\x64\x0f\x0e\xcd\xdd\x94\x21\xf4\x1d\x4b\xf6\x8d\x4a\xc9\x2a\x56\x36\x25\x64\x58\xd0\xbd\x59\x17\x37\x28\xf6\x50\x93\x1a\x04\xca\x9a\x57\x12\xb5\x12\xdd\x70\x96\x81\x62\xa5\x5e\x85\x2a\x45\xd3\xb5\x34\x02\x34\xfb\xd4\x48\x05\x09\xd5\x76\xf3\x0a\x56\x5c\x2a\x3d\x93\x37\x22\x45\x09\x2f\x17\x8b\xc9\x6f\x30\x9e\xdf\xfd\x06\x29\x17\x28\x61\x30\x18\xbc\xea\x9e\x9f\xf8\x1a\x58\x05\x05\x5f\x9a\xcc\x1f\x42\x5f\xdb\xa7\x6d\x95\x4d\x89\x19\x24\x7b\xbd\xad\x36\x06\x7d\xed\xc5\xdd\xff\xbd\xdc\xd0\xa2\xc1\x1b\xa4\x19\xfc\x2f\x90\x57\xc0\x24\x14\x28\xcd\x0d\xb7\x02\xd3\x07\x09\x16\x7c\xfb\x9b\xf6\x5e\x05\xe9\x8a\x56\x4b\x3c\xee\x63\x62\xf6\xa8\x38\xec\x7a\xf0\x75\xe3\x10\xfa\x9e\x65\x95\xd2\xa4\xe2\x75\x83\x0d\x7e\x83\x80\xf1\x0c\x95\xfb\x2a\x5d\x09\x5e\xf1\x46\xea\x4b\x74\x8a\x52\xb2\x6a\xd9\xfb\xac\x27\xb4\x80\xb4\xef\x72\xb2\xc5\xa1\x29\x13\x14\xfa\xc0\xd0\x75\x10\x85\x3c\xeb\xb6\x26\xba\x2b\xf9\x96\x15\x85\x66\x85\x16\x05\x4f\xa9\x6a\x69\x91\x8a\x0a\xd5\xd4\x3d\xd0\xf3\x1f\xda\x89\xfa\x4c\xb1\x8c\xfe\x4c\x20\x4a\x68\x6a\xed\x51\x48\xf7\x69\x81\xb2\x05\xa0\x5d\x42\x3b\x64\x4b\x99\x79\xd0\xeb\x62\xa9\xb3\x0b\xba\xee\x07\xca\x0c\x03\x97\x8b\xb6\x26\x9b\x83\xad\xb3\x51\xa0\x12\x0c\xa5\x31\x66\xdb\x21\x48\x41\x51\xa9\x0f\x36\xfd\xe7\xa6\x1d\x60\xce\xb7\xde\xc9\x41\x20\x4d\x4e\xb0\xf4\x6b\x8f\xf5\x0e\xc7\x40\x97\x38\x58\xa0\xae\xf0\xdb\x15\x4b\x57\xc7\x23\x02\xba\xfc\xd7\x31\x69\x24\x1e\xce\x56\xae\x3d\xd8\x7d\xa4\x64\x1a\x11\xdd\x98\x36\x52\xf1\xb2\x5b\xe4\x50\x9c\xba\xb7\xcf\xae\xec\x5c\x99\x3a\xd0\xd7\x87\x51\xff\xf8\xc2\x69\xea\x5e\x27\x7c\x5c\x37\x2d\x18\x56\xaa\x4d\xd8\x97\x5b\x4d\xc8\xe7\x86\x09\x84\xad\x04\x2e\x80\xd5\x69\xf7\xec\x49\x93\xc2\xd0\x9f\x9a\xcf\xa3\xd6\x9b\x9a\x5e\x3d\xf1\xee\xe6\xfd\x10\x56\x4a\xd5\xc3\xb3\x33\x1d\xbf\x42\x93\x3f\x8c\x3c\xd7\x6b\x13\x8b\xee\x4c\x62\x1d\xfc\xb9\xa4\x7a\x4f\x2c\x35\x7a\x75\x97\x6b\x14\x94\xa0\x95\xa4\x26\x63\xf5\x4e\xb7\xc8\xcc\x6c\x62\xc1\xf9\x16\x19\x54\x7c\xdb\x03\xad\x75\x4e\xe5\x5c\xcf\x1e\x02\xb1\x8e\xff\xcc\xd0\x73\x2a\xa1\x60\x25\xeb\xce\xcf\x8c\xe5\x39\x0a\xbd\xbb\x63\x84\x8e\x59\xa4\x49\x58\x52\xf9\xde\x8c\x3e\xbc\xd8\x8e\xcd\xe7\x9e\x41\xac\xd3\xd4\xad\x71\x96\x5d\xe0\x7e\x08\xce\x69\xe3\x0d\x6e\xf8\x1a\x4d\xbb\xe7\x1d\x9a\xdb\xd3\x73\xcc\xcb\x92\xe9\x72\xfa\x4d\xfb\x5c\xe0\xa1\xcb\xfe\x22\x55\xe5\xea\x92\x55\x6a\x08\xd1\x97\x7d\x1c\xea\x99\xe2\x06\xe1\xd6\x3f\xd5\x97\x98\x9d\x7a\xaa\x8b\x4e\x96\xb5\x0f\xd4\x14\x92\x82\xa7\x6b\x73\x54\xb4\x41\x02\x25\xd8\x72\x89\x02\xb3\xb6\xfa\x29\xdc\xa9\x03\xfd\x6d\x05\xf4\xad\x43\x09\xfc\xd1\xc2\x42\x97\x18\x5e\x15\x27\x25\x48\x1e\x5f\xe9\x0f\x26\x7d\x91\xd6\x15\xe9\x6b\x79\xdb\xeb\xd4\xaf\x34\x63\xa7\xb6\xd7\x9c\x17\x3a\xa2\xc7\x8c\x53\x1c\x24\x56\xd9\x37\x30\xf0\x8d\xa9\xfa\x25\xdd\x1d\x13\x8f\x74\x9e\xfa\xb1\x24\xd3\xe7\xe7\x86\x16\x46\x77\xdf\x56\x05\xaa\x0d\x4c\x1b\x61\x78\x38\x9d\xb1\xa2\x12\x12\xc4\x0a\x32\x54\x98\x2a\xe3\xa6\x83\x80\x5e\x4f\x57\x44\xd2\x96\x43\x5a\xed\x21\xc3\xa4\x59\x2e\xbb\x03\x46\xe7\x9f\x29\x5d\x4b\x0e\xda\x11\x3d\xd3\xdb\xe6\x39\x56\x26\x65\x4c\x8b\xae\xec\x7a\x4e\x0f\xf4\xaf\x21\xe4\xb4\x90\x68\x46\xd5\xb5\xe0\x79\x4b\xeb\x41\x58\x1f\x70\xba\xf5\x30\xac\xd7\xe2\xd3\xfd\xcf\x42\x2d\x30\xed\x28\xea\x9b\xfe\x7e\xef\x1f\x01\x00\x00\xff\xff\x37\x83\x19\xcd\x51\x19\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6481, mode: os.FileMode(420), modTime: time.Unix(1560759676, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1554467633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

