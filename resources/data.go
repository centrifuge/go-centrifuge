// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5b\x6f\xdb\x3a\xd6\x7d\xf7\xaf\xd8\x70\x5e\xbe\x0f\x18\x39\xba\x5f\x0c\x1c\x0c\xec\x5c\xda\x9e\xa6\x19\x27\x71\x4e\x4e\xf3\x32\xa5\xc8\x2d\x8b\x8d\x4c\xaa\x24\xe5\x4b\x7f\xfd\x80\x94\x9c\x26\x4d\x93\x33\x83\xc1\xf4\xa5\x32\xc9\xbd\xb9\x2f\x6b\x2d\x92\x39\x82\x53\xac\x48\xd7\x18\x60\xb8\xc1\x46\xb6\x6b\x14\x06\x0c\x6a\x23\xd0\x00\x59\x11\x2e\xb4\x01\xc5\xc5\x03\x96\xfb\x11\x45\x61\x14\xaf\xba\x15\x5e\xa2\xd9\x4a\xf5\x30\x05\xd5\x69\xcd\x89\xa8\x79\xd3\x8c\x9c\x33\x2e\x10\x4c\x8d\xc0\x06\xbf\xa2\x5f\xa9\xc1\xd4\xc4\xc0\xc9\xa3\x07\x58\x13\x2e\x8c\xf5\x3f\x3a\x2c\x99\x8e\x00\x8e\xe0\x42\x52\xd2\xb8\x10\xb8\x58\x01\x95\xc2\x28\x42\x0d\x10\xc6\x14\x6a\x8d\x1a\x04\x22\x03\x23\xa1\x44\xd0\x68\x60\xcb\x4d\x0d\x28\x36\xb0\x21\x8a\x93\xb2\x41\x3d\x19\xc1\xc1\xde\xba\x04\xe0\x6c\x0a\x51\x14\xb9\x6f\x34\x35\x2a\xec\xd6\x43\x06\x1f\xd8\x14\xf2\x28\xef\xe7\x4a\x29\x8d\x36\x8a\xb4\x0b\x44\xa5\x7b\x5b\x0f\xc6\xc7\xbc\x8d\x8f\x83\x30\x9b\xf8\x13\x7f\x12\x1c\x1b\xda\x1e\x47\x79\xe8\x87\xc7\xbc\xad\xf4\xf1\xd5\x7a\x79\xb5\x2b\xb7\x0f\xdd\xfd\xe7\xcf\xa7\x55\xf7\x7d\x59\xee\xce\x66\xd7\xb8\xbc\x3c\xb9\x90\xdf\xf7\xfb\x24\xc9\x37\x57\x62\xf5\xc7\x66\xf1\xe9\xeb\xc5\xe7\x87\xf1\x5f\x38\x8d\x0e\x4e\xff\xa8\xd2\xb3\xcb\x74\xfd\xf0\xed\x0e\xbf\xde\x7d\xbc\x0b\xbf\x2d\xba\x20\xfd\xb3\x65\xef\xa2\x87\xdf\x65\xb0\x8c\xd6\x35\xa9\x17\xf3\xe4\x06\x13\x11\xf4\x4e\x0f\xa5\x9a\x1d\x2a\xd5\x27\x60\xd3\x47\x61\xb8\xd9\x9f\x13\x6a\xa4\xda\x4f\x61\x3c\xfe\x69\xe6\x1a\x57\x5c\x9b\x67\x53\x44\xd0\x5a\xaa\x6b\x6c\xa5\xe6\x3f\x59\xb5\x64\x6f\x61\xf2\x8f\xb2\xe1\x2b\x62\xb8\x14\x6e\xce\x35\xef\x13\xe1\xe2\x97\x50\x1a\x7a\x3c\x82\xa7\x88\xe9\x03\x3c\x82\xcb\x6e\x8d\x8a\x53\xf8\x70\x0a\xb2\x72\xe8\x79\x82\x93\x1f\x96\x7d\x23\x93\x60\xb0\x9a\x1f\xba\x05\x0d\xd7\xc6\x5a\x0a\xc9\xf0\x25\xd0\x5a\x25\x37\xdc\x4d\x48\xe7\xfb\x49\x00\x87\xf0\xfe\xb2\xfb\x51\x32\x09\xc3\x64\x12\xfa\xfe\x24\x0e\x7f\x46\x40\x10\x9e\x46\x1f\xa5\xbc\xbb\xe0\x9c\x5e\xfd\xb1\x5d\xd6\xcb\xf9\xe7\x74\xf7\x91\x2e\xe4\x45\x95\x5e\x5f\x7d\xfe\xfd\xbc\xdd\x56\x81\xca\x92\xed\xc5\x2e\xbc\xbf\x8e\xda\x13\x16\x8c\x7f\xe5\x3e\x4f\x27\x61\xe0\xbf\xe6\xfe\xea\xfe\xd3\x2c\x7f\xb7\x78\xaf\x36\x67\xf7\xf3\x62\xcb\x1e\xe4\x2d\x9d\xcd\xd6\x27\xf7\xef\xdb\x02\xf7\xfb\xfb\xf8\xe6\x2c\x5f\x9d\xab\xa8\x5e\x5e\xfe\x39\x1e\x6a\x74\x36\xa0\xfd\x50\x45\x5b\x62\x0f\xae\x07\x3e\xbf\xc2\x87\x78\x30\xbe\x20\xb6\x3c\xc0\xb0\x6d\xe4\x1e\x19\xdc\xac\x89\x32\x70\x32\xc0\x4c\x43\x25\x95\x2b\xe8\x8a\x6f\x50\x3c\x2b\xe5\x4b\x28\xc2\xab\x58\xf4\x77\x85\xcf\xc2\x22\x4e\xb2\x00\xb3\x28\x8f\xc3\xb4\xc8\x48\x9a\x96\x19\x29\x0a\xe2\x17\x8c\xa5\x34\x8b\x58\x94\xa4\xec\x0d\xd4\xfa\xbb\x22\x4d\x7d\xea\x47\x05\x8b\x82\x20\x4e\x22\x52\xf9\x2c\xc9\x69\x92\xa6\x69\x16\x46\xac\xa0\x61\x45\x32\x96\x22\x7d\x03\xdf\xfe\x2e\xab\xf2\x24\x66\x15\x29\x72\x3f\x08\x59\x56\x91\x24\xa1\xb9\x1f\x95\x25\x09\xc3\xd4\x2f\x29\x43\x8c\xcb\x04\xd9\x5b\x4c\xf0\x77\xac\xf4\x93\x3c\x98\x15\x51\x98\xa7\x69\x9c\x27\x49\x14\xe6\x33\x76\x5a\xfa\x67\x61\x12\x04\x79\x9c\xc6\x7e\x55\x60\x72\xea\x38\x53\xa2\x12\xa4\xa9\x91\xaf\x6a\x33\x80\xee\xe8\xe8\x68\xe8\xc0\x47\xb9\x21\x02\xce\x67\x57\xc3\x6f\x0f\xee\xac\xda\x71\x51\x75\x8a\xc0\x5e\x76\xb0\xb2\x32\x2d\x00\x95\x92\xca\xc2\x69\x59\x73\x0d\x0a\xbf\x75\xb6\x73\x5c\x83\x90\x06\x74\xd7\xb6\x52\x19\x64\x50\x22\x25\x9d\x46\x6b\xa9\x1c\x5b\xec\x12\xd5\x09\x61\xa5\xd6\x09\xa9\x36\xc4\x58\xca\x74\x76\x68\x02\xd7\x9d\xe8\xc7\x3d\x6f\x18\xfb\x8d\x28\x5a\xf3\x0d\x4e\xc6\x7f\x1b\x82\x02\xd8\x5a\xc6\x19\x09\x4c\xfe\xdd\x59\x10\x68\x9c\x88\xb7\x44\x71\xb3\xef\x37\x72\x5e\x1e\x5c\x3e\xb8\x9a\xf6\x3f\xbf\x0c\x0b\x3c\x8f\xd6\x84\x8b\xdf\xfa\x69\xcf\xb3\xd1\xfe\x16\xf9\x91\x1f\x83\xe7\x6d\x89\x6a\x87\xff\xbc\x92\x28\xc5\x51\x41\x92\xe6\xbe\xef\xfb\xe0\x79\x42\x7a\x44\x50\x8e\xc2\x78\x65\x23\xe9\x83\xee\xc7\x34\xaa\x0d\x7a\x8d\x2d\x2a\x78\xde\x9a\xec\xbc\xd6\x92\x1a\xc2\xc4\x1a\x69\x41\x5a\x5d\x4b\x33\x0c\xba\xb1\x35\x17\xcf\x7e\xda\x98\x09\x35\x7c\x83\xe0\x79\x16\xcc\xb6\x44\xb2\xaa\x5e\x56\x02\x3c\x8f\x95\x1e\x95\xeb\xd6\xae\x97\x02\xb4\x66\x36\x25\x42\x6b\xf4\x34\xff\x8e\x10\xfb\x45\x0a\x9e\xf7\x55\x4b\xa1\x5a\xea\xd5\x52\x1b\x0d\xa4\x69\x9e\x8c\x71\x61\x50\x55\x84\xa2\x1d\xff\xf2\xbc\xdd\x2f\x8b\xf9\xab\xce\xcf\x6d\xfa\xc8\x2c\xf7\x04\xf6\x81\x18\x09\x77\x58\xde\xd8\x71\xa3\xc1\xd5\x44\x41\xa5\xe4\x1a\x3a\x61\x54\xa7\x2d\x24\xa4\xe2\x2b\x2e\xa6\x30\x99\x8c\x5f\xed\xa7\x25\xf9\x8b\x5e\x7e\xf1\xbc\x4e\x68\x52\xa1\x87\xbb\x56\x6a\xfc\x02\x55\x43\x56\x3f\x01\xf8\x3f\x53\xf6\xf0\xbf\x54\xf6\x67\x5c\xfa\xb7\xb5\x3d\xf0\xe3\x49\x90\xc4\x93\x20\x9f\x24\x2f\x4e\xf7\x83\xf8\x2e\x74\xca\x09\xde\x76\xe7\xf7\x97\x5d\xf0\x6e\xb7\xd1\xfb\xf9\xf2\x46\x2d\x75\xb1\x31\xf3\xb4\x34\x9f\x66\xe2\xfd\xb9\xbc\xf8\x5a\x3e\x7c\x3f\x21\xe3\x5f\xb8\x4f\x26\x41\x9e\x4c\xc2\x28\x7b\x75\x83\x93\x77\x74\xcb\x97\x5f\xe5\xc7\xbb\xf7\xd5\x9c\xc4\x79\x78\xbb\x30\x04\x6f\x77\x97\x17\x5b\x96\x7f\x2f\xc5\x3c\xb8\xc9\xb6\x38\xbb\xbf\xdd\xdd\xbf\xad\xee\x4e\x34\x5e\xd5\xf6\xf0\x7f\x20\xee\x6f\x68\x7b\x9e\x94\x51\x58\x65\x24\xaa\x62\x3f\xce\x83\x2a\x08\xa3\x28\xf6\xe3\x20\xcd\x7c\x9a\xd3\x12\xfd\xac\xca\x58\x56\xd0\x37\xb5\x3d\x89\x09\x46\x59\x54\xf9\x45\x5a\x91\x2a\x64\x65\x5a\xe6\x24\x4e\xb3\x20\xa3\x7e\x59\xe4\x48\x2b\xe2\x67\x09\x63\x6f\x6a\x7b\x1c\xc7\x55\x1a\x17\x18\xf9\x59\x1c\x87\x98\xa5\x94\x56\x59\x94\xc5\x69\x8a\x49\x58\x05\xa9\x5f\x94\x45\x1e\xa6\xfe\xdb\xda\xee\xc7\x41\x86\x65\x94\x15\x71\x10\xa4\x71\x94\xe6\xb1\x1f\x9c\xa6\x69\x5a\xe4\x31\x3d\x3b\xcd\xd2\x22\x9e\xcd\xe9\xbc\x0c\xc6\xa3\xd1\xe1\x2a\x7b\x63\xa4\x22\x2b\xb4\x75\xab\xf8\xaa\x53\xce\xd9\x48\xf7\xa3\xfd\x9d\x77\x41\x4c\xed\x2a\xde\xd8\xab\xd3\xe9\x1c\x2a\xde\xe0\xc8\xc6\x60\xea\x29\x1c\x9b\x75\x7b\xfc\xe3\xee\xfd\x4f\x46\x0c\x99\xb8\x95\xac\xb4\xdb\x7c\x78\xd4\x8e\xad\xed\xb7\x6b\xdb\x6c\xf1\x01\x88\x60\xb0\x08\x17\x70\xd3\x13\xdf\x72\x09\x85\x25\xcb\xc8\xd2\xe9\xbd\xd4\x46\x90\x35\x4e\xc1\x77\x77\x50\x7f\x74\x04\x0b\xa9\xcc\xe0\xc4\x3a\xf8\xb5\xa1\x5d\x34\x85\xdc\xcf\x43\xbb\xb9\x25\x94\x67\xa4\xd3\xce\xe7\x29\xea\x51\x1b\xb6\x7d\x7e\x37\x2d\x52\x5e\xed\xe1\x6c\x67\x1c\x45\xe1\xc3\xe2\x49\xac\x4e\x53\x28\x11\xf6\x46\xaf\xd0\xca\x26\x03\x62\x80\x57\x50\x62\xcd\x05\x83\xcb\xd9\xd2\xba\xc1\xc1\xfa\xc3\x62\x0a\xdb\xc9\x6e\xb2\x9f\x7c\xef\xab\x67\xa3\xee\x34\xb2\x47\xd0\xda\xac\x1b\xb2\x47\x65\x6b\xe8\xc2\x75\x8c\x73\xab\x97\x7c\x8d\xb2\x73\x69\x0a\x90\x2d\x8a\xe1\x99\x31\x88\xa6\x13\x13\x77\x10\x8c\xe0\x30\x3c\x98\x4c\x61\x1c\xf9\xda\x75\xf6\xaa\xc3\xee\xa7\x8e\xf6\x94\x21\x7a\x2f\x68\xad\xa4\x90\x9d\xb6\xfa\x44\x51\x6b\x2e\x56\xa3\x6f\xd6\xa0\x2f\x46\xff\x48\xd2\x7d\xea\xdd\xba\x44\x65\x15\xce\x12\x14\x95\x3e\xa6\x52\x68\x2b\x9a\x83\xda\x6d\xed\x2d\xb5\x74\xa7\x82\xa4\xc4\xf4\x95\xd1\x86\x28\xd3\xb5\x23\xb0\xf6\x77\xbd\xe1\x14\xfa\xf4\xce\x15\xa2\x86\xae\x85\x93\xc5\x2d\xd0\x3d\x6d\x50\xf7\xa9\xf6\x1b\xd8\x03\x7f\x4b\xb8\x7b\x5b\xd9\x78\x71\x83\xc2\xd8\x54\xfb\xe9\x3b\xc2\x5d\xb6\x9f\x6e\xa6\x10\xd8\x44\x1f\x25\x46\xbb\x16\x72\xfa\x13\x8c\x0f\x12\x33\xf4\x19\x1b\xb4\xe2\xb1\xad\x39\xad\x1f\xe5\x07\x08\xa5\xb2\x13\xee\x48\xb1\xb7\x8f\xe1\x24\x90\xb6\x08\x83\x84\x33\xe0\xfd\x31\x43\x3b\x6d\xe4\x7a\xd8\xe4\x40\x83\xe1\x2d\x39\xeb\xdd\x5c\x3a\xd0\x8e\xed\xfb\x71\xfc\xf8\x62\x74\xe7\xdd\xe0\xf8\x71\x5f\xda\xd8\x8b\x41\x8f\xaf\xff\xdb\xa2\xbb\x17\x71\x85\xb0\xd5\x20\x15\xf0\x96\x0e\xcf\x48\xfb\x6a\xb4\x9f\x94\x18\x1b\xb6\x2b\xc9\xff\xdb\xea\x4a\x86\xb7\xd7\x17\x53\xa8\x8d\x69\xa7\xc7\xc7\xee\x20\xb6\xa7\xf7\xb4\x48\xe2\xe4\xd0\x4c\xf7\xcc\x5d\x11\x9b\x0b\xa7\x36\xdc\x15\xd1\x0b\xfb\x39\x85\xc0\x3f\xfc\x7b\xb1\xb8\xe1\x6b\x6e\xfa\xc5\x17\xf6\x73\x0a\x71\x16\x84\x51\x9e\x3f\x03\xa9\x91\xae\x5b\x3d\xb4\xc4\x8f\xcc\x8c\x22\x42\x93\xc7\x53\xde\xe6\xc0\x58\xff\x2c\x26\xe0\x2e\x42\x8e\xfd\x7d\x2a\x60\x14\x5f\xad\x50\x21\xeb\x21\x6d\x70\x67\x0e\x8d\xee\x61\x9d\xfa\x16\xd7\xaf\x6d\xac\x90\x30\x90\xa2\xd9\x5b\xba\x1c\xc0\x7e\xf8\xdb\xc0\x21\xa4\x1f\xae\xaf\x91\xb0\xe7\xee\x83\x64\xf0\x7e\x69\x3b\xf1\x34\xf6\x56\xca\x06\xd6\x64\x07\x0a\x8d\xe2\xfd\x49\xae\x51\x30\x20\xcf\x96\xc9\x8d\xa3\xf2\x9a\xec\xae\xfb\x75\x53\x08\x87\x9a\xfe\xda\xa5\xbb\x4e\x6d\x48\xe3\xfc\xee\x7b\x02\x10\x1b\x20\xed\x94\x72\xef\xd2\x27\x16\x35\xd1\x50\x22\xda\x87\xab\x41\x6a\x5c\x99\x0e\x0e\xec\x7e\xf6\xfc\x08\x87\x0c\x4e\xb9\x76\x68\x71\x1e\xb5\x5c\xbf\x40\x9b\x06\x26\x9f\xde\xba\xc1\xec\x5c\x44\xa4\xe5\x23\x00\xb3\x5b\x48\xd9\xcc\xa8\x95\x85\x33\x61\x3d\xb1\x29\x18\xd5\xa1\xe5\x1a\x11\x7b\x60\x58\x76\xab\xd5\x20\x49\x96\x02\x4e\x00\x56\x12\xec\x26\x23\x37\xdb\x53\xad\x6d\x95\xac\x5c\x7b\x1e\x4d\xac\xd8\xd9\xd1\x29\x54\xa4\xd1\x38\xfa\x57\x00\x00\x00\xff\xff\x54\xdb\x3a\xcf\xdd\x11\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 4573, mode: os.FileMode(420), modTime: time.Unix(1544105977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc9\x6e\xe3\x48\x0c\x86\xef\x7a\x0a\x81\x97\x5c\xbc\xd4\xbe\xbd\xc1\x20\x98\xd3\x0c\x90\x33\xab\xc8\x8a\x05\xdb\xb2\x5a\x4b\x12\x23\xc8\xbb\x37\xe4\x38\x9d\x6b\x1a\xba\x90\x04\x7f\xfe\xa4\xea\xe3\xf9\xc0\x23\x2f\xe7\xd4\xb4\x2d\x96\x72\x59\xfa\x79\x5a\xe3\xb6\x3d\x63\xd7\xa7\xf6\x16\xb6\xed\x91\xaf\xa9\x7d\x78\x07\x24\x1a\x79\x9a\x20\x41\x88\x59\x60\x70\x36\xe8\x62\x8c\x31\x58\x2a\x79\x99\x8d\xd3\x2c\x48\x17\x6b\x91\xa5\x91\x0a\x2d\x6c\xa0\x8c\xd7\x61\xbe\x40\x7a\x87\xd2\x0d\x07\x1e\x21\x01\xf2\xb4\x95\x2a\x6c\xcb\x3c\xae\x0d\xb7\xf2\xcc\x6f\x33\x24\x28\xde\xc7\x1a\xb4\x8f\xe4\xbd\xa0\xa8\x4a\x2d\x92\x88\x0c\x86\xaa\x25\x59\x14\x48\x25\x54\x85\x22\x2b\x94\x46\x48\xed\x05\x69\xa7\x45\xd5\xa1\x88\x12\xf0\xcf\xbc\x01\x47\x3c\x4f\xab\x6d\xf7\x02\x09\xb4\x2b\xd2\x05\xf6\x3a\xd7\x18\x44\x65\x6f\xb3\xf0\xca\xd7\x10\x05\x7a\x89\x04\x1f\x1b\x38\x52\x85\x04\xd3\x6d\x61\xb8\xa5\xdf\x43\xe8\x78\xe2\x1e\x92\x56\x1b\xe8\x21\x29\xa7\xa4\x31\x1b\x18\x20\xc9\x0d\x8c\x90\xc2\x06\x26\x3c\xad\x07\x10\xcb\xcc\xd2\xb1\x2e\x31\xc8\x68\x0c\x49\x2e\xa8\x72\xc8\xca\xb3\x61\xc7\x22\xdb\x5c\xb3\xd1\x99\x85\xf6\x0e\x2d\x85\x10\x62\x45\xe7\x23\xaa\x20\x95\x5a\x17\x39\x63\x59\x7f\x45\x91\x2a\xe4\x20\xad\xb5\x36\xa3\x64\x24\x5f\x90\xa3\x70\x82\x43\x30\x0a\x6b\xc1\xa0\xad\x23\xe1\x8c\xb5\x99\x22\x5a\x6f\x55\x46\x57\x4b\x11\x51\x71\x5d\x27\x75\x04\x09\x8c\x65\xe1\x04\xba\x2d\x29\xe4\xad\xd1\x39\x6c\xa3\x52\x75\x6b\x4c\x50\xd1\xc4\x48\xda\x13\x6c\xe0\x85\xc7\xa9\xbb\xac\x47\x7e\x3c\xdc\x1f\x7e\xc0\x69\x7a\xbd\x8c\x94\xda\x87\xaf\xd2\x9d\x81\xd4\xfe\x14\x81\xa6\xe9\x88\xfb\xb9\x9b\xaf\xff\x50\x6a\x41\xbc\x09\xf9\xfd\x41\xd3\xfc\x5a\x78\xe1\x15\xba\x7e\x39\x3f\x5d\xc6\x23\x8f\x53\x6a\x55\xd3\xb6\xaf\xb7\xe4\x09\xbb\xf9\xff\xee\xcc\xff\xfe\x97\x5a\xd9\x34\x47\xbe\xde\x08\x9d\xba\xe7\xbe\xeb\x9f\x3f\x61\x1d\x96\x7c\xea\xca\xe3\x4a\xe9\x6e\xb7\xdf\xed\xf6\x79\xe9\x4e\xb4\x1f\x79\xba\x2c\x63\xe1\x69\x7f\xef\x7e\xe4\xeb\x6e\x58\xf2\x6e\xe0\xf3\xa7\x6e\xec\x5e\x70\xe6\x9f\x09\x8f\xab\xf8\x26\xe4\xf9\x80\xcb\x7c\xf8\xa1\xf7\xbd\xfb\x2f\x8d\xbf\x54\x5f\xae\xbf\x03\x00\x00\xff\xff\xb0\x1c\xaf\x3f\xaa\x03\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 938, mode: os.FileMode(420), modTime: time.Unix(1540808141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
