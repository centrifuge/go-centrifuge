// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x59\x73\xdc\xb6\xb2\x7e\x9f\x5f\xd1\x35\x7e\x49\xaa\x2e\x47\xdc\x97\xa9\x4a\xdd\x9a\x55\x76\x6c\x2b\xa3\xcd\xba\xf1\xcb\x35\x08\x36\x87\xb0\x48\x80\x06\xc0\x59\xfc\xeb\x4f\x01\xe4\xc8\xb2\x65\x39\xe7\x24\x75\xf2\x12\xbf\xc8\xd3\x44\x37\x7a\xf9\xfa\x43\x03\x2f\x60\x89\x25\xe9\x6a\x0d\x05\xee\xb0\x16\x6d\x83\x5c\x83\x46\xa5\x39\x6a\x20\x5b\xc2\xb8\xd2\x20\x19\xbf\xc7\xfc\x38\xa2\xc8\xb5\x64\x65\xb7\xc5\x0b\xd4\x7b\x21\xef\xa7\x20\x3b\xa5\x18\xe1\x15\xab\xeb\x91\x35\xc6\x38\x82\xae\x10\x8a\xc1\x2e\xef\x57\x2a\xd0\x15\xd1\xb0\x78\xb0\x00\x0d\x61\x5c\x1b\xfb\xa3\xd3\x92\xe9\x08\xe0\x05\xbc\x11\x94\xd4\xd6\x05\xc6\xb7\x40\x05\xd7\x92\x50\x0d\xa4\x28\x24\x2a\x85\x0a\x38\x62\x01\x5a\x40\x8e\xa0\x50\xc3\x9e\xe9\x0a\x90\xef\x60\x47\x24\x23\x79\x8d\x6a\x32\x82\x93\xbe\x31\x09\xc0\x8a\x29\x04\x41\x60\xff\x8f\xba\x42\x89\x5d\x33\x44\xf0\xaa\x98\x42\x1a\xa4\xfd\xb7\x5c\x08\xad\xb4\x24\xed\x06\x51\xaa\x5e\xd7\x81\xf1\x19\x6b\xc3\x33\xcf\x4f\x26\xee\xc4\x9d\x78\x67\x9a\xb6\x67\x41\xea\xbb\xfe\x19\x6b\x4b\x75\x76\xd9\xdc\x5c\x1e\xf2\xfd\x7d\xf7\xfe\xf7\xdf\x97\x65\xf7\xf9\x26\x3f\xac\x66\x57\x78\x73\xb1\x78\x23\x3e\x1f\x8f\x51\x94\xee\x2e\xf9\xf6\xdd\x6e\xf3\xf6\xe3\x9b\xdf\xef\xc7\x7f\x60\x34\x38\x19\x7d\x57\xc6\xab\x8b\xb8\xb9\xff\x74\x87\x1f\xef\x5e\xdf\xf9\x9f\x36\x9d\x17\xff\x5f\x5b\x9c\x07\xf7\xbf\x0a\xef\x26\x68\x2a\x52\x6d\xe6\xd1\x35\x46\xdc\xeb\x8d\x9e\x52\x35\x3b\x65\xaa\x0f\xc0\x84\x8f\x5c\x33\x7d\x5c\x13\xaa\x85\x3c\x4e\x61\x3c\x1e\xbe\x10\x4e\x2b\x21\xaf\xb0\x15\x8a\x7d\xf3\x89\xf1\x9d\x60\x14\x6f\x79\x4b\x4c\xfa\xc6\xe3\x91\xad\xce\x5b\xc2\xf8\x77\xb1\x32\x14\x11\x7e\xba\xea\xc1\xf2\xf3\x08\x1e\x83\xa3\xf7\xe5\x05\x5c\x74\x0d\x4a\x46\xe1\xd5\x12\x44\x69\x81\xf2\x08\x12\x83\x8d\x87\x9a\x45\xde\xa0\x35\x3f\x15\x06\x6a\xa6\xb4\xd1\xe4\xa2\xc0\xa7\x98\x6a\xa5\xd8\x31\xfb\x41\x58\xdb\x8f\x1c\x38\x39\xfa\x87\x85\x0e\xa2\x89\xef\x47\x13\xdf\x75\x27\xa1\xff\x6d\xb1\x3d\x7f\x19\xbc\x16\xe2\xee\x42\xbd\x57\x77\xc9\x4d\x4e\xdf\x47\xe9\x45\xe2\xdd\x5e\x5e\xbf\x8e\x96\x1f\xdf\x7f\x6a\xd6\xf7\x2f\x37\x2f\xf7\x87\xf5\xeb\x9b\xd9\x51\xdc\xde\x2e\xd3\xa2\x1c\x7f\xcf\x7c\x1a\x4f\x7c\xcf\x7d\xce\xfc\x12\x7d\xb5\xbf\x5b\x05\xa5\xcf\x7e\xcd\x6f\xf1\x32\x3b\xbf\xbd\xbd\x9c\xbf\x5c\xc8\xbb\x37\xf9\x9c\x92\xec\xed\xf9\xdb\x4f\x65\x93\x2f\xb6\xb2\xcb\xc7\x43\x8e\x56\x03\xb0\x1f\x2a\xf1\x6a\x09\x0e\x0c\xd5\x78\x0e\xfa\xe1\xa0\xfc\x86\x98\xf4\x40\x81\x6d\x2d\x8e\x58\xc0\x75\x43\xa4\x86\xc5\x80\x28\x05\xa5\x90\x36\xa1\x5b\xb6\x43\xfe\x55\x2a\x9f\xa2\x0e\x9e\x85\x9d\x7b\xc8\x30\x5f\x2e\xd3\x79\x92\xfb\x98\xb8\x1e\xcd\xca\xa4\xc8\xdc\x75\xea\x91\x2c\xf1\xe2\x28\xf6\xe9\x6c\x11\x45\x61\x1e\xfc\x00\xa0\xee\x21\x88\x31\xc8\xd3\x3c\x2b\xcb\x32\x76\x67\x1e\xba\x81\x57\x16\x6e\x12\x27\x9e\x9f\xa5\x85\x1b\x25\x61\x44\xcb\x39\xf1\x9f\x83\xb2\x7b\x58\x79\xb1\x1f\xce\x56\x61\x12\xc7\x58\x06\x64\x16\x06\xae\xeb\xf9\xfe\x32\x5a\xcd\x48\x44\x42\x9c\x25\xe5\x22\xca\x92\x74\x00\xfd\x6b\xb1\x23\x7d\xd4\x8f\x20\x9a\xa3\xe4\xa4\xae\x90\x6d\x2b\x3d\x40\xe8\xc5\x8b\x17\x43\x3e\x7b\x8d\xf5\xec\x72\xf8\xed\xc0\x9d\xa1\x29\xc6\xcb\x4e\x12\x38\x8a\x0e\xb6\x86\x5f\x39\xa0\x94\x42\x1a\x70\xdc\x54\x4c\x81\xc4\x4f\x9d\xd9\x85\x29\xe0\x42\x83\xea\xda\x56\x48\x8d\x05\xe4\x48\x49\xa7\xd0\x68\x4a\x8b\x7d\xb3\x44\x76\x9c\x1b\x8e\xb4\x0c\xa8\x34\xd1\xa6\x01\x3a\x23\x9a\xc0\x55\xc7\x7b\xb9\xe3\x0c\xb2\x5f\x88\xa4\x15\xdb\xe1\x64\xfc\x3f\x83\x53\x00\x7b\xd3\x3f\x5a\x40\x21\xfe\xd7\x6a\x10\xa8\x2d\xfb\xb6\x44\x32\x7d\xec\x37\xb2\x56\xee\x6d\x3c\xb8\x9d\xf6\x3f\x3f\x0c\x0b\x1c\x87\x56\x84\xf1\x5f\xfa\xcf\x8e\x63\xbc\xfd\x25\x70\x03\x37\x04\xc7\xd9\x13\xd9\x0e\x7f\x9c\x9c\x48\xc9\x50\x42\x14\xa7\xae\xeb\xba\xe0\x38\x5c\x38\x84\x53\x86\x5c\x3b\x79\x2d\xe8\xbd\xea\x65\x0a\xe5\x0e\x9d\xda\x24\x15\x1c\xa7\x21\x07\xa7\x35\x2d\x0a\x7e\x64\x94\x14\x27\xad\xaa\x84\x1e\x84\x56\xd6\x30\xfe\xd5\x4f\xe3\x33\xa1\x9a\xed\x10\x1c\xc7\x40\xd3\xa4\x48\x94\xe5\xd3\x4c\x80\xe3\x14\xb9\x43\x45\xd3\x9a\xf5\x82\x83\x52\x85\x09\x89\xd0\x0a\x1d\xc5\x3e\x23\x84\x6e\x16\x83\xe3\x7c\x54\x82\xcb\x96\x3a\x95\x50\x5a\x01\xa9\xeb\x47\x32\xc6\x35\xca\x92\x50\x34\xf2\x0f\x5f\x97\xfb\x69\x32\xbf\x57\xf9\xb9\x09\x1f\x0b\xd3\x49\x1c\x7b\x47\xb4\x80\x3b\xcc\xaf\x8d\x5c\x2b\xb0\x39\x91\x50\x4a\xd1\x40\xc7\xb5\xec\x94\x81\x84\x90\x6c\xcb\xf8\x14\x26\x93\xf1\xb3\xf5\x34\x2d\xfb\xa4\x96\x1f\x1c\xa7\xe3\x8a\x94\xe8\xe0\xa1\x15\x0a\x3f\x40\x59\x93\xed\x37\x00\xfe\xcf\x78\xda\xff\x8b\x3c\xfd\x55\x2f\xfd\xdb\x4c\xed\xb9\xe1\xc4\x8b\xc2\x89\x97\x4e\xa2\x27\xc7\xf2\x89\x4a\xaf\xf3\x43\xfe\x7a\x91\xbf\xaf\xb2\x5f\xdf\x69\x75\x79\x7c\x77\x5e\xdc\x6c\x24\x09\xaf\xda\xeb\x59\xa8\xf3\x9d\x8a\x09\xf7\xbc\x8f\xfb\xf3\x99\xff\x79\xfc\x1d\xf3\xd1\xc4\x4b\xa3\x89\x1f\x24\xcf\x6d\x70\xd9\xf8\xf4\xba\x91\x2b\x46\xae\xdf\xbe\x0b\xb7\xb7\xbb\xe4\xee\xbc\x6a\xb7\x57\x7b\x91\xee\xc5\xfa\x5a\xbd\xac\xde\x9f\xe7\xe7\x2c\x20\xb3\xf4\xf0\x63\xae\xb6\xa4\xf1\x2c\x53\xfb\xff\x05\xaa\xfe\x01\x53\x07\x71\x9c\x87\x9e\x17\xfb\x24\x0a\xca\x22\x89\x8a\x2c\x2a\x02\xaf\x58\xc6\x85\xb7\x08\x8b\x34\xc8\x97\x61\x10\xcf\xe7\xf8\x43\xa6\x4e\xa2\x39\xa1\xf3\xcc\x9f\x05\x2e\x26\xab\xd2\x5b\x06\x29\xf5\x49\xe0\xcd\xc3\xb5\x9f\x05\x51\x11\x64\xeb\x38\x49\xe9\x0f\x98\x3a\x4d\x52\x17\x3d\x2f\x0c\xdc\x20\xce\x43\x9a\x25\x59\xb9\xf2\xa3\xc0\xf3\x53\x12\xa6\x6e\x12\xba\x59\x50\x7a\x59\x9a\x0c\x4c\x7d\x25\x5a\xa5\xf1\x09\x57\x17\x62\xdb\x12\x4d\xab\x3f\x37\x85\x04\x7f\x11\xdd\xa7\xdd\xe1\xa7\x9b\xdf\x96\xbf\x01\x95\x68\xa8\x5a\x0e\xae\x1a\x84\x5b\x3b\x3f\xff\xd3\x46\x93\x3e\x01\xcf\x01\x3e\xf8\x7b\xf1\xbe\x4e\x63\x2f\x49\x72\x3f\x89\x56\xe1\x9a\xe6\xfe\x2c\x8f\x66\xc1\x9a\xae\xa3\x55\x18\x13\x92\x47\x5e\x99\x04\xcb\x84\xc4\x3f\xc4\x7b\x19\x07\x6e\x91\xe6\xab\x28\x8e\xc3\x45\xb2\x9e\x7b\x7e\x10\x2e\x56\x65\x98\xe6\xf1\x2c\xf1\x33\xba\xc2\x60\x9e\x78\xcb\xf4\x79\xbc\x67\x88\x98\xae\xf3\x55\xb0\xf2\x33\x9a\xc5\x74\x91\x85\xe1\xda\x45\x5c\x78\x51\x16\x96\xe8\xe5\x71\x10\x14\x33\xd3\x76\x5f\xc6\x71\x33\x7e\x7f\x03\x78\x6c\x72\x22\x29\x29\x50\x0a\xf3\xe5\x4f\xe1\xde\x73\xff\x61\x80\x34\x37\xd2\x13\x76\xbe\x03\x48\xef\xef\x05\xa4\xef\x47\x09\x71\xe7\xc9\x2a\xf2\x82\x28\xf5\x69\x10\xcf\x3d\x3f\xa1\xe1\xca\x2d\xbc\xd0\x5f\xa7\xf3\x2c\xf5\x93\x80\xfc\x78\x54\x8e\x7d\x8c\xd2\x79\x90\x65\xa4\xa0\x6e\x10\x60\x8c\xa1\x1b\x66\x49\xba\xf4\xe2\x65\x14\x7a\x7e\x50\x86\x0b\xcf\x9d\xd3\xe7\x01\x39\x8f\xf3\x24\x5e\x2e\x96\xf1\x2c\x8c\xe2\x65\x54\x64\xeb\x72\x9d\x2c\xbd\x74\x1d\xc5\xfe\x32\x48\xa3\xb0\xf4\x3c\x12\x2d\xb2\xf1\xc8\xdc\xff\x89\x26\x70\xad\x85\x24\x5b\x1c\xa9\xfe\x6f\x7f\xab\xdf\x10\x5d\xd9\xcc\xd4\xe6\xee\xb8\x9c\x43\xc9\x6a\x1c\x01\xb4\x44\x57\x53\x38\xd3\x4d\x7b\xf6\xe5\x75\xe1\xff\x0b\xa2\xc9\xc4\xae\x2c\x72\x63\x77\x21\x78\xc9\xb6\x9d\x24\x76\x3a\x3a\x6d\x40\xad\xf4\xfa\xcf\x6f\xd3\x1b\x78\xb2\xdb\x8c\x52\xd1\x71\xad\xe0\x1e\x8f\x30\x44\x31\x22\x83\xd0\xec\x73\x8f\x47\x23\xc6\xc1\xe2\xe9\x93\xd1\x7d\xf5\x30\x0e\xee\x0d\x80\x2c\x10\x66\x9b\x57\x40\x78\x01\x1b\x7f\x03\xd7\xfd\x2c\x67\x0e\x10\xe4\xe6\x84\x18\x19\xee\x7f\x29\x94\xe6\xa4\xc1\x29\x3c\xbc\x08\x8c\x5e\xc0\x46\x48\x3d\x98\x31\x26\xbe\xaf\x6a\x16\x4d\x21\x75\x53\xdf\x6c\x6f\x7a\xd4\xd1\xc2\x0e\xc4\x40\x1f\x67\x4d\x8d\x5a\xbf\xed\x93\x74\xdd\x22\x65\xe5\x11\x56\x07\x6d\xe7\x2e\x78\xb5\x79\xe4\xad\x1d\x14\x29\xe1\x90\x23\x48\x34\xb3\x70\x01\x44\x03\x2b\x21\xc7\x8a\xf1\x02\x2e\x66\x37\xc6\x0c\x0e\xda\xaf\x36\x53\xd8\x4f\x0e\x93\xe3\xe4\x73\x5f\x02\xe3\x75\xa7\xb0\x78\x68\x04\x13\x77\x4d\x8e\x28\x4d\x21\xac\xbb\xb6\x8d\xed\xea\x1b\xd6\xa0\xe8\x6c\x98\x1c\x44\x8b\x7c\x78\xf4\x19\x26\x61\x7b\x86\xda\xe9\x7e\x04\x27\xf1\xa0\x32\x85\x71\xe0\x2a\x0b\xbb\xcb\x0e\x3b\xfc\x26\x5c\xbb\x3b\x51\x47\x4e\x2b\x29\xb8\xe8\x94\x39\x96\x29\x2a\xc5\xf8\x76\xf4\xc9\x28\xf4\xc9\xe8\x9f\xac\x54\x1f\x7a\xd7\xe4\x28\x0d\x35\x9a\x9e\x47\xa9\xce\xa8\xe0\xca\x70\xe6\x70\xc8\xef\x59\x5d\x9b\xbc\x90\xda\x8c\xf6\xba\xcf\x8c\xd2\x44\xea\xae\x1d\x81\xd1\xbf\xeb\x15\x0d\x7b\xba\xd6\xfe\x5a\x22\x2a\xe8\x5a\x58\x6c\x6e\x81\x1e\x69\x8d\xaa\x0f\xb6\xdf\xc2\xdc\xe3\xf6\x84\xd9\xb7\x2e\xe3\x31\xee\xd0\x20\x09\x86\xcf\x77\x84\xd9\x78\xdf\x5e\xf7\xfc\x63\x29\x7c\xf0\x51\xa2\x96\x0c\xed\x7d\x44\xec\x87\x74\x13\xd0\x44\x19\x0a\x37\x7f\xae\xfa\x05\x96\xc9\x47\x8f\x48\x4f\xd9\xfa\x33\xfa\x75\xc6\x46\x27\xca\x1b\x40\x82\x35\x1a\x36\xdb\x57\x8c\x56\x0f\x74\x08\x03\xd6\x4d\x59\xcc\x7d\x74\x38\x45\x84\xc9\xe0\x30\xf6\x14\xc0\xfa\x8b\x07\xed\x94\x16\xcd\xb0\xc9\xa9\x11\x87\x67\xc1\xa1\xc5\x2e\x2c\xe6\xc7\x86\x78\xc7\x0f\x8f\x7f\xb6\xc7\x07\xc3\x0f\xfb\xd2\xda\x5c\x15\x7b\x70\xfe\xb4\x47\x7b\x53\x66\x12\x61\xaf\x40\x48\x60\x2d\x1d\x5e\x04\x49\x5e\xa3\xf9\x2f\xb5\x03\x57\x9f\x4d\x33\x58\x19\xc5\xdb\xab\x37\x53\xa8\xb4\x6e\xa7\x67\x67\xf6\x6a\x66\xee\x73\xd3\x2c\x0a\x23\xbb\x77\x43\x0e\xac\x31\x21\x0e\xf9\xdc\x12\x13\x13\xa3\xd6\x5e\x4b\x8e\xa7\x04\x4b\xc2\xd5\x70\x61\x64\x1c\xf6\xc8\xac\xb6\xef\xc2\xf9\x1e\x19\x70\xb1\x1f\x81\xb1\x75\x4e\xd4\xc6\x68\x4f\xc1\x77\x1f\xfe\xd9\xa5\xe7\x44\x41\xcd\x1a\x36\x9c\x15\x05\x2b\x4b\x94\x26\xba\x87\x0a\x89\x16\x4f\x5d\x0b\xc6\x8f\x37\x76\xf5\xe9\x31\x73\x61\x07\x48\x0b\xb1\xc1\xa6\x91\xce\x8a\xe2\x35\x1e\xa7\x10\x3c\x16\x5e\xe1\x4e\xdc\xa3\x95\x47\xd1\x49\xdc\x9f\x14\x0b\xd1\x34\xcc\x50\xc7\x37\xf2\x8d\xc4\xd3\x27\xef\x8b\x29\x5e\xea\xb7\x8c\xeb\x29\x64\x5f\xe2\x38\xf5\xae\x16\x16\xc2\x7d\x7e\xf8\x97\x9a\x3d\xce\xd4\x50\x9d\xa2\xe8\xdf\x6e\x09\xd8\x4b\xbf\xa5\xc5\xbe\x48\xa0\x25\xdb\x6e\x51\x62\xd1\x77\xba\xc6\x83\x3e\xa1\xbf\xef\xf6\xd8\x35\xed\xfe\xdc\xc6\x12\x49\x01\x82\xd7\xc7\x47\xc9\x7b\x78\xc0\x3e\xb9\xf4\xc5\xf4\x15\x92\xe2\x6b\xf3\x5e\x34\x58\xbf\x30\x18\x7b\xec\x7b\x2b\x44\x6d\x2a\xfa\xd0\x71\x5a\x80\x42\x5e\x7c\x03\x06\xb1\xb3\x0c\xd7\x90\xc3\x43\xe3\xf9\x43\xa6\xbe\x6f\xd2\x3e\x1d\xec\x48\x6d\xed\x1e\x7b\x56\x20\xc6\x41\xda\x49\x8b\x87\xc7\x1a\x15\x51\x90\x23\x72\x28\x50\x23\xd5\x36\x4d\x27\x03\x66\x3f\x73\xde\xfb\x43\x04\x4b\xa6\x6c\x1f\x58\x8b\x4a\x34\x4f\xfa\x48\x41\x21\x1e\xbf\x30\x81\x3e\x58\x8f\x48\x6b\xc0\xac\x0f\x1b\x21\xea\x19\x35\x6c\xb9\xe2\xc6\x52\x31\x05\x2d\x3b\x34\x2c\x42\xf8\x11\x0a\xcc\xbb\xed\x76\x60\x6a\xd3\xdc\x96\x17\xb7\x02\xcc\x26\x23\xfb\xb5\x27\x91\xb6\x95\xa2\xec\x41\x7e\x52\x31\x67\x80\x91\x4e\xa1\x24\xb5\xc2\xd1\xa8\x47\xdd\xf0\x56\xdf\x4a\xa4\x03\xf8\xec\x86\xff\x0a\x00\x00\xff\xff\x92\x31\xe1\x5f\xa0\x18\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6304, mode: os.FileMode(420), modTime: time.Unix(1554803235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1554467633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
