// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x59\x73\x1b\x37\x12\x7e\xe7\xaf\xe8\x92\x5f\x92\xaa\x1d\x6a\xee\x83\x55\xa9\x2d\xea\xf0\x11\xcb\x0a\x75\x45\xb1\x5e\xd6\x18\xa0\x41\xc2\x1a\x02\x63\x00\xc3\xc3\xbf\x7e\x0b\x98\x21\x23\x59\x96\xb2\x9b\x54\x76\xf5\xa2\x21\x80\x6e\x34\xba\xbf\xef\xc3\xf1\x0a\x4e\x90\x93\xae\xb1\xc0\x70\x85\x8d\x6a\x97\x28\x2d\x58\x34\x56\xa2\x05\x32\x27\x42\x1a\x0b\x5a\xc8\x7b\xac\xb7\x23\x8a\xd2\x6a\xc1\xbb\x39\x9e\xa3\x5d\x2b\x7d\x3f\x01\xdd\x19\x23\x88\x5c\x88\xa6\x19\x79\x67\x42\x22\xd8\x05\x02\x1b\xfc\xca\x7e\xa4\x01\xbb\x20\x16\x8e\xf7\x1e\x60\x49\x84\xb4\xce\xff\x68\x37\x64\x32\x02\x78\x05\x67\x8a\x92\xc6\x87\x20\xe4\x1c\xa8\x92\x56\x13\x6a\x81\x30\xa6\xd1\x18\x34\x20\x11\x19\x58\x05\x35\x82\x41\x0b\x6b\x61\x17\x80\x72\x05\x2b\xa2\x05\xa9\x1b\x34\xe3\x11\xec\xec\x9d\x4b\x00\xc1\x26\x90\x24\x89\xff\x46\xbb\x40\x8d\xdd\x72\x58\xc1\x3b\x36\x81\x32\x29\xfb\xbe\x5a\x29\x6b\xac\x26\xed\x0c\x51\x9b\xde\x36\x80\x83\x43\xd1\xa6\x87\x51\x5c\x8c\xc3\x71\x38\x8e\x0e\x2d\x6d\x0f\x93\x32\x0e\xe3\x43\xd1\x72\x73\x78\xb1\xbc\xbe\xd8\xd4\xeb\xfb\xee\xee\xe3\xc7\x13\xde\x7d\xbd\xae\x37\xa7\xd3\x4b\xbc\x3e\x3f\x3e\x53\x5f\xb7\xdb\x2c\x2b\x57\x17\x72\xfe\xeb\x6a\xf6\xe1\xf3\xd9\xc7\xfb\x83\x3f\x70\x9a\xec\x9c\xfe\xca\xf3\xd3\xf3\x7c\x79\xff\xe5\x16\x3f\xdf\xbe\xbf\x8d\xbf\xcc\xba\x28\xff\xad\x65\x6f\x92\xfb\x9f\x55\x74\x9d\x2c\x17\x64\x31\x3b\xca\xae\x30\x93\x51\xef\x74\x97\xaa\xe9\x2e\x53\xfd\x02\xdc\xf2\x51\x5a\x61\xb7\xaf\x09\xb5\x4a\x6f\x27\x70\x70\xf0\x4d\xcf\x25\xce\x85\xb1\x8f\xba\x88\xa4\x0b\xa5\x2f\xb1\x55\x46\x7c\x63\xd5\x92\xad\x83\xc9\x2f\x75\x23\xe6\xc4\x0a\x25\x7d\x9f\x2f\xde\x07\x22\xe4\x77\xa1\x34\xd4\x18\x7e\xb8\xec\xb1\xf4\xe3\x08\x1e\x62\xa7\x0f\xf5\x15\x9c\x77\x4b\xd4\x82\xc2\xbb\x13\x50\xdc\xe3\xe8\x01\x62\x06\x1f\xfb\x92\x66\xd1\x60\x75\xb4\xab\x1b\x34\xc2\x58\x67\x29\x15\xc3\xa7\x90\x6b\xb5\x5a\x09\xdf\xa1\xbc\xef\x07\x01\xec\x02\xfd\x43\x1c\x24\xd9\x38\x8e\xb3\x71\x1c\x86\xe3\x34\xfe\x16\x0b\x51\x7c\x92\xbc\x57\xea\xf6\x4c\x08\x7a\xf1\xeb\xfa\x7a\x71\x7d\xf4\x31\xdf\xbc\xa7\x33\x75\xc6\xf3\xcb\x8b\x8f\x3f\xbf\x6e\xd7\x3c\xd2\x45\xb6\x3e\xdb\xc4\x77\x97\x49\x7b\xcc\xa2\x83\xef\xb9\x2f\xf3\x71\x1c\x85\xcf\xb9\xbf\xb8\xfb\x30\x2d\xdf\xcc\xde\xea\xd5\xe9\xdd\x51\xb5\x66\xf7\xea\x86\x4e\xa7\xcb\xe3\xbb\xb7\x6d\x85\xdb\xed\x5d\x7a\x75\x5a\xce\x5f\xeb\x64\x71\x7d\xfe\xdb\xc1\x90\xa3\xd3\x01\xf7\xfb\x4a\xbc\x3b\x81\x00\x86\x6a\x3c\xc7\x8c\x74\x30\x3e\x23\x2e\x3d\xc0\xb0\x6d\xd4\x16\x19\x5c\x2d\x89\xb6\x70\x3c\x00\xce\x00\x57\xda\x27\x74\x2e\x56\x28\x1f\xa5\xf2\x29\x28\xe1\x59\x54\x86\x9b\x8c\xc4\x69\x95\x17\x9c\xb3\xb4\x24\x31\x89\x68\x99\x30\x56\x66\x49\xc6\xea\x92\xd5\xac\x62\x24\xca\x73\x9a\xe4\x2f\xe0\x37\xdc\x54\x79\x1e\xd2\x30\xa9\x58\x12\x45\x69\x96\x10\x1e\xb2\xac\xa4\x59\x9e\xe7\x45\x9c\xb0\x8a\xc6\x9c\x14\x2c\x47\xfa\x02\xd2\xc3\x4d\x86\x29\x61\x69\x11\xe5\x65\x9e\xc4\x51\x5e\x57\x09\xe5\x49\x8c\x51\xcc\xf2\x8a\x53\x1e\x15\x45\x9c\xd5\x59\xc2\x5e\xe2\x44\xb8\xc9\x6b\x96\xf0\x2c\x09\x8b\x88\x55\xbc\xac\x38\xa5\x59\x15\x46\x59\x95\xd7\x45\x4a\x93\x9a\x45\xb4\xa8\xa2\xb0\x48\x07\xf6\xbc\x57\x2b\xd2\xa7\xef\x01\xd6\x6b\xd4\x92\x34\x0b\x14\xf3\x85\x1d\xb0\xf8\xea\xd5\xab\xa1\x30\xbd\xc5\xeb\xe9\xc5\xf0\x3b\x80\x5b\x27\x87\x42\xf2\x4e\x13\xd8\xaa\x0e\xe6\x4e\xc7\x25\xa0\xd6\x4a\x3b\x94\x5d\x2f\x84\x01\x8d\x5f\x3a\x37\x8b\x30\x20\x95\x05\xd3\xb5\xad\xd2\x16\x19\xd4\x48\x49\x67\xd0\x59\x6a\x4f\x22\x37\x44\x77\x52\x3a\x2d\xf6\x4a\x6b\x2c\xb1\x8e\x49\x9d\x6b\x1a\xc3\x65\x27\xfb\xf6\x20\x18\xda\x7e\x22\x9a\x2e\xc4\x0a\xc7\x07\xff\x18\x82\x02\x58\x3b\x22\x5a\x05\x4c\xfd\xd3\x5b\x10\x68\xbc\xca\xb7\x44\x0b\xbb\xed\x27\xf2\x5e\xee\xfd\x7a\x70\x3e\xe9\x7f\x7e\x1a\x06\x04\x01\x5d\x10\x21\x7f\xea\xbb\x83\xc0\x45\xfb\x53\x12\x26\x61\x0a\x41\xb0\x26\xba\x1d\xfe\x05\x35\xd1\x5a\xa0\x86\x2c\x2f\xc3\x30\x0c\x21\x08\xa4\x0a\x88\xa4\x02\xa5\x0d\xea\x46\xd1\x7b\xd3\xb7\x19\xd4\x2b\x0c\x1a\x97\x54\x08\x82\x25\xd9\x04\xad\xe3\x3a\xc4\x99\x33\x32\x92\xb4\x66\xa1\xec\xd0\xe8\xdb\x96\x42\x3e\xfa\xe9\x62\x26\xd4\x8a\x15\x42\x10\x38\x8c\xbb\x14\x29\xce\x9f\x66\x02\x82\x80\xd5\x01\x55\xcb\xd6\x8d\x57\x12\x8c\x61\x6e\x49\x84\x2e\x30\x30\xe2\x2b\x42\x1a\x56\x39\x04\xc1\x67\xa3\xa4\x6e\x69\xb0\x50\xc6\x1a\x20\x4d\xf3\xa0\x4d\x48\x8b\x9a\x13\x8a\xae\xfd\xd3\xe3\x72\x3f\x4d\xe6\xf7\x2a\x7f\xe4\x96\x8f\xcc\x51\x52\x62\x1f\x88\x55\x70\x8b\xf5\x95\x6b\xb7\x06\x7c\x4e\x34\x70\xad\x96\xd0\x49\xab\x3b\xe3\x20\xa1\xb4\x98\x0b\x39\x81\xf1\xf8\xe0\xd9\x7a\x3a\xee\x3f\xa9\xe5\xa7\x20\xe8\xa4\x21\x1c\x03\xdc\xb4\xca\xe0\x27\xe0\x0d\x99\x7f\x03\xe0\xff\x4e\xf0\xe3\xbf\x28\xf8\x8f\xb8\xf4\x1f\x4b\x7e\x14\xa6\xe3\x28\x4b\xc7\x51\x39\xce\x9e\x6c\xff\x3b\x4d\x9e\x99\x5c\x10\xbc\xe9\x5e\xdf\x9d\x77\xd1\x9b\xcd\xca\x6c\x8f\xae\xaf\xf4\xb5\xa9\x56\xf6\x28\xaf\xed\x87\xa9\x7c\xfb\x5a\x9d\x7d\xae\xef\xbf\x1e\x93\x83\xef\xb8\xcf\xc6\x51\x99\x8d\xe3\xa4\x78\x76\x82\xe3\x37\x74\x2d\xae\x3f\xab\xf7\xb7\x6f\xf9\x11\x49\xcb\xf8\x66\x66\x09\xde\x6c\xce\xcf\xd6\xac\xfc\x5a\xcb\xa3\xe8\xaa\x58\xe3\xf4\xee\x66\x73\xf7\xb2\xe8\x7b\xd1\x78\x56\xf2\xe3\xbf\x41\xf3\x5f\x90\xfc\x98\xb3\x8c\xf3\xb2\x62\xc8\xeb\x38\x23\x21\x29\xb0\x8e\x39\xc6\x2c\x42\xa4\x61\x1c\x95\x45\x9d\xe5\x18\x25\x2f\x4a\x7e\x96\x12\x4c\x8a\x84\x87\x55\xce\x09\x8f\x59\x9d\xd7\x25\x49\xf3\x22\x2a\x68\x58\x57\x25\x52\x4e\xc2\x22\x63\xec\x45\xc9\xc7\x9a\xb3\x12\x13\x92\x87\x65\x98\xb1\x34\x8c\x29\xab\xc3\x3c\xa5\x75\x56\xd7\x45\xc5\xe2\x34\x2e\xa3\x88\xc5\xf4\x65\xc9\xe7\x55\x92\x54\xac\x4a\xa2\xa8\x26\x71\x59\xd2\x22\x2f\xcb\xb0\x8a\x79\x5d\xc6\x09\x2f\x63\x96\x44\x59\x9e\x72\x5e\x0f\x92\x7f\xa9\x5a\x63\xf1\x89\xe8\x33\x35\x6f\x89\xa5\x8b\x3f\x77\x2e\x4a\xfe\x22\x4d\x76\xb3\xc3\x0f\xd7\xbf\x9c\xfc\x02\x54\xa3\xd3\x7c\x3d\x84\xea\xa8\xe2\xfd\xfc\xf8\x2c\x73\xfe\xf6\xe3\xd2\xff\xef\xc0\xd4\x27\xe1\x39\xf6\x24\xff\x5b\xf2\x54\xbc\x8a\x79\x18\x92\x84\x65\x05\x2b\x78\x12\xe5\x18\x53\x12\x97\x55\x95\x33\x9e\xc5\x55\x54\x66\x21\x96\x84\xbe\x4c\x9e\x2c\xca\xc3\xa3\x28\x0e\xab\x88\xa6\xd1\x69\x71\x9c\x46\x3c\x3c\x9a\x66\x53\xac\x1c\x21\xd3\x38\xa7\x29\x99\x9e\x4e\x5f\x24\x0f\xcf\x59\x4e\x12\xe4\x55\x8c\x55\x15\x21\xe6\x75\xc1\x49\x54\xd2\xb8\x08\x63\x92\x25\x71\x1e\x96\x31\x21\xac\x7a\x99\x3c\x69\x52\x84\x59\xc6\x6a\xc6\xd3\x2c\x2e\x13\x86\x29\xc9\xb1\xc2\xb0\xaa\xab\x10\xc3\x34\x21\x69\x49\x63\x56\x47\x07\x23\x77\xd9\x24\x96\xc0\x95\x55\x9a\xcc\x71\x64\xfa\xff\xfd\x15\x72\x46\xec\xc2\xa7\xb8\x71\x37\x91\x93\x23\xe0\xa2\xc1\x91\x9b\xd4\x2e\x26\x70\x68\x97\xed\xe1\xef\x57\xd9\x7f\x31\x62\xc9\xd8\x8f\x64\xb5\xf3\x7b\xac\x24\x17\xf3\x4e\xfb\xb0\xf6\x13\x50\xdf\x7a\xf5\xe7\xa7\xe9\x1d\x3c\x99\x6d\x4a\xa9\xea\xa4\x35\x70\x8f\x5b\x18\x56\x31\x22\x43\xa3\x9b\xe7\x1e\xb7\xae\x19\x07\x8f\xbb\x2e\x67\xfb\x6e\x7f\x26\x58\x3b\x24\x7a\x44\x4d\x67\xef\x80\x48\x06\xb3\x78\x06\x57\xfd\x86\xee\xc8\x8f\xd2\xb1\x7b\xe4\x78\xfb\x56\x19\x2b\xc9\x12\x27\x10\xfa\xcb\x67\x38\x7a\x05\x33\xa5\xed\xe0\xc4\x39\xf8\xbe\xa1\x1b\x34\x81\x32\x2c\x63\x37\xb9\xa3\x7b\x60\x95\x3f\x13\x01\x7d\x98\x33\x33\x6a\xe3\xb6\x4f\xd1\x55\x8b\x54\xf0\x2d\x9c\x6e\xac\xdf\x7a\xe1\xdd\xec\x41\xac\xfe\xac\x40\x89\x74\x57\x79\x8d\xee\x38\xc4\x80\x58\x10\x1c\x6a\x5c\x08\xc9\xe0\x7c\x7a\xed\xdc\xe0\x60\xfd\x6e\x36\x81\xf5\x78\x33\xde\x8e\xbf\xf6\x05\x70\x51\x77\x06\xd9\x9e\x4f\x6e\xd5\x0d\xd9\xa2\x76\x65\xf0\xe1\x7a\x35\xf0\xa3\xaf\xc5\x12\x55\xe7\x97\x29\x41\xb5\x28\x87\xf7\x85\xe1\x30\xe4\xd5\xcf\x1f\xf0\x46\xb0\x6b\x1e\x4c\x26\x70\x90\x84\xc6\x83\xee\xa2\xc3\x0e\xbf\x59\xae\x9f\x9d\x98\xad\xa4\x0b\xad\xa4\xea\x8c\x13\x54\x8a\xc6\x08\x39\x1f\x7d\x71\x06\x7d\x32\xfa\xd7\x11\xd3\x2f\xbd\x5b\xd6\xa8\x9d\x24\x3b\xe9\x40\x6d\x0e\xa9\x92\xc6\xa9\xfc\x20\xcf\x6b\x77\x29\xad\xfd\x69\x4f\x51\x62\xfb\xcc\x18\x4b\xb4\xed\xda\x11\x38\xfb\xdb\xde\x70\x02\xfd\xf2\x5e\x6b\x44\x03\x5d\x0b\xc7\xb3\x1b\xa0\x5b\xda\xa0\xe9\x97\xda\x4f\xe0\x0e\xf2\x6b\x22\xfc\xa3\x8a\x8b\x17\x57\xe8\x50\x04\x43\xf7\x2d\x11\x7e\xb5\x1f\xae\x26\x10\x8d\x86\x2d\x67\x88\x50\xa3\xd5\x02\xfd\x81\x54\xad\x87\x64\x13\xb0\xc4\xb8\x2d\xc7\xfd\xbb\xec\x07\x4c\x20\x0a\x5d\x8e\xf6\xca\x69\x7c\xf5\x05\x7d\x9c\xaf\xd1\x4e\x37\x07\x88\x60\x83\x4e\x12\xd7\x0b\x41\x17\x7b\x4d\x85\x01\xe7\xae\x28\xee\x42\x32\xec\x7a\xca\xe5\x6f\xd8\xae\x18\x88\xfe\xe4\x49\x3b\x63\xd5\x72\x98\x64\x47\xc2\xe1\xfd\x69\xa0\xd7\xb9\xc7\xfb\xc1\x92\x08\x79\xb0\x7f\x65\xf2\xfc\x1e\x1c\xef\xe7\xa5\x8d\xbb\x2b\xf4\xd0\xfc\x61\x8d\xfe\xaa\x24\x34\xc2\xda\x80\xd2\x20\x5a\x3a\x3c\x3d\x91\xba\x41\xf7\x49\xfd\x46\xd9\x67\xd3\x6d\x88\xce\xf0\xe6\xf2\x6c\x02\x0b\x6b\xdb\xc9\xe1\xa1\x3f\x9b\xbb\x03\xfd\xa4\xca\xd2\x6c\x87\x03\xff\x34\x36\x27\x6e\x2d\x82\xba\x70\xe7\xc4\xcc\xdc\xa7\xcb\xe1\xee\xef\xc9\xe0\x46\x2c\x85\xed\x07\x9f\xb9\xcf\x09\xa4\x45\x14\x27\x65\xf9\x08\xdf\x56\xf9\x42\xf7\x65\x92\xbf\xaf\xcc\x6a\x22\x0d\xd9\x1f\xfc\xdd\x1a\x18\xeb\x9f\xd2\x08\xf8\xbb\x91\x17\x8e\x7e\x29\x60\xb5\x98\xcf\x51\x23\xeb\xd9\x60\x71\x63\x77\x18\xe9\x19\x91\x87\x8e\x12\xcf\x4d\xac\x91\x30\x50\xb2\xd9\x3a\xa6\xed\x78\xb2\x7b\x4f\xdc\x85\xf4\xbb\xeb\x4b\x24\xec\xb1\xfb\x28\x1b\xbc\x9f\xbb\x4a\x3c\x8c\xbd\x55\xaa\x81\x25\xd9\xec\x71\x69\x15\x18\x94\xcc\x61\xf2\xc1\x30\xb5\xf2\x2a\xb0\x24\x9b\x3d\x3c\xe3\x21\xa7\xdf\x77\xe9\x6f\x58\x2b\xd2\x78\xbf\xdb\x9e\x3b\xc4\x05\x48\x3b\xad\xfd\x5b\xd6\x03\x8b\x05\x31\x50\x23\x4a\x60\x68\x91\x5a\x9f\xa6\x9d\x03\x37\x9f\xdb\x15\xe3\x61\x05\x27\xc2\x78\xb4\x78\x8f\x46\x2d\x9f\xa0\xcd\x00\x53\x0f\x2f\xe2\x60\x37\x3e\x22\xd2\x0a\xc7\xb0\xcd\x4c\xa9\x66\x4a\x9d\xa2\x9c\x4a\xe7\x89\x4d\xc0\xea\x0e\x1d\xd7\x88\xdc\x02\xc3\xba\x9b\xcf\x07\x35\x73\x14\xf0\xda\x31\x57\xe0\x26\x19\xf9\xde\x9e\x6a\x6d\xab\x15\xf7\xe5\xd9\x9b\x38\x9d\x74\xad\x13\xe0\xa4\x31\x38\x1a\xf5\xbb\xfb\xf0\x74\xda\x6a\xa4\x6a\xe9\x91\xe6\x27\xfc\x77\x00\x00\x00\xff\xff\xf3\x86\xba\x5a\x2f\x16\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 5679, mode: os.FileMode(420), modTime: time.Unix(1551789277, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1551798935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
