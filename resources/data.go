// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x5b\x73\xdb\x3a\x92\x7e\xd7\xaf\xe8\x72\x5e\xce\x54\x2d\x65\xde\x2f\xaa\x3a\xb5\x45\xdd\x9c\xc4\x89\x47\xb6\xec\xf8\x1c\xbf\x6c\x40\xb0\x29\x21\x16\x01\x06\x00\x75\xf1\xaf\xdf\x02\x48\x39\x4a\x1c\x67\x66\xcf\xd4\xce\xcb\xe4\xc5\x51\x13\xdd\xe8\xcb\xd7\x1f\x1a\x78\x03\x53\xac\x48\xbb\xd1\x50\xe2\x16\x37\xa2\xa9\x91\x6b\xd0\xa8\x34\x47\x0d\x64\x45\x18\x57\x1a\x24\xe3\x8f\x58\x1c\x06\x14\xb9\x96\xac\x6a\x57\x78\x85\x7a\x27\xe4\xe3\x08\x64\xab\x14\x23\x7c\xcd\x36\x9b\x81\x35\xc6\x38\x82\x5e\x23\x94\xbd\x5d\xde\xad\x54\xa0\xd7\x44\xc3\xe4\xd9\x02\xd4\x84\x71\x6d\xec\x0f\x8e\x4b\x46\x03\x80\x37\xf0\x41\x50\xb2\xb1\x2e\x30\xbe\x02\x2a\xb8\x96\x84\x6a\x20\x65\x29\x51\x29\x54\xc0\x11\x4b\xd0\x02\x0a\x04\x85\x1a\x76\x4c\xaf\x01\xf9\x16\xb6\x44\x32\x52\x6c\x50\x0d\x07\x70\xd4\x37\x26\x01\x58\x39\x82\x20\x08\xec\xff\x51\xaf\x51\x62\x5b\xf7\x11\xbc\x2b\x47\x90\x06\x69\xf7\xad\x10\x42\x2b\x2d\x49\xb3\x40\x94\xaa\xd3\x75\xe0\xec\x9c\x35\xe1\xb9\xe7\x27\x43\x77\xe8\x0e\xbd\x73\x4d\x9b\xf3\x20\xf5\x5d\xff\x9c\x35\x95\x3a\xbf\xae\x6f\xaf\xf7\xc5\xee\xb1\x7d\xf8\xf3\xcf\x69\xd5\x3e\xdd\x16\xfb\x59\x7e\x83\xb7\x57\x93\x0f\xe2\xe9\x70\x88\xa2\x74\x7b\xcd\x57\x9f\xb6\x8b\x8f\x5f\x3e\xfc\xf9\x78\xf6\x0f\x8c\x06\x47\xa3\x9f\xaa\x78\x76\x15\xd7\x8f\x5f\xef\xf1\xcb\xfd\xe5\xbd\xff\x75\xd1\x7a\xf1\x1f\x4d\x79\x11\x3c\xbe\x17\xde\x6d\x50\xaf\xc9\x7a\x31\x8e\x96\x18\x71\xaf\x33\x7a\x4c\x55\x7e\xcc\x54\x17\x80\x09\x1f\xb9\x66\xfa\x30\x27\x54\x0b\x79\x18\xc1\xd9\x59\xff\x85\x70\xba\x16\xf2\x06\x1b\xa1\xd8\x0f\x9f\x18\xdf\x0a\x46\xf1\x8e\x37\xc4\xa4\xef\xec\x6c\x60\xab\xf3\x91\x30\xfe\x53\xac\xf4\x45\x84\xdf\x6e\x3a\xb0\xfc\x6d\x00\xa7\xe0\xe8\x7c\x79\x03\x57\x6d\x8d\x92\x51\x78\x37\x05\x51\x59\xa0\x9c\x40\xa2\xb7\xf1\x5c\xb3\xc8\xeb\xb5\xc6\xc7\xc2\xc0\x86\x29\x6d\x34\xb9\x28\xf1\x25\xa6\x1a\x29\xb6\xcc\x7e\x10\xd6\xf6\x89\x03\x47\x47\xff\x61\xa1\x83\x68\xe8\xfb\xd1\xd0\x77\xdd\x61\xe8\xff\x58\x6c\xcf\x9f\x06\x97\x42\xdc\x5f\xa9\x07\x75\x9f\xdc\x16\xf4\x21\x4a\xaf\x12\xef\xee\x7a\x79\x19\x4d\xbf\x3c\x7c\xad\xe7\x8f\x6f\x17\x6f\x77\xfb\xf9\xe5\x6d\x7e\x10\x77\x77\xd3\xb4\xac\xce\x7e\x66\x3e\x8d\x87\xbe\xe7\xbe\x66\x7e\x8a\xbe\xda\xdd\xcf\x82\xca\x67\xef\x8b\x3b\xbc\xce\x2e\xee\xee\xae\xc7\x6f\x27\xf2\xfe\x43\x31\xa6\x24\xfb\x78\xf1\xf1\x6b\x55\x17\x93\x95\x6c\x8b\xb3\x3e\x47\xb3\x1e\xd8\xcf\x95\x78\x37\x05\x07\xfa\x6a\xbc\x06\xfd\xb0\x57\xfe\x40\x4c\x7a\xa0\xc4\x66\x23\x0e\x58\xc2\xb2\x26\x52\xc3\xa4\x47\x94\x82\x4a\x48\x9b\xd0\x15\xdb\x22\xff\x2e\x95\x2f\x51\x07\xaf\xc2\xce\xdd\x57\x69\xea\x16\x69\xec\x7a\x6e\x50\x94\x61\x44\x22\x3f\x88\x92\x30\x47\x9c\xb8\xc9\x24\xcc\x7c\x37\xf0\xaa\x30\x49\xbd\x5f\x00\xd4\xdd\x67\x7e\x3e\x0d\xc3\xf1\x38\x9d\xfb\xc1\x34\x2a\x3d\x3f\xc3\x71\xea\x93\xc8\x2d\x83\x34\x4e\x8b\x71\x58\x78\x14\xe7\xde\xfc\x35\x28\xbb\x7b\x1a\xe6\x29\x8e\xfd\xa4\x1a\x07\x33\xe2\x4f\xdc\x2c\x8a\xe6\x29\x89\xc6\x5e\xec\x45\x63\x3f\x2e\xd3\x68\x3e\x19\x63\x8a\x3d\xe8\x2f\xc5\x96\x74\x51\x9f\x40\xb4\x40\xc9\xc9\x66\x8d\x6c\xb5\xd6\x3d\x84\xde\xbc\x79\xd3\xe7\xb3\xd3\x98\xe7\xd7\xfd\x6f\x07\xee\x0d\x4d\x31\x5e\xb5\x92\xc0\x41\xb4\xb0\x32\xfc\xca\x01\xa5\x14\xd2\x80\xe3\x76\xcd\x14\x48\xfc\xda\x9a\x5d\x98\x02\x2e\x34\xa8\xb6\x69\x84\xd4\x58\x42\x81\x94\xb4\x0a\x8d\xa6\xb4\xd8\x37\x4b\x64\xcb\xb9\xe1\x48\xcb\x80\x4a\x13\x6d\x1a\xa0\x35\xa2\x21\xdc\xb4\xbc\x93\x3b\x4e\x2f\xfb\x9d\x48\xba\x66\x5b\x1c\x9e\xfd\x57\xef\x14\xc0\xce\xf4\x8f\x16\x50\x8a\xff\xb6\x1a\x04\x36\x96\x7d\x1b\x22\x99\x3e\x74\x1b\x59\x2b\x8f\x36\x1e\x5c\x8d\xba\x9f\x9f\xfb\x05\x8e\x43\xd7\x84\xf1\xdf\xbb\xcf\x8e\x63\xbc\xfd\x3d\x70\x03\x37\x04\xc7\xd9\x11\xd9\xf4\x7f\x9c\x82\x48\xc9\x50\x42\x14\xa7\xae\xeb\xba\xe0\x38\x5c\x38\x84\x53\x86\x5c\x3b\xc5\x46\xd0\x47\xd5\xc9\x14\xca\x2d\x3a\x1b\x93\x54\x70\x9c\x9a\xec\x9d\xc6\xb4\x28\xf8\x91\x51\x52\x9c\x34\x6a\x2d\x74\x2f\xb4\xb2\x9a\xf1\xef\x7e\x1a\x9f\x09\xd5\x6c\x8b\xe0\x38\x06\x9a\x26\x45\xa2\xaa\x5e\x66\x02\x1c\xa7\x2c\x1c\x2a\xea\xc6\xac\x17\x1c\x94\x2a\x4d\x48\x84\xae\xd1\x51\xec\x09\x21\x74\xb3\x18\x1c\xe7\x8b\x12\x5c\x36\xd4\x59\x0b\xa5\x15\x90\xcd\xe6\x44\xc6\xb8\x46\x59\x11\x8a\x46\xfe\xf9\xfb\x72\xbf\x4c\xe6\xcf\x2a\x3f\x36\xe1\x63\x69\x3a\x89\x63\xe7\x88\x16\x70\x8f\xc5\xd2\xc8\xb5\x02\x9b\x13\x09\x95\x14\x35\xb4\x5c\xcb\x56\x19\x48\x08\xc9\x56\x8c\x8f\x60\x38\x3c\x7b\xb5\x9e\xa6\x65\x5f\xd4\xf2\xb3\xe3\xb4\x5c\x91\x0a\x1d\xdc\x37\x42\xe1\x67\xa8\x36\x64\xf5\x03\x80\xff\x6f\x3c\xed\xff\x8b\x3c\xfd\x5d\x2f\xfd\xd3\x4c\xed\xb9\xe1\xd0\x8b\xc2\xa1\x97\x0e\xa3\x17\xc7\xf2\x91\x4a\x97\xc5\xbe\xb8\x9c\x14\x0f\xeb\xec\xfd\x27\xad\xae\x0f\x9f\x2e\xca\xdb\x85\x24\xe1\x4d\xb3\xcc\x43\x5d\x6c\x55\x4c\xb8\xe7\x7d\xd9\x5d\xe4\xfe\xd3\xd9\x4f\xcc\x47\x43\x2f\x8d\x86\x7e\x90\xbc\xb6\xc1\x75\xed\xd3\x65\x2d\x67\x8c\x2c\x3f\x7e\x0a\x57\x77\xdb\xe4\xfe\x62\xdd\xac\x6e\x76\x22\xdd\x89\xf9\x52\xbd\x5d\x3f\x5c\x14\x17\x2c\x20\x79\xba\xff\x35\x57\x5b\xd2\x78\x95\xa9\xfd\xff\x07\xaa\xfe\x05\x53\x7b\x41\xec\xcf\xe8\xb8\x4a\xe3\x24\xf3\xc3\x60\xe6\x87\x55\xee\xce\x26\xa1\x1f\x95\x3e\x7a\x6e\xee\xa6\xbe\x1f\xd0\x64\xfa\x4b\xa6\x4e\xbc\xd4\x9d\x26\x49\xe0\xb9\x25\xd2\x34\x1f\xfb\x69\x4e\x52\xd7\x9f\x51\x37\x9b\x57\xb9\x3f\x9d\xc7\x21\x66\x6e\x42\x5f\x67\x6a\x2f\x0d\xbc\xc4\x0d\x53\x2f\x0e\xd3\x0a\xab\x0a\xc3\x2c\x74\xe7\xc1\x34\xcf\xcb\x80\x24\x05\x2d\x0a\x97\x46\x79\x3e\xef\x99\xfa\x46\x34\x4a\xe3\x0b\xae\x2e\xc5\xaa\x21\x9a\xae\xff\xda\x14\x12\xfc\x8b\xe8\x3e\xee\x0e\xbf\xdd\xfe\x7d\xfa\x77\xa0\x12\x0d\x55\xcb\xde\x55\x83\x70\x6b\xe7\x6f\xff\x69\xa3\x49\x97\x80\xd7\x00\x1f\xfc\x7b\xf1\xee\x96\x41\xe6\xcd\x12\x3f\xf0\xa3\x09\x96\x93\xd0\x9b\x85\xa9\x1b\x05\xb3\x24\xf1\xd3\x94\xa4\xd9\xdc\x9f\x05\x9e\xe7\x45\xbf\xc4\xbb\x3f\x49\xdd\xb9\x37\x25\xd5\x94\x24\x24\x9f\x62\xe1\x4f\xbc\x24\x2a\xc3\x71\x18\xe4\x69\x94\x86\x49\x30\xf3\xbc\xc4\x0b\x5e\xc7\xfb\x2c\x09\xd2\xd0\xf3\x42\x77\x4e\x31\x0b\x32\xcf\x9f\xd1\x24\xce\xca\xbc\x4c\xe7\x61\xea\x8f\xab\x88\x26\x71\x3a\xcd\xa3\x93\x71\xfc\x64\xfa\x1e\x00\x60\x5d\x10\x49\x49\x89\x52\xfc\x25\xb4\x7b\xee\x3f\x03\x43\x2f\x4b\x87\x9e\xef\x0f\x3d\xef\x55\x5e\xcc\x57\xc1\x8c\xe6\x5a\xfe\xf9\x69\xb2\xdf\x3d\xc5\x8f\xb1\xba\xcd\xd8\xc3\xf2\xe6\x49\x3f\x65\xd3\xe4\x70\xf7\xd4\x8c\x17\x37\xb3\xf9\x93\xbc\x13\x9f\x5e\xe2\x30\xf4\x87\xbe\xef\x0d\x3d\xef\x55\x62\xbf\xbc\xd8\xb1\xfd\x1f\xc8\xdb\x3f\xf2\x4f\x5f\x1f\xdf\x5f\xd6\xfc\xed\x32\x7f\x3f\xfd\xf2\x54\x25\x78\xf1\x51\xc4\x5a\x0a\xb6\x7a\xd8\xd7\x49\x1e\xdd\xfc\x1a\x88\x75\x97\xc4\xd7\x80\xe8\xfd\x7b\x81\x98\xcf\xc3\x28\xa6\x5e\x1c\xa4\x31\x89\xc3\xaa\x0c\xe7\x61\x11\x67\xa4\xf2\x02\x92\xc6\xd3\xca\x1d\x47\xb1\x9f\x13\xd7\xfd\x25\x10\xe3\x20\x19\xa7\x93\x60\xea\xe7\x79\x30\xa1\xbe\x1b\x4f\xb3\x30\xf2\xb2\x22\x0a\xd3\xcc\x77\xd3\x8c\x66\xb3\x38\xc9\x32\xf7\x75\x20\x8e\x23\x0c\xfd\xa0\x9c\xd0\x24\x74\x8b\xf1\x24\x75\xab\xcc\x8d\xbd\x20\x40\x2f\x8a\x5d\xaf\xca\x52\x37\xcb\xd2\x20\x8a\xcf\x06\xe6\xde\x4f\x34\x81\xa5\x16\x92\xac\x70\xa0\xba\xbf\xdd\x6d\x7e\x41\xf4\xda\x66\x66\x63\xee\x8c\xd3\x31\x54\x6c\x83\x03\x80\x86\xe8\xf5\x08\xce\x75\xdd\x9c\x7f\x7b\x55\xf8\x9f\x92\x68\x32\xb4\x2b\xcb\xc2\xd8\x9d\x08\x5e\xb1\x55\x2b\x89\x9d\x8a\x8e\x1b\x50\x2b\x5d\xfe\xf5\x6d\x3a\x03\x2f\x76\xcb\x29\x15\x2d\xd7\x0a\x1e\xf1\x00\x7d\x14\x03\xd2\x0b\xcd\x3e\x8f\x78\x30\x62\xec\x2d\x1e\x3f\x19\xdd\x77\xcf\x63\xe0\xce\x00\xc8\x02\x21\x5f\xbc\x03\xc2\x4b\x58\xf8\x0b\x58\x76\x33\x9c\x39\x38\x90\x9b\x93\x61\x60\x38\xff\xad\x50\x9a\x93\x1a\x47\xf0\xfc\x12\x30\x78\x03\x0b\x21\x75\x6f\xc6\x98\xf8\xb9\xaa\x59\x34\x82\xd4\x4d\x7d\xb3\xbd\xe9\x52\x47\x0b\x3b\x08\x03\x3d\xcd\x9a\x1a\x34\x7e\xd3\x25\x69\xd9\x20\x65\xd5\x01\x66\x7b\x6d\xe7\x2d\x78\xb7\x38\xf1\xd6\x0e\x88\x94\x70\x28\x10\x24\x9a\x19\xb8\x04\xa2\x81\x55\x50\xe0\x9a\xf1\x12\xae\xf2\x5b\x63\x06\x7b\xed\x77\x8b\x11\xec\x86\xfb\xe1\x61\xf8\xd4\x95\xc0\x78\xdd\x2a\x2c\x9f\x1b\xc1\xc4\xbd\x21\x07\x94\xa6\x10\xd6\x5d\xdb\xc6\x76\xf5\x2d\xab\x51\xb4\x36\x4c\x0e\xa2\x41\xde\x3f\xf6\xf4\x13\xb0\x3d\x3b\xed\x54\x3f\x80\xa3\xb8\x57\x19\xc1\x59\xe0\x2a\x0b\xbb\xeb\x16\x5b\xfc\x21\x5c\xbb\x3b\x51\x07\x4e\xd7\x52\x70\xd1\x2a\x73\x1c\x53\x54\x8a\xf1\xd5\xe0\xab\x51\xe8\x92\xd1\x3d\x55\xa9\x2e\xf4\xb6\x2e\x50\x1a\x72\x34\x3d\x8f\x52\x9d\x53\xc1\x95\x61\xcd\xfe\x70\xdf\xb1\xcd\xc6\xe4\x85\x6c\xcc\x48\xaf\xbb\xcc\x28\x4d\xa4\x6e\x9b\x01\x18\xfd\xfb\x4e\xd1\xf0\xa7\x6b\xed\xcf\x25\xa2\x82\xb6\x81\xc9\xe2\x0e\xe8\x81\x6e\x50\x75\xc1\x76\x5b\x98\xfb\xdb\x8e\x30\xfb\xc6\x65\x3c\xc6\x2d\x1a\x24\x41\xff\xf9\x9e\x30\x1b\xef\xc7\x65\xc7\x3f\x96\xc4\x7b\x1f\x25\x6a\xc9\xd0\xde\x43\xc4\xae\x4f\x37\x01\x4d\x94\x21\x71\xf3\xe7\xa6\x5b\x60\xb9\x7c\x70\x42\x7a\xca\xd6\x9f\xd1\xef\x33\x36\x38\x52\x5e\x0f\x12\xdc\xa0\x61\xb3\xdd\x9a\xd1\xf5\x33\x1d\x42\x8f\x75\x53\x16\x73\x0f\xed\xcf\x11\x61\x32\xd8\x8f\x3b\x25\xb0\xee\xc2\x41\x5b\xa5\x45\xdd\x6f\x72\x6c\xc4\xfe\x39\xb0\x6f\xb1\x2b\x8b\xf9\x33\x43\xbc\x67\xcf\x8f\x7e\xb6\xc7\x7b\xc3\xcf\xfb\xd2\x8d\xb9\x22\x76\xe0\xfc\x6d\x87\xf6\x86\xcc\x24\xc2\x4e\x81\x90\xc0\x1a\xda\xbf\x04\x92\x62\x83\xe6\xbf\xd4\x0e\x5a\x5d\x36\xcd\x40\x65\x14\xef\x6e\x3e\x8c\x60\xad\x75\x33\x3a\x3f\xb7\x57\x32\x73\x8f\x1b\x65\x51\x18\xd9\xbd\x6b\xb2\x67\xb5\x09\xb1\xcf\xe7\x8a\x98\x98\x18\xb5\xf6\x1a\x72\x38\x26\x58\x12\xae\xfa\x8b\x22\xe3\xb0\x43\x66\xb5\x7d\x17\x2e\x76\xc8\x80\x8b\xdd\x00\x8c\xad\x0b\xa2\x16\x46\x7b\x04\xbe\xfb\xfc\xcf\x2e\xbd\x20\x0a\x36\xac\x66\xfd\x59\x51\xb2\xaa\x42\x69\xa2\x7b\xae\x90\x68\xf0\xd8\xb5\x60\xfc\xf8\x60\x57\x1f\x1f\x31\x27\x76\x70\xb4\x10\xeb\x6d\x1a\x69\x5e\x96\x97\x78\x18\x41\x70\x2a\xbc\xc1\xad\x78\x44\x2b\x8f\xa2\xa3\xb8\x3b\x29\x26\xa2\xae\x99\xa1\x8e\x1f\xe4\x0b\x89\xc7\x4f\xde\x37\x53\xbc\xd2\x1f\x19\xd7\x23\xc8\xbe\xc5\x71\xec\x5d\x2d\x2c\x84\xbb\xfc\xf0\x6f\x35\x3b\xcd\x54\x5f\x9d\xb2\xec\xde\x6c\x09\xd8\xcb\xbe\xa5\xc5\xae\x48\xa0\x25\x5b\xad\x50\x62\xd9\x75\xba\xc6\xbd\x3e\xa2\xbf\xeb\xf6\xd8\x35\xed\xfe\xda\xc6\x12\x49\x09\x82\x6f\x0e\x27\xc9\x7b\x7e\xb8\x3e\xba\xf4\xcd\xf4\x0d\x92\xf2\x7b\xf3\x5e\xd4\x5b\xbf\x32\x18\x3b\xf5\xbd\x11\x62\x63\x2a\xfa\xdc\x71\x5a\x80\x42\x5e\xfe\x00\x06\xb1\xb5\x0c\x57\x93\xfd\x73\xe3\xf9\x7d\xa6\x7e\x6e\xd2\x3e\x19\x6c\xc9\xc6\xda\x3d\x74\xac\x40\x8c\x83\xb4\x95\x16\x0f\xa7\x1a\x6b\xa2\xa0\x40\xe4\x50\xa2\x46\xaa\x6d\x9a\x8e\x06\xcc\x7e\xe6\xbc\xf7\xfb\x08\xa6\x4c\xd9\x3e\xb0\x16\x95\xa8\x5f\xf4\x91\x82\x52\x9c\xbe\x2c\x81\xde\x5b\x8f\x48\x63\xc0\xac\xf7\x0b\x21\x36\x39\x35\x6c\x39\xe3\xc6\x52\x39\x02\x2d\x5b\x34\x2c\x42\xf8\x01\x4a\x2c\xda\xd5\xaa\x67\x6a\xd3\xdc\x96\x17\x57\x02\xcc\x26\x03\xfb\xb5\x23\x91\xa6\x91\xa2\xea\x40\x7e\x54\x31\x67\x80\x91\x8e\xa0\x22\x1b\x85\x83\x41\x87\xba\xfe\x8d\xbe\x91\x48\x7b\xf0\xd9\x0d\xff\x37\x00\x00\xff\xff\xc6\xae\x60\xfe\x98\x18\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6296, mode: os.FileMode(420), modTime: time.Unix(1554990288, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1554467633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

