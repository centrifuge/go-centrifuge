// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5b\x73\xdb\x36\x16\x7e\xd7\xaf\x38\xa3\xbc\xb4\x33\x4b\x99\xf7\x8b\x66\x3a\x3b\xbe\x26\x6e\x1c\x57\xb6\xe5\xba\xf1\xcb\x06\x04\x0e\x45\xc4\x14\xc0\x00\xa0\x2e\xf9\xf5\x3b\x00\x29\xd5\x8e\x63\x77\xb7\x9d\xee\xfa\xc5\x14\x80\x73\xff\xce\x87\xcb\x1b\x38\xc1\x8a\x74\x8d\x01\x86\x2b\x6c\x64\xbb\x44\x61\xc0\xa0\x36\x02\x0d\x90\x05\xe1\x42\x1b\x50\x5c\x3c\x60\xb9\x1d\x51\x14\x46\xf1\xaa\x5b\xe0\x25\x9a\xb5\x54\x0f\x53\x50\x9d\xd6\x9c\x88\x9a\x37\xcd\xc8\x29\xe3\x02\xc1\xd4\x08\x6c\xd0\x2b\xfa\x95\x1a\x4c\x4d\x0c\x1c\xef\x35\xc0\x92\x70\x61\xac\xfe\xd1\x6e\xc9\x74\x04\xf0\x06\x2e\x24\x25\x8d\x73\x81\x8b\x05\x50\x29\x8c\x22\xd4\x00\x61\x4c\xa1\xd6\xa8\x41\x20\x32\x30\x12\x4a\x04\x8d\x06\xd6\xdc\xd4\x80\x62\x05\x2b\xa2\x38\x29\x1b\xd4\x93\x11\xec\xe4\xad\x4a\x00\xce\xa6\x10\x45\x91\xfb\x46\x53\xa3\xc2\x6e\x39\x44\x70\xce\xa6\x90\x47\x79\x3f\x57\x4a\x69\xb4\x51\xa4\x9d\x21\x2a\xdd\xcb\x7a\x30\x3e\xe0\x6d\x7c\x10\x84\xd9\xc4\x9f\xf8\x93\xe0\xc0\xd0\xf6\x20\xca\x43\x3f\x3c\xe0\x6d\xa5\x0f\xae\x96\xf3\xab\x4d\xb9\x7e\xe8\xee\x3f\x7e\x3c\xa9\xba\xaf\xf3\x72\x73\x7a\x78\x8d\xf3\xcb\xe3\x0b\xf9\x75\xbb\x4d\x92\x7c\x75\x25\x16\xbf\xae\x66\x1f\x3e\x5f\x7c\x7c\x18\xff\x81\xd2\x68\xa7\xf4\xd7\x2a\x3d\xbd\x4c\x97\x0f\x5f\xee\xf0\xf3\xdd\xfb\xbb\xf0\xcb\xac\x0b\xd2\xdf\x5a\xf6\x36\x7a\xf8\x59\x06\xf3\x68\x59\x93\x7a\x76\x94\xdc\x60\x22\x82\x5e\xe9\x2e\x55\x87\xbb\x4c\xf5\x01\xd8\xf0\x51\x18\x6e\xb6\x67\x84\x1a\xa9\xb6\x53\x18\x8f\x87\x19\x22\x68\x2d\xd5\x35\xb6\x52\xf3\x6f\xa6\x5a\xb2\xb5\x58\xf8\xa5\x6c\xf8\x82\x18\x2e\x85\x9b\x73\x15\xfa\x40\xb8\xf8\x2e\x5e\x86\x42\xc2\x0f\xd7\x3d\x60\x7e\x1c\xc1\x63\x80\xf4\xfe\xbc\x81\xcb\x6e\x89\x8a\x53\x38\x3f\x01\x59\x39\xb0\x3c\x82\xc5\xa0\x63\x5f\xb7\x24\x18\xa4\x8e\x76\xc5\x81\x86\x6b\x63\x25\x85\x64\xf8\x1c\x57\xad\x92\x2b\xee\x26\xa4\xd3\xfd\xc8\x81\x9d\xa3\x7f\x58\xec\x28\x99\x84\x61\x32\x09\x7d\x7f\x12\x87\xdf\x16\x3c\x08\x4f\xa2\xf7\x52\xde\x5d\x70\x4e\xaf\x7e\x5d\xcf\xeb\xf9\xd1\xc7\x74\xf3\x9e\xce\xe4\x45\x95\x5e\x5f\x7d\xfc\xf9\xac\x5d\x57\x81\xca\x92\xf5\xc5\x26\xbc\xbf\x8e\xda\x63\x16\x8c\xbf\xa7\x3e\x4f\x27\x61\xe0\xbf\xa4\xfe\xea\xfe\xc3\x61\xfe\x76\xf6\x4e\xad\x4e\xef\x8f\x8a\x35\x7b\x90\xb7\xf4\xf0\x70\x79\x7c\xff\xae\x2d\x70\xbb\xbd\x8f\x6f\x4e\xf3\xc5\x99\x8a\xea\xf9\xe5\x6f\xe3\x21\x47\xa7\x03\xb8\xf7\x95\x38\x3f\x01\x0f\x86\x6a\xbc\x04\xff\x78\x10\xbe\x20\x36\x3d\xc0\xb0\x6d\xe4\x16\x19\xdc\x2c\x89\x32\x70\x3c\xa0\x4a\x43\x25\x95\x4b\xe8\x82\xaf\x50\x3c\x49\xe5\x73\xe4\xc1\x8b\xd0\xf3\x37\x2c\x25\x31\x4b\xf2\x80\x15\x19\x8b\xcb\xa0\xf0\x73\xa4\x89\x9f\x17\x48\x8a\x24\x4b\xf3\x90\x64\xa4\x8a\x48\x15\xbc\x02\x52\x7f\x43\xc2\x38\x0b\xca\x24\x4a\x59\x10\x65\xc4\xcf\xc3\x2c\x2b\x31\x0d\xe2\x28\x09\xb3\xbc\x28\x49\x9c\x96\x79\xce\xb2\xf4\x35\x38\xfb\x9b\x0a\x93\x22\xae\x58\x86\x69\x84\x61\x48\x4a\x8c\x53\x52\x54\x7e\x96\x93\xa2\x28\x31\x2a\xa3\xaa\x24\x05\x61\x74\x00\xfe\x7b\xb9\x22\x7d\xe4\x8f\x60\x5a\xa2\x12\xa4\xa9\x91\x2f\x6a\x33\xc0\xe8\xcd\x9b\x37\x43\x4e\x7b\x89\xb3\xc3\xab\xe1\xb7\x07\x77\x96\xae\xb8\xa8\x3a\x45\x60\x2b\x3b\x58\x58\x9e\x15\x80\x4a\x49\x65\x01\x32\xaf\xb9\x06\x85\x5f\x3a\x6b\x85\x6b\x10\xd2\x80\xee\xda\x56\x2a\x83\x0c\x4a\xa4\xa4\xd3\x68\x25\x95\xc3\xbf\x5d\xa2\x3a\x21\x2c\x57\x3a\x26\xd4\x86\x18\xdb\x04\x9d\x1d\x9a\xc0\x75\x27\xfa\x71\xcf\x1b\xc6\x7e\x22\x8a\xd6\x7c\x85\x93\xf1\x3f\x06\xa7\x00\xd6\xb6\x87\x8c\x04\x26\xff\xe9\x24\x08\x34\x8e\x85\x5b\xa2\xb8\xd9\xf6\x86\x9c\x96\x07\x17\x0f\x2e\xa6\xfd\xcf\x4f\xc3\x02\xcf\xa3\x35\xe1\xe2\xa7\x7e\xda\xf3\xac\xb7\x3f\x45\x7e\xe4\xc7\xe0\x79\x6b\xa2\xda\xe1\x9f\x57\x12\xa5\x38\x2a\x48\xd2\xdc\xf7\x7d\x1f\x3c\x4f\x48\x8f\x08\xca\x51\x18\xaf\x6c\x24\x7d\xd0\xfd\x98\x46\xb5\x42\xaf\xb1\x49\x05\xcf\x5b\x92\x8d\xd7\xda\x36\x85\x30\xb1\x42\x5a\x90\x56\xd7\xd2\x0c\x83\x6e\x6c\xc9\xc5\x93\x9f\xd6\x67\x42\x0d\x5f\x21\x78\x9e\x85\xa7\x4d\x91\xac\xaa\xe7\x99\x00\xcf\x63\xa5\x47\xe5\xb2\xb5\xeb\xa5\x00\xad\x99\x0d\x89\xd0\x1a\x3d\xcd\xbf\x22\xc4\x7e\x91\x82\xe7\x7d\xd6\x52\xa8\x96\x7a\xb5\xd4\x46\x03\x69\x9a\x47\x63\x5c\x18\x54\x15\xa1\x68\xc7\x3f\x3d\x2d\xf7\xf3\x64\x7e\xaf\xf2\x47\x36\x7c\x64\xb6\x9b\x04\xf6\x8e\x18\x09\x77\x58\xde\xd8\x71\xa3\xc1\xe5\x44\x41\xa5\xe4\x12\x3a\x61\x54\xa7\x2d\x24\xa4\xe2\x0b\x2e\xa6\x30\x99\x8c\x5f\xac\xa7\x6d\xdb\x67\xb5\xfc\xe4\x79\x9d\xd0\xa4\x42\x0f\x37\xad\xd4\xf8\x09\xaa\x86\x2c\xbe\x01\xf0\x7f\xc7\xd5\xe1\x5f\xe4\xea\x27\xbd\xf4\x1f\xb3\x75\xe0\xc7\x93\x20\x89\x27\x41\x3e\x49\x9e\x6d\xcf\x3b\x3a\x9d\xe9\x94\x13\xbc\xed\xce\xee\x2f\xbb\xe0\xed\x66\xa5\xb7\x47\xf3\x1b\x35\xd7\xc5\xca\x1c\xa5\xa5\xf9\x70\x28\xde\x9d\xc9\x8b\xcf\xe5\xc3\xd7\x63\x32\xfe\x8e\xfa\x64\x12\xe4\xc9\x24\x8c\xb2\x17\x0d\x1c\xbf\xa5\x6b\x3e\xff\x2c\xdf\xdf\xbd\xab\x8e\x48\x9c\x87\xb7\x33\x43\xf0\x76\x73\x79\xb1\x66\xf9\xd7\x52\x1c\x05\x37\xd9\x1a\x0f\xef\x6f\x37\xf7\xaf\xf3\xb5\x23\x8d\x17\xd9\x3a\xfc\x1b\xe8\xfa\x15\xb6\xae\xca\xd8\x4f\x31\x2f\xb3\x2a\x09\x2a\xbf\x88\xb2\x2c\xcc\xca\x28\xab\xb2\x84\x46\xa1\x1f\xa4\x69\x1c\x96\x69\x98\xa4\xaf\xb2\x75\x56\x54\x41\x46\x58\x45\x0b\x52\xc5\x55\x1c\xc5\x7e\x18\xf8\x41\x1e\xfb\x11\x8d\xd3\xb2\x0a\x58\x9a\xd0\x2c\x60\xd9\xeb\x6c\x5d\x94\x49\x91\x47\xa9\x1f\x85\x79\x1a\x66\x55\xc2\xa2\x92\x15\xd4\x0f\x31\xa0\x41\x46\x31\x2c\x68\xce\x08\x21\x64\x60\xeb\x6b\xd9\x6a\x83\xcf\xf8\x9a\xc9\x45\x4b\x0c\xad\xff\xdc\x69\x24\xfa\x8b\x08\xdf\x59\x87\x1f\xe6\xbf\x9c\xfc\x02\x54\xa1\xa5\x6b\x35\xb8\x6a\x51\xee\xf4\xfc\xf8\x22\xe8\xff\xf6\x43\xca\xff\xef\x98\xd2\x27\xe1\x25\xe0\x47\xff\x5b\xdc\x07\x25\x09\xf2\x32\x0d\xa2\x28\xab\x48\x10\x06\x51\x54\x44\x51\x51\x26\x49\x9c\x45\x3e\xf5\x31\xf3\xcb\x82\xe4\x01\x7d\x15\xf7\x55\x95\x54\x51\x52\xa5\x55\x54\x04\x3e\xb2\x34\x25\x61\x5c\xa6\x98\x24\x49\x1c\x62\x9a\x96\x79\x9a\xc7\x41\x4a\xa2\xd7\x71\x1f\xe7\x34\x4c\x30\x4b\xa3\x02\xf3\x3c\xc7\x34\xcd\xaa\xd0\x67\x91\x5f\x16\x69\x9a\x44\x0c\xfd\x24\x0e\x93\x80\xe5\xe3\x91\xbd\x82\x11\x43\xe0\xc6\x48\x45\x16\x38\xd2\xfd\xff\xfe\x62\x35\x23\xa6\x76\xd9\x69\xec\xd1\xfd\xe4\x08\x2a\xde\xe0\xc8\x1a\x35\xf5\x14\x0e\xcc\xb2\x3d\xf8\xfd\x82\xf7\x2f\x46\x0c\x99\xb8\x95\xac\xb4\x7a\x8f\xa5\xa8\xf8\xa2\x53\xce\xad\xbd\x01\xea\x46\x6f\xfe\xbc\x99\x5e\xc1\x33\x6b\x87\x94\xca\x4e\x18\x0d\x0f\xb8\x85\x21\x8a\x11\x19\x06\xad\x9d\x07\xdc\xda\x61\x1c\x34\xee\xa6\xac\xec\xf9\x7e\x27\x5e\x5b\x10\x39\x30\x1c\xce\xce\x81\x08\x06\xb3\x70\x06\x37\xfd\x36\x6a\xfb\x16\x85\x6d\xcc\x91\x6d\xb9\x77\x52\x1b\x41\x96\x38\x05\xdf\x5d\xc9\xfc\xd1\x1b\x98\x49\x65\x06\x25\x56\xc1\xf7\x05\xed\xa2\x29\xe4\x7e\x1e\x5a\xe3\xb6\x53\x3d\x23\xdd\x49\x04\xe8\xe3\x9c\xe9\x51\x1b\xb6\x7d\x8a\x6e\x5a\xa4\xbc\xda\xc2\xe9\xc6\xb8\x0d\x0f\xce\x67\x8f\x7c\x75\x3b\x34\x25\xc2\x5e\x70\x15\xda\x43\x08\x03\x62\x80\x57\x50\x62\xcd\x05\x83\xcb\xc3\xb9\x55\x83\x83\xf4\xf9\x6c\x0a\xeb\xc9\x66\xb2\x9d\x7c\xed\x0b\x60\xbd\xee\x34\xb2\x7d\x2b\xd8\xa8\x1b\xb2\x45\x65\xcb\xe0\xdc\x75\x8d\xec\x56\xcf\xf9\x12\x65\xe7\xc2\x14\x20\x5b\x14\xc3\xad\x7b\x38\x82\x38\xe2\x72\xc7\xaa\x11\xec\x86\x07\x91\x29\x8c\x23\x5f\x3b\xd0\x5d\x75\xd8\xe1\x37\xe1\x3a\xeb\x44\x6f\x05\xad\x95\x14\xb2\xd3\x96\x0b\x29\x6a\xcd\xc5\x62\xf4\xc5\x0a\xf4\xc9\xe8\xdf\x0c\x74\x1f\x7a\xb7\x2c\x51\x59\x36\xb5\x5d\x8f\x4a\x1f\x50\x29\xb4\x25\xe8\x81\x59\xd7\xf6\x16\x57\xba\x33\x96\xa4\xc4\xf4\x99\xd1\x86\x28\xd3\xb5\x23\xb0\xf2\x77\xbd\xe0\x14\xfa\xf0\xce\x14\xa2\x86\xae\x85\xe3\xd9\x2d\xd0\x2d\x6d\x50\xf7\xa1\xf6\x06\xec\xf1\x79\x4d\xb8\x7b\x6a\xb0\xfe\xe2\x0a\x2d\x8a\x60\x98\xbe\x23\xdc\x45\xfb\xe1\x66\x0a\xc1\x68\xd8\x2d\x06\x0f\x15\x1a\xc5\xd1\x1d\x03\xe5\x7a\x48\x36\x01\x43\xb4\xdd\x2d\xec\xbf\xeb\x7e\xc1\x14\x02\xdf\xe6\x68\x4f\x7a\xda\x55\x9f\xd3\xa7\xf9\x1a\xed\x28\x6f\x80\x08\x36\x68\xd9\x6c\x5d\x73\x5a\xef\xe9\x10\x06\x9c\xdb\xa2\xd8\x6b\xc0\xb0\x61\x49\x9b\xbf\x61\xa7\x61\xc0\xfb\xf3\x1e\xed\xb4\x91\xcb\xc1\xc8\xae\x09\x87\x57\x99\xa1\xbd\x2e\x1d\xde\xc7\x4b\xc2\xc5\x78\xff\xf6\xe2\xfa\x7b\x50\xbc\xb7\x4b\x1b\x7b\x42\xef\xa1\xf9\xc3\x1a\xdd\x05\x85\x2b\x84\xb5\x06\xa9\x80\xb7\x74\x78\x90\x21\x65\x83\xf6\x93\xba\x3d\xae\xcf\xa6\xdd\xcb\xac\xe0\xed\xf5\xc5\x14\x6a\x63\xda\xe9\xc1\x81\x3b\x11\xdb\x63\xf4\xb4\x48\xe2\x64\x87\x03\xf7\x60\xb4\x20\x36\x16\x4e\xad\xbb\x0b\xa2\x67\xf6\xd3\xe6\x70\xf7\xf7\x6c\x71\xc3\x97\xdc\xf4\x8b\x2f\xec\xe7\x14\xe2\x2c\x08\xa3\x3c\x7f\x82\x6f\x23\x5d\xa1\xfb\x32\x89\xdf\x23\x33\x8a\x08\x4d\xf6\xc7\x6d\x1b\x03\x63\xfd\x03\x13\x01\x77\x23\x71\xc4\xd1\x87\x02\x46\xf1\xc5\x02\x15\xb2\xbe\x1b\x0c\x6e\xcc\x0e\x23\x7d\x47\xa4\xbe\x6d\x89\x97\x0c\x2b\x24\x0c\xa4\x68\xb6\xb6\xd3\x76\x7d\xb2\x7b\x65\xdb\xb9\xf4\xbb\xea\x6b\x24\xec\xa9\xfa\x20\x19\xb4\x5f\xda\x4a\x3c\xf6\xbd\x95\xb2\x81\x25\xd9\xec\x71\x69\x24\x68\x14\xcc\x62\xf2\xd1\x32\xb9\x72\x2c\xb0\x24\x9b\x3d\x3c\xc3\x21\xa7\xdf\x57\xe9\xee\x35\x2b\xd2\x38\xbd\xdb\xbe\x77\x88\x75\x90\x76\x4a\xb9\xc7\x9f\x47\x12\x35\xd1\x50\x22\x0a\x60\x68\x90\x1a\x97\xa6\x9d\x02\x6b\xcf\xee\x8a\xe1\x10\xc1\x09\xd7\x0e\x2d\x4e\xa3\x96\xcb\x67\x68\xd3\xc0\xe4\xe3\xeb\x2f\x98\x8d\xf3\x88\xb4\xdc\x76\xd8\x66\x26\x65\x73\x48\x2d\xa3\x9c\x0a\xab\x89\x4d\xc1\xa8\x0e\x6d\xaf\x11\xb1\x05\x86\x65\xb7\x58\x0c\x6c\x66\x5b\xc0\x71\xc7\x42\x82\x35\x32\x72\xb3\x7d\xab\xb5\xad\x92\x95\x2b\xcf\x5e\xc4\xf2\xa4\x1d\x9d\x42\x45\x1a\x8d\xa3\x51\xbf\xbb\x0f\x0f\x8a\xad\x42\x2a\x97\x0e\x69\xce\xe0\xbf\x03\x00\x00\xff\xff\xcc\xd4\x11\x7b\x45\x15\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 5445, mode: os.FileMode(420), modTime: time.Unix(1553530753, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1553073295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
