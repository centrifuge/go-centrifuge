// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5b\x73\xdb\x36\x16\x7e\xd7\xaf\x38\xe3\xbc\xb4\x33\x4b\x99\x77\x51\x9a\xe9\xec\xf8\x92\x8b\x1b\xc7\x95\x6d\xb9\x6e\xfc\xb2\x39\x04\x0e\x25\xc4\x14\xc0\x00\xa0\x2e\xf9\xf5\x3b\x00\x29\xd5\x8e\x63\x77\xb7\x9d\xee\xfa\xc5\x14\x80\x73\xff\xce\x87\xcb\x2b\x38\xa5\x0a\xdb\xda\x02\xa7\x15\xd5\xaa\x59\x92\xb4\x60\xc9\x58\x49\x16\x70\x8e\x42\x1a\x0b\x5a\xc8\x7b\x2a\xb7\x03\x46\xd2\x6a\x51\xb5\x73\xba\x20\xbb\x56\xfa\x7e\x02\xba\x35\x46\xa0\x5c\x88\xba\x1e\x78\x65\x42\x12\xd8\x05\x01\xef\xf5\xca\x6e\xa5\x01\xbb\x40\x0b\x27\x7b\x0d\xb0\x44\x21\xad\xd3\x3f\xd8\x2d\x99\x0c\x00\x5e\xc1\xb9\x62\x58\x7b\x17\x84\x9c\x03\x53\xd2\x6a\x64\x16\x90\x73\x4d\xc6\x90\x01\x49\xc4\xc1\x2a\x28\x09\x0c\x59\x58\x0b\xbb\x00\x92\x2b\x58\xa1\x16\x58\xd6\x64\x86\x03\xd8\xc9\x3b\x95\x00\x82\x4f\x20\x49\x12\xff\x4d\x76\x41\x9a\xda\x65\x1f\xc1\x19\x9f\x40\x91\x14\xdd\x5c\xa9\x94\x35\x56\x63\x33\x25\xd2\xa6\x93\x0d\xe0\xe0\x50\x34\xe9\x61\x14\x8f\x86\xe1\x30\x1c\x46\x87\x96\x35\x87\x49\x11\x87\xf1\xa1\x68\x2a\x73\x78\xb9\x9c\x5d\x6e\xca\xf5\x7d\x7b\xf7\xf1\xe3\x69\xd5\x7e\x9d\x95\x9b\xd7\x47\x57\x34\xbb\x38\x39\x57\x5f\xb7\xdb\x2c\x2b\x56\x97\x72\xfe\xeb\x6a\xfa\xe1\xf3\xf9\xc7\xfb\x83\x3f\x50\x9a\xec\x94\xfe\x5a\xe5\xaf\x2f\xf2\xe5\xfd\x97\x5b\xfa\x7c\xfb\xfe\x36\xfe\x32\x6d\xa3\xfc\xb7\x86\xbf\x4d\xee\x7f\x56\xd1\x2c\x59\x2e\x70\x31\x3d\xce\xae\x29\x93\x51\xa7\x74\x97\xaa\xa3\x5d\xa6\xba\x00\x5c\xf8\x24\xad\xb0\xdb\x37\xc8\xac\xd2\xdb\x09\x1c\x1c\xf4\x33\x28\xd9\x42\xe9\x2b\x6a\x94\x11\xdf\x4c\x35\xb8\x75\x58\xf8\xa5\xac\xc5\x1c\xad\x50\xd2\xcf\xf9\x0a\x7d\x40\x21\xbf\x8b\x97\xbe\x90\xf0\xc3\x55\x07\x98\x1f\x07\xf0\x10\x20\x9d\x3f\xaf\xe0\xa2\x5d\x92\x16\x0c\xce\x4e\x41\x55\x1e\x2c\x0f\x60\xd1\xeb\xd8\xd7\x2d\x8b\x7a\xa9\xe3\x5d\x71\xa0\x16\xc6\x3a\x49\xa9\x38\x3d\xc5\x55\xa3\xd5\x4a\xf8\x09\xe5\x75\x3f\x70\x60\xe7\xe8\x1f\x16\x3b\xc9\x86\x71\x9c\x0d\xe3\x30\x1c\xa6\xf1\xb7\x05\x8f\xe2\xd3\xe4\xbd\x52\xb7\xe7\x42\xb0\xcb\x5f\xd7\xb3\xc5\xec\xf8\x63\xbe\x79\xcf\xa6\xea\xbc\xca\xaf\x2e\x3f\xfe\xfc\xa6\x59\x57\x91\x1e\x65\xeb\xf3\x4d\x7c\x77\x95\x34\x27\x3c\x3a\xf8\x9e\xfa\x22\x1f\xc6\x51\xf8\x9c\xfa\xcb\xbb\x0f\x47\xc5\xdb\xe9\x3b\xbd\x7a\x7d\x77\x3c\x5e\xf3\x7b\x75\xc3\x8e\x8e\x96\x27\x77\xef\x9a\x31\x6d\xb7\x77\xe9\xf5\xeb\x62\xfe\x46\x27\x8b\xd9\xc5\x6f\x07\x7d\x8e\x5e\xf7\xe0\xde\x57\xe2\xec\x14\x02\xe8\xab\xf1\x1c\xfc\xd3\x5e\xf8\x1c\x5d\x7a\x80\x53\x53\xab\x2d\x71\xb8\x5e\xa2\xb6\x70\xd2\xa3\xca\x40\xa5\xb4\x4f\xe8\x5c\xac\x48\x3e\x4a\xe5\x53\xe4\xc1\xb3\xd0\x0b\x37\x55\x45\x61\x1e\xc5\x61\x98\x13\x71\x24\x8e\x51\x51\x30\x3e\xe6\x55\x96\x66\xa3\x14\xf3\x62\x1c\x87\x38\x1e\xf1\x17\x40\x1a\x6e\x78\x52\xd2\xa8\x48\xf3\x30\xca\x93\x7c\x84\x61\x81\x3c\x2c\x92\x32\xcc\x79\x35\x2e\x90\x8f\x8a\x38\x8a\x79\x88\xd9\x4b\x70\x0e\x37\x31\xcf\xca\x3c\x1d\x85\x58\x45\xc8\xc6\x79\xcc\xb2\xac\xcc\x4b\xa2\x71\x5c\x25\x2c\x29\x58\x1e\x8e\xab\x64\x14\x51\x0f\xfc\xf7\x6a\x85\x5d\xe4\x0f\x60\x5a\x92\x96\x58\x2f\x48\xcc\x17\xb6\x87\xd1\xab\x57\xaf\xfa\x9c\x76\x12\x6f\x8e\x2e\xfb\xdf\x01\xdc\x3a\xba\x12\xb2\x6a\x35\xc2\x56\xb5\x30\x77\x3c\x2b\x81\xb4\x56\xda\x01\x64\xb6\x10\x06\x34\x7d\x69\x9d\x15\x61\x40\x2a\x0b\xa6\x6d\x1a\xa5\x2d\x71\x28\x89\x61\x6b\xc8\x49\x6a\x8f\x7f\xb7\x44\xb7\x52\x3a\xae\xf4\x4c\x68\x2c\x5a\xd7\x04\xad\x1b\x1a\xc2\x55\x2b\xbb\xf1\x20\xe8\xc7\x7e\x42\xcd\x16\x62\x45\xc3\x83\x7f\xf4\x4e\x01\xac\x5d\x0f\x59\x05\x5c\xfd\xd3\x4b\x20\xd4\x9e\x85\x1b\xd4\xc2\x6e\x3b\x43\x5e\xcb\xbd\x8f\x87\xe6\x93\xee\xe7\xa7\x7e\x41\x10\xb0\x05\x0a\xf9\x53\x37\x1d\x04\xce\xdb\x9f\x92\x30\x09\x53\x08\x82\x35\xea\xa6\xff\x17\x94\xa8\xb5\x20\x0d\x59\x5e\x84\x61\x18\x42\x10\x48\x15\xa0\x64\x82\xa4\x0d\xca\x5a\xb1\x7b\xd3\x8d\x19\xd2\x2b\x0a\x6a\x97\x54\x08\x82\x25\x6e\x82\xc6\xb5\x29\xc4\x99\x13\x32\x12\x1b\xb3\x50\xb6\x1f\xf4\x63\x4b\x21\x1f\xfd\x74\x3e\x23\xb3\x62\x45\x10\x04\x0e\x9e\x2e\x45\xaa\xaa\x9e\x66\x02\x82\x80\x97\x01\x53\xcb\xc6\xad\x57\x12\x8c\xe1\x2e\x24\x64\x0b\x0a\x8c\xf8\x4a\x90\x86\xe3\x1c\x82\xe0\xb3\x51\x52\x37\x2c\x58\x28\x63\x0d\x60\x5d\x3f\x18\x13\xd2\x92\xae\x90\x91\x1b\xff\xf4\xb8\xdc\x4f\x93\xf9\xbd\xca\x1f\xbb\xf0\x89\xbb\x6e\x92\xd4\x39\x62\x15\xdc\x52\x79\xed\xc6\xad\x01\x9f\x13\x0d\x95\x56\x4b\x68\xa5\xd5\xad\x71\x90\x50\x5a\xcc\x85\x9c\xc0\x70\x78\xf0\x6c\x3d\x5d\xdb\x3e\xa9\xe5\xa7\x20\x68\xa5\xc1\x8a\x02\xda\x34\xca\xd0\x27\xa8\x6a\x9c\x7f\x03\xe0\xff\x8e\xab\xe3\xbf\xc8\xd5\x8f\x7a\xe9\x3f\x66\xeb\x28\x4c\x87\x51\x96\x0e\xa3\x62\x98\x3d\xd9\x9e\x77\x74\x3a\x35\xb9\x40\xba\x69\xdf\xdc\x5d\xb4\xd1\xdb\xcd\xca\x6c\x8f\x67\xd7\x7a\x66\xc6\x2b\x7b\x9c\x97\xf6\xc3\x91\x7c\xf7\x46\x9d\x7f\x2e\xef\xbf\x9e\xe0\xc1\x77\xd4\x67\xc3\xa8\xc8\x86\x71\x32\x7a\xd6\xc0\xc9\x5b\xb6\x16\xb3\xcf\xea\xfd\xed\xbb\xea\x18\xd3\x22\xbe\x99\x5a\xa4\x9b\xcd\xc5\xf9\x9a\x17\x5f\x4b\x79\x1c\x5d\x8f\xd6\x74\x74\x77\xb3\xb9\x7b\x99\xaf\x3d\x69\x3c\xcb\xd6\xf1\xdf\x40\xd7\x2f\xb0\x75\x18\x21\x2f\xf3\x3c\xc1\x8a\x27\x98\xf1\x51\x9e\x65\xac\x18\xf3\x78\x34\x4a\x19\x55\x59\x54\x84\x61\x95\x94\x65\xfe\x22\x5b\x47\x79\x95\x66\x84\x6c\x94\x8c\xb2\x98\xb0\x1c\x25\xe1\x28\xae\x38\x2f\x91\x95\x8e\xa5\x0b\xe4\x2c\xc1\x34\x7c\x99\xad\xa9\x8c\x58\x8e\x49\xce\xd2\x32\x8a\x93\x14\x11\x69\x44\x8c\x8a\xa2\x2a\xd3\x2a\x2d\x78\x9c\xf0\x3c\x89\xd2\xbc\x67\xeb\x2b\xd5\x18\x4b\x4f\xf8\x9a\xab\x79\x83\x96\x2d\xfe\xdc\x69\x24\xf9\x8b\x08\xdf\x59\x87\x1f\x66\xbf\x9c\xfe\x02\x4c\x93\xa3\x6b\xdd\xbb\xea\x50\xee\xf5\xfc\xf8\x2c\xe8\xff\xf6\x43\xca\xff\xef\x98\xd2\x25\xe1\x39\xe0\x27\xff\x5b\xdc\x47\x25\x46\x45\x99\x47\x49\x32\xaa\x30\x8a\xa3\x24\x19\x27\xc9\xb8\xcc\xb2\x74\x94\x84\x2c\xa4\x51\x58\x8e\xb1\x88\xd8\x8b\xb8\xaf\xaa\xac\x4a\xb2\x2a\xaf\x92\x71\x14\x12\xcf\x73\x8c\xd3\x32\xa7\x2c\xcb\xd2\x98\xf2\xbc\x2c\xf2\x22\x8d\x72\x4c\x5e\xc6\x7d\x5a\xb0\x38\xa3\x51\x9e\x8c\xa9\x28\x0a\xca\xf3\x51\x15\x87\x3c\x09\xcb\x71\x9e\x67\x09\xa7\x30\x4b\xe3\x2c\xe2\xc5\xc1\xc0\x5d\xc1\xd0\x22\x5c\x5b\xa5\x71\x4e\x03\xd3\xfd\xef\x2e\x56\x53\xb4\x0b\x9f\x9d\xda\x1d\xdd\x4f\x8f\xa1\x12\x35\x0d\x9c\x51\xbb\x98\xc0\xa1\x5d\x36\x87\xbf\x5f\xf0\xfe\xc5\xd1\xe2\xd0\xaf\xe4\xa5\xd3\x7b\xa2\x64\x25\xe6\xad\xf6\x6e\xed\x0d\x30\x3f\x7a\xfd\xe7\xcd\x74\x0a\x9e\x58\x3b\x62\x4c\xb5\xd2\x1a\xb8\xa7\x2d\xf4\x51\x0c\xb0\x1f\x74\x76\xee\x69\xeb\x86\xa9\xd7\xb8\x9b\x72\xb2\x67\xfb\x9d\x78\xed\x40\xe4\xc1\x70\x34\x3d\x03\x94\x1c\xa6\xf1\x14\xae\xbb\x6d\xd4\xf5\x2d\x49\xd7\x98\x03\xd7\x72\xef\x94\xb1\x12\x97\x34\x81\xd0\x5f\xc9\xc2\xc1\x2b\x98\x2a\x6d\x7b\x25\x4e\xc1\xf7\x05\xdd\xa2\x09\x14\x61\x11\x3b\xe3\xae\x53\x03\xab\xfc\x49\x04\xd8\xc3\x9c\x99\x41\x13\x37\x5d\x8a\xae\x1b\x62\xa2\xda\xc2\xeb\x8d\xf5\x1b\x1e\x9c\x4d\x1f\xf8\xea\x77\x68\x86\xd2\x5d\x70\x35\xb9\x43\x08\x07\xb4\x20\x2a\x28\x69\x21\x24\x87\x8b\xa3\x99\x53\x43\xbd\xf4\xd9\x74\x02\xeb\xe1\x66\xb8\x1d\x7e\xed\x0a\xe0\xbc\x6e\x0d\xf1\x7d\x2b\xb8\xa8\x6b\xdc\x92\x76\x65\xf0\xee\xfa\x46\xf6\xab\x67\x62\x49\xaa\xf5\x61\x4a\x50\x0d\xc9\xfe\xd6\xdd\x1f\x41\x3c\x71\xf9\x63\xd5\x00\x76\xc3\xbd\xc8\x04\x0e\x92\xd0\x78\xd0\x5d\xb6\xd4\xd2\x37\xe1\x7a\xeb\x68\xb6\x92\x2d\xb4\x92\xaa\x35\x8e\x0b\x19\x19\x23\xe4\x7c\xf0\xc5\x09\x74\xc9\xe8\xde\x0c\x4c\x17\x7a\xbb\x2c\x49\x3b\x36\x75\x5d\x4f\xda\x1c\x32\x25\x8d\x23\xe8\x9e\x59\xd7\xee\x16\x57\xfa\x33\x96\x62\x68\xbb\xcc\x18\x8b\xda\xb6\xcd\x00\x9c\xfc\x6d\x27\x38\x81\x2e\xbc\x37\x9a\xc8\x40\xdb\xc0\xc9\xf4\x06\xd8\x96\xd5\x64\xba\x50\x3b\x03\xee\xf8\xbc\x46\xe1\x9f\x1a\x9c\xbf\xb4\x22\x87\x22\xe8\xa7\x6f\x51\xf8\x68\x3f\x5c\x4f\x20\x1a\xf4\xbb\x45\xef\xa1\x26\xab\x05\xf9\x63\xa0\x5a\xf7\xc9\x46\xb0\x68\xdc\x6e\xe1\xfe\x5d\x75\x0b\x26\x10\x85\x2e\x47\x7b\xd2\x33\xbe\xfa\x82\x3d\xce\xd7\x60\x47\x79\x3d\x44\xa8\x26\xc7\x66\xeb\x85\x60\x8b\x3d\x1d\x42\x8f\x73\x57\x14\x77\x0d\xe8\x37\x2c\xe5\xf2\xd7\xef\x34\x1c\x44\x77\xde\x63\xad\xb1\x6a\xd9\x1b\xd9\x35\x61\xff\x2a\xd3\xb7\xd7\x85\xc7\xfb\xc1\x12\x85\x3c\xd8\xbf\xbd\xf8\xfe\xee\x15\xef\xed\xb2\xda\x9d\xd0\x3b\x68\xfe\xb0\x26\x7f\x41\x11\x9a\x60\x6d\x40\x69\x10\x0d\xeb\x1f\x64\xb0\xac\xc9\x7d\x32\xbf\xc7\x75\xd9\x74\x7b\x99\x13\xbc\xb9\x3a\x9f\xc0\xc2\xda\x66\x72\x78\xe8\x4f\xc4\xee\x18\x3d\x19\x67\x69\xb6\xc3\x81\x7f\x30\x9a\xa3\x8b\x45\x30\xe7\xee\x1c\xcd\xd4\x7d\xba\x1c\xee\xfe\x9e\x2c\xae\xc5\x52\xd8\x6e\xf1\xb9\xfb\x9c\x40\x3a\x8a\xe2\xa4\x28\x1e\xe1\xdb\x2a\x5f\xe8\xae\x4c\xf2\xf7\xc8\xac\x46\x69\x70\x7f\xdc\x76\x31\x70\xde\x3d\x30\x21\xf8\x1b\x89\x27\x8e\x2e\x14\xb0\x5a\xcc\xe7\xa4\x89\x77\xdd\x60\x69\x63\x77\x18\xe9\x3a\x22\x0f\x5d\x4b\x3c\x67\x58\x13\x72\x50\xb2\xde\xba\x4e\xdb\xf5\xc9\xee\x95\x6d\xe7\xd2\xef\xaa\xaf\x08\xf9\x63\xf5\x51\xd6\x6b\xbf\x70\x95\x78\xe8\x7b\xa3\x54\x0d\x4b\xdc\xec\x71\x69\x15\x18\x92\xdc\x61\xf2\xc1\x32\xb5\xf2\x2c\xb0\xc4\xcd\x1e\x9e\x71\x9f\xd3\xef\xab\xf4\xf7\x9a\x15\xd6\x5e\xef\xb6\xeb\x1d\x74\x0e\xb2\x56\x6b\xff\xf8\xf3\x40\x62\x81\x06\x4a\x22\x09\x9c\x2c\x31\xeb\xd3\xb4\x53\xe0\xec\xb9\x5d\x31\xee\x23\x38\x15\xc6\xa3\xc5\x6b\x34\x6a\xf9\x04\x6d\x06\xb8\x7a\x78\xfd\x05\xbb\xf1\x1e\x61\x23\x5c\x87\x6d\xa6\x4a\xd5\x47\xcc\x31\xca\x6b\xe9\x34\xf1\x09\x58\xdd\x92\xeb\x35\x94\x5b\xe0\x54\xb6\xf3\x79\xcf\x66\xae\x05\x3c\x77\xcc\x15\x38\x23\x03\x3f\xdb\xb5\x5a\xd3\x68\x55\xf9\xf2\xec\x45\x1c\x4f\xba\xd1\x09\x54\x58\x1b\x1a\x0c\xba\xdd\xbd\x7f\x50\x6c\x34\x31\xb5\xf4\x48\xf3\x06\xff\x1d\x00\x00\xff\xff\xf9\xd1\x4a\xaf\x45\x15\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 5445, mode: os.FileMode(420), modTime: time.Unix(1551950596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1551953677, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
