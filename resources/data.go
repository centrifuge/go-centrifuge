// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x5b\x73\xdb\x36\x16\x7e\xd7\xaf\x38\x23\xbf\xb4\x33\x4b\x99\xf7\x8b\x66\x3a\x3b\xba\x26\x6e\x1c\x57\xb6\xe5\xba\xf1\xcb\x06\x04\x0f\x25\xc4\x14\xc0\x00\xa0\x2e\xf9\xf5\x3b\x00\x29\xc7\x89\x2f\xdd\x6d\xa7\xdd\x87\xf5\x8b\x6d\x10\xe7\xfe\x9d\x0f\x07\x38\x81\x29\x96\xa4\xa9\x34\x14\xb8\xc5\x4a\xd4\x1b\xe4\x1a\x34\x2a\xcd\x51\x03\x59\x11\xc6\x95\x06\xc9\xf8\x3d\xe6\x87\x1e\x45\xae\x25\x2b\x9b\x15\x5e\xa0\xde\x09\x79\x3f\x04\xd9\x28\xc5\x08\x5f\xb3\xaa\xea\x59\x65\x8c\x23\xe8\x35\x42\xd1\xe9\xe5\xed\x4e\x05\x7a\x4d\x34\x4c\x1e\x34\xc0\x86\x30\xae\x8d\xfe\xde\x71\xcb\xb0\x07\x70\x02\xe7\x82\x92\xca\xba\xc0\xf8\x0a\xa8\xe0\x5a\x12\xaa\x81\x14\x85\x44\xa5\x50\x01\x47\x2c\x40\x0b\xc8\x11\x14\x6a\xd8\x31\xbd\x06\xe4\x5b\xd8\x12\xc9\x48\x5e\xa1\x1a\xf4\xe0\x28\x6f\x54\x02\xb0\x62\x08\x41\x10\xd8\xbf\x51\xaf\x51\x62\xb3\xe9\x22\x38\x2b\x86\x90\x06\x69\xfb\x2d\x17\x42\x2b\x2d\x49\xbd\x40\x94\xaa\x95\x75\xa0\x7f\xca\xea\xf0\xd4\xf3\x93\x81\x3b\x70\x07\xde\xa9\xa6\xf5\x69\x90\xfa\xae\x7f\xca\xea\x52\x9d\x5e\x6e\x96\x97\xfb\x7c\x77\xdf\xdc\x7d\xf8\x30\x2d\x9b\x2f\xcb\x7c\x3f\x1b\x5d\xe1\xf2\x62\x72\x2e\xbe\x1c\x0e\x51\x94\x6e\x2f\xf9\xea\xd7\xed\xe2\xfd\xa7\xf3\x0f\xf7\xfd\xdf\x51\x1a\x1c\x95\xfe\x5a\xc6\xb3\x8b\x78\x73\xff\xf9\x16\x3f\xdd\xbe\xbb\xf5\x3f\x2f\x1a\x2f\xfe\xad\x2e\xde\x04\xf7\x3f\x0b\x6f\x19\x6c\xd6\x64\xbd\x18\x47\xd7\x18\x71\xaf\x55\x7a\x4c\xd5\xe8\x98\xa9\x36\x00\x13\x3e\x72\xcd\xf4\x61\x4e\xa8\x16\xf2\x30\x84\x7e\xbf\xfb\x42\x38\x5d\x0b\x79\x85\xb5\x50\xec\xbb\x4f\x8c\x6f\x05\xa3\x78\xc3\x6b\x62\xd2\xd7\xef\xf7\x6c\x75\xde\x13\xc6\x9f\xc5\x4a\x57\x44\xf8\xe1\xaa\x05\xcb\x8f\x3d\x78\x0c\x8e\xd6\x97\x13\xb8\x68\x36\x28\x19\x85\xb3\x29\x88\xd2\x02\xe5\x11\x24\x3a\x1d\x0f\x35\x8b\xbc\x4e\x6a\x7c\x2c\x0c\x54\x4c\x69\x23\xc9\x45\x81\x4f\x31\x55\x4b\xb1\x65\xf6\x83\xb0\xba\x1f\x39\x70\x74\xf4\x77\x0b\x1d\x44\x03\xdf\x8f\x06\xbe\xeb\x0e\x42\xff\xfb\x62\x7b\xfe\x34\x78\x27\xc4\xed\x39\x63\xf4\xf2\xd7\xdd\x72\xbd\x1c\x7f\x88\xf7\xef\xe8\x42\x9c\x97\xf1\xd5\xe5\x87\x9f\xe7\xf5\xae\xf4\x64\x12\xed\xce\xf7\xfe\xdd\x55\x50\x4f\x0a\xaf\xff\x9c\xfa\x34\x1e\xf8\x9e\xfb\x92\xfa\xcb\xbb\xf7\xa3\xf4\xcd\xe2\xad\xdc\xce\xee\xc6\xd9\xae\xb8\x17\x37\x74\x34\xda\x4c\xee\xde\xd6\x19\x1e\x0e\x77\xe1\xf5\x2c\x5d\xcd\x65\xb0\x5e\x5e\xfc\xd6\xef\x72\x34\xeb\x80\xfd\x50\x89\xb3\x29\x38\xd0\x55\xe3\x25\xe8\x87\x9d\xf0\x39\x31\xe9\x81\x02\xeb\x4a\x1c\xb0\x80\xeb\x0d\x91\x1a\x26\x1d\xa2\x14\x94\x42\xda\x84\xae\xd8\x16\xf9\x37\xa9\x7c\x8a\x3a\x78\x11\x76\xee\x3e\xc3\x7c\x3a\x4d\xc7\x49\xee\x63\xe2\x7a\x34\x2b\x93\x22\x73\xe7\xa9\x47\xb2\xc4\x8b\xa3\xd8\xa7\xa3\x49\x14\x85\x79\xf0\x0a\x40\xdd\x7d\x10\x63\x90\xa7\x79\x56\x96\x65\xec\x8e\x3c\x74\x03\xaf\x2c\xdc\x24\x4e\x3c\x3f\x4b\x0b\x37\x4a\xc2\x88\x96\x63\xe2\xbf\x04\x65\x77\x3f\xf3\x62\x3f\x1c\xcd\xc2\x24\x8e\xb1\x0c\xc8\x28\x0c\x5c\xd7\xf3\xfd\x69\x34\x1b\x91\x88\x84\x38\x4a\xca\x49\x94\x25\x69\x07\xfa\x77\x62\x4b\xda\xa8\x1f\x41\x34\x47\xc9\x49\xb5\x46\xb6\x5a\xeb\x0e\x42\x27\x27\x27\x5d\x3e\x5b\x89\xf9\xe8\xb2\xfb\xdf\x81\x5b\x43\x53\x8c\x97\x8d\x24\x70\x10\x0d\xac\x0c\xbf\x72\x40\x29\x85\x34\xe0\x58\xae\x99\x02\x89\x9f\x1b\x63\x85\x29\xe0\x42\x83\x6a\xea\x5a\x48\x8d\x05\xe4\x48\x49\xa3\xd0\x48\x4a\x8b\x7d\xb3\x45\x36\x9c\x1b\x8e\xb4\x0c\xa8\x34\xd1\xa6\x01\x1a\xb3\x34\x80\xab\x86\xb7\xeb\x8e\xd3\xad\xfd\x44\x24\x5d\xb3\x2d\x0e\xfa\xff\xe8\x9c\x02\xd8\x99\xfe\xd1\x02\x0a\xf1\x4f\x2b\x41\xa0\xb2\xec\x5b\x13\xc9\xf4\xa1\x35\x64\xb5\xdc\xdb\x78\x70\x35\x6c\xff\xfd\xd8\x6d\x70\x1c\xba\x26\x8c\xff\xd4\x7e\x76\x1c\xe3\xed\x4f\x81\x1b\xb8\x21\x38\xce\x8e\xc8\xba\xfb\xe5\xe4\x44\x4a\x86\x12\xa2\x38\x75\x5d\xd7\x05\xc7\xe1\xc2\x21\x9c\x32\xe4\xda\xc9\x2b\x41\xef\x55\xbb\xa6\x50\x6e\xd1\xa9\x4c\x52\xc1\x71\x36\x64\xef\xd4\xa6\x45\xc1\x8f\x8c\x90\xe2\xa4\x56\x6b\xa1\xbb\x45\xbb\xb6\x61\xfc\x9b\x7f\x8d\xcf\x84\x6a\xb6\x45\x70\x1c\x03\x4d\x93\x22\x51\x96\x4f\x33\x01\x8e\x53\xe4\x0e\x15\x9b\xda\xec\x17\x1c\x94\x2a\x4c\x48\x84\xae\xd1\x51\xec\x0b\x42\xe8\x66\x31\x38\xce\x27\x25\xb8\xac\xa9\xb3\x16\x4a\x2b\x20\x55\xf5\x68\x8d\x71\x8d\xb2\x24\x14\xcd\xfa\xc7\x6f\xcb\xfd\x34\x99\xcf\x55\x7e\x6c\xc2\xc7\xc2\x74\x12\xc7\xd6\x11\x2d\xe0\x16\xf3\x6b\xb3\xae\x15\xd8\x9c\x48\x28\xa5\xd8\x40\xc3\xb5\x6c\x94\x81\x84\x90\x6c\xc5\xf8\x10\x06\x83\xfe\x8b\xf5\x34\x2d\xfb\xa4\x96\x1f\x1d\xa7\xe1\x8a\x94\xe8\xe0\xbe\x16\x0a\x3f\x42\x59\x91\xd5\x77\x00\xfe\xef\x78\xda\xff\x93\x3c\xfd\x4d\x2f\xfd\xc7\x4c\xed\xb9\xe1\xc0\x8b\xc2\x81\x97\x0e\xa2\x27\xc7\xf2\x91\x4a\x17\x2a\x66\x04\x6f\x9a\xf9\xdd\x45\xe3\xbd\xd9\x6f\xd5\x61\xbc\xbc\x96\x4b\x95\x6d\xf5\x38\xce\xf5\xfb\x11\x7f\x3b\x17\xe7\x9f\xf2\xfb\x2f\x13\xd2\x7f\x46\x7d\x34\xf0\xd2\x68\xe0\x07\xc9\x8b\x06\x26\x6f\xe8\x8e\x2d\x3f\x89\x77\xb7\x6f\xcb\x31\x09\x53\xff\x66\xa1\x09\xde\xec\x2f\xce\x77\x45\xfa\x25\xe7\x63\xef\x3a\xd9\xe1\xe8\xee\x66\x7f\xf7\x3a\x57\x5b\xd2\x78\x91\xa9\xfd\xbf\x80\xaa\x5f\x61\xea\x20\x8e\xf3\xd0\xf3\x62\x9f\x44\x41\x59\x24\x51\x91\x45\x45\xe0\x15\xd3\xb8\xf0\x26\x61\x91\x06\xf9\x34\x0c\xe2\xf1\x18\x5f\x65\xea\x24\x1a\x13\x3a\xce\xfc\x51\xe0\x62\x32\x2b\xbd\x69\x90\x52\x9f\x04\xde\x38\x9c\xfb\x59\x10\x15\x41\x36\x8f\x93\x94\xbe\xc2\xd4\x69\x92\xba\xe8\x79\x61\xe0\x06\x71\x1e\xd2\x2c\xc9\xca\x99\x1f\x05\x9e\x9f\x92\x30\x75\x93\xd0\xcd\x82\xd2\xcb\xd2\xa4\x63\xea\x2b\x51\x2b\x8d\x4f\xb8\xba\x10\xab\x9a\x68\xba\xfe\x63\x53\x48\xf0\x27\xd1\x7d\xb4\x0e\x3f\x2c\x7f\x99\xfe\x02\x54\xa2\xa1\x6a\xd9\xb9\x6a\x10\x6e\xf5\xfc\xf8\x22\xe0\xff\xf2\xe1\xe4\x7f\x37\x9e\xb4\x49\x78\x09\xf4\xc1\xdf\x8b\xf9\x79\x1a\x7b\x49\x92\xfb\x49\x34\x0b\xe7\x34\xf7\x47\x79\x34\x0a\xe6\x74\x1e\xcd\xc2\x98\x90\x3c\xf2\xca\x24\x98\x26\x24\x7e\x15\xf3\x65\x1c\xb8\x45\x9a\xcf\xa2\x38\x0e\x27\xc9\x7c\xec\xf9\x41\x38\x99\x95\x61\x9a\xc7\xa3\xc4\xcf\xe8\x0c\x83\x71\xe2\x4d\xd3\x97\x31\x9f\x21\x62\x3a\xcf\x67\xc1\xcc\xcf\x68\x16\xd3\x49\x16\x86\x73\x17\x71\xe2\x45\x59\x58\xa2\x97\xc7\x41\x50\x8c\x4c\xeb\x7d\x1d\xc9\xcd\x08\xfe\x1d\xe8\x71\x93\x13\x49\x49\x81\x52\x98\x2f\x7f\x08\xfb\x9e\xfb\x7f\x08\x4a\x73\x33\x3d\xe2\xe7\x19\x50\x7a\x7f\x2f\x28\x7d\x3f\x4a\x88\x3b\x4e\x66\x91\x17\x44\xa9\x4f\x83\x78\xec\xf9\x09\x0d\x67\x6e\xe1\x85\xfe\x3c\x1d\x67\xa9\x9f\x04\xe4\xf5\x91\x39\xf6\x31\x4a\xc7\x41\x96\x91\x82\xba\x41\x80\x31\x86\x6e\x98\x25\xe9\xd4\x8b\xa7\x51\xe8\xf9\x41\x19\x4e\x3c\x77\x4c\x5f\x06\xe5\x38\xce\x93\x78\x3a\x99\xc6\xa3\x30\x8a\xa7\x51\x91\xcd\xcb\x79\x32\xf5\xd2\x79\x14\xfb\xd3\x20\x8d\xc2\xd2\xf3\x48\x34\xc9\xfa\xbd\xde\x09\x4c\x89\x26\x70\xad\x85\x24\x2b\xec\xa9\xf6\x77\x7b\xbb\x5f\x10\xbd\xb6\x99\xa9\xcc\x1d\x72\x3a\x86\x92\x55\xd8\x03\xa8\x89\x5e\x0f\xe1\x54\x6f\xea\xd3\xaf\xaf\x0c\xff\x2a\x88\x26\x03\xbb\xb3\xc8\x8d\xde\x89\xe0\x25\x5b\x35\x92\xd8\x29\xe9\x68\x80\xda\xd5\xeb\x3f\x6e\xa6\x55\xf0\xc4\xda\x88\x52\xd1\x70\xad\xe0\x1e\x0f\xd0\x45\xd1\x23\xdd\xa2\xb1\x73\x8f\x07\xb3\x8c\x9d\xc6\xe3\x27\x23\x7b\xf6\x30\x16\xee\x0c\x80\x2c\x10\x46\x8b\x33\x20\xbc\x80\x85\xbf\x80\xeb\x76\xa6\x33\x07\x09\x72\x73\x52\xf4\xcc\x19\xf0\x56\x28\xcd\xc9\x06\x87\xf0\xf0\x32\xd0\x3b\x81\x85\x90\xba\x53\x63\x54\x3c\x2f\x6a\x36\x0d\x21\x75\x53\xdf\x98\x37\x7d\xea\x68\x61\x07\x63\xa0\x8f\xb3\xa6\x7a\xb5\x5f\xb7\x49\xba\xae\x91\xb2\xf2\x00\xb3\xbd\xb6\xf3\x17\x9c\x2d\x1e\x79\x6b\x07\x46\x4a\x38\xe4\x08\x12\xcd\x4c\x5c\x00\xd1\xc0\x4a\xc8\x71\xcd\x78\x01\x17\xa3\xa5\x51\x83\x9d\xf4\xd9\x62\x08\xbb\xc1\x7e\x70\x18\x7c\x69\x4b\x60\xbc\x6e\x14\x16\x0f\x8d\x60\xe2\xae\xc8\x01\xa5\x29\x84\x75\xd7\xb6\xb1\xdd\xbd\x64\x1b\x14\x8d\x0d\x93\x83\xa8\x91\x77\x8f\x3f\xdd\x44\x6c\xcf\x52\x3b\xe5\xf7\xe0\xb8\xdc\x89\x0c\xa1\x1f\xb8\xca\xc2\xee\xb2\xc1\x06\xbf\x0b\xd7\x5a\x27\xea\xc0\xe9\x5a\x0a\x2e\x1a\x65\x8e\x67\x8a\x4a\x31\xbe\xea\x7d\x36\x02\x6d\x32\xda\xa7\x2b\xd5\x86\xde\x6c\x72\x94\x86\x1e\x4d\xcf\xa3\x54\xa7\x54\x70\x65\x78\xb3\x3b\xec\x77\xac\xaa\x4c\x5e\x48\x65\x46\x7c\xdd\x66\x46\x69\x22\x75\x53\xf7\xc0\xc8\xdf\xb6\x82\x43\x68\xc3\x9b\x4b\x44\x05\x4d\x0d\x93\xc5\x0d\xd0\x03\xad\x50\xb5\xa1\xb6\x06\xcc\x6d\x6e\x47\x98\x7d\xf1\x32\xfe\xe2\x16\x0d\x8e\xa0\xfb\x7c\x4b\x98\x8d\xf6\xfd\x75\xcb\x3e\x96\xc4\x3b\x0f\x25\x6a\xc9\xd0\xde\x4a\xc4\xae\x4b\x36\x01\x4d\x94\x21\x71\xf3\xeb\xaa\xdd\x60\xb9\xbc\xf7\x88\xf2\x94\xad\x3e\xa3\xdf\xe6\xab\x77\x24\xbc\x0e\x22\x58\xa1\xe1\xb2\xdd\x9a\xd1\xf5\x03\x19\x42\x87\x74\x53\x14\x73\x2b\xed\xce\x11\x61\xf2\xd7\x0d\x3f\x05\xb0\xf6\xfa\x41\x1b\xa5\xc5\xa6\x33\x72\x6c\xc3\xee\x71\xb0\x6b\xb0\x0b\x8b\xf8\xbe\xa1\xdd\xfe\xc3\x13\xa0\xed\xf0\x4e\xf1\x83\x5d\x5a\x99\x0b\x63\x0b\xcd\x1f\x76\x68\xef\xcb\x4c\x22\xec\x14\x08\x09\xac\xa6\xdd\xbb\x20\xc9\x2b\x34\x7f\x52\x3b\x76\xb5\xd9\x34\xe3\x95\x11\xbc\xb9\x3a\x1f\xc2\x5a\xeb\x7a\x78\x7a\x6a\x2f\x68\xe6\x56\x37\xcc\xa2\x30\xb2\xb6\x37\x64\xcf\x36\x26\xc4\x2e\x9f\x2b\x62\x62\x62\xd4\xea\xab\xc9\xe1\x98\x60\x49\xb8\xea\xae\x8d\x8c\xc3\x0e\x99\x95\xf6\x5d\x78\xb3\x43\x06\x5c\xec\x7a\x60\x74\xbd\x21\x6a\x61\xa4\x87\xe0\xbb\x0f\x3f\x47\xc0\xd9\x07\x52\x63\xa0\x62\x1b\x66\x8e\x86\x15\x51\xe7\xe6\x4f\x53\xac\xaf\x3b\x8f\xbd\xa1\x85\x05\x49\xeb\x01\xff\x9a\x95\xc7\xbe\x74\xf1\x17\x45\xfb\x46\x4a\xc0\x5e\xae\x2d\xed\xb4\x69\x00\x2d\xd9\x6a\x85\x12\x8b\xb6\x93\x34\xee\xf5\x11\x5f\x6d\x37\xc5\xae\x69\xa7\x97\x0c\x4b\x24\x05\x08\x5e\x1d\x4c\x97\x1e\x7b\xec\xf8\x50\x7c\x74\xe9\xab\xea\x2b\x24\xc5\xb7\xea\xbd\xa8\xd3\x7e\x61\xaa\xf8\xd8\xf7\x5a\x88\xca\xe4\xec\x01\xd3\x5a\x80\x42\x5e\x7c\x97\x6e\xb1\xb5\x0c\xb2\x21\xfb\x07\x68\xfb\x5d\xa6\x9e\x57\x69\xaf\xe8\x5b\x52\x59\xbd\x87\xb6\xef\x88\x71\x90\x36\x52\xda\x37\xcc\x47\x12\x6b\xa2\x20\x47\xe4\x50\xa0\x46\xaa\x6d\x9a\x8e\x0a\x8c\x3d\x73\x9e\xfa\x5d\x04\x53\xa6\x2c\xd2\xac\x46\x25\x36\x4f\x90\xaa\xa0\x10\x8f\x5f\x72\x40\xef\xad\x47\xa4\x36\x70\xd1\xfb\x85\x10\xd5\x88\x1a\x36\x9a\x71\xa3\xa9\x18\x82\x96\x0d\x9a\x3e\x25\xfc\x00\x05\xe6\xcd\x6a\xd5\x31\xa1\x69\x1f\xcb\x3b\x2b\x01\xc6\x48\xcf\x7e\x6d\xdb\xb4\xae\xa5\x28\x6d\x79\x1e\x44\x0c\xc7\x9a\xd5\x21\x94\xa4\x52\xd8\xeb\xb5\x73\x41\xf7\x26\x5e\x4b\xa4\x62\x63\x91\x66\x0d\xfe\x3b\x00\x00\xff\xff\x53\xce\x9c\x41\x08\x18\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6152, mode: os.FileMode(420), modTime: time.Unix(1554308841, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1552945185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

