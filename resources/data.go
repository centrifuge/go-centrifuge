package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _go_centrifuge_build_configs_default_config_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x6f\xdb\x30\xd2\xbe\xeb\x57\x0c\x9c\x4b\xfb\xa2\xb5\x2d\xf9\x23\x8e\x80\xf7\xe0\xc4\x89\x9b\xe6\x63\x9d\x38\x4d\xda\x5e\x16\x34\x35\x92\x58\x4b\xa4\x4a\x52\xb6\x95\x5f\xbf\x18\x4a\x72\x92\xa6\xdd\xee\x76\xb1\x0b\x2c\xb0\xb9\x44\x20\x39\xcf\x0c\x67\x9e\xf9\xa0\x0f\x60\x86\x31\x2b\x33\x0b\x11\x6e\x30\x53\x45\x8e\xd2\x82\x45\x63\x25\x5a\x60\x09\x13\xd2\x58\x58\xab\x0d\x93\x1e\x47\x69\xb5\x88\xcb\x04\xaf\xd1\x6e\x95\x5e\x87\x10\x67\x42\x5a\xcf\x81\x08\x89\x60\x53\x84\xa8\xc1\x93\xf5\x19\x03\x36\x65\x16\x4e\xf6\xb2\x90\x33\x21\x2d\xe1\x7a\xed\x91\xd0\x03\x38\x80\x4b\xc5\x59\xe6\x54\x0b\x99\x00\x57\xd2\x6a\xc6\x2d\xb0\x28\xd2\x68\x0c\x1a\x90\x88\x11\x58\x05\x2b\x04\x83\x16\xb6\xc2\xa6\x80\x72\x03\x1b\xa6\x05\x5b\x65\x68\xba\x1e\xb4\xf2\x04\x09\x20\xa2\x10\x06\x83\x81\xfb\x46\x9b\xa2\xc6\x32\x6f\x6c\x3f\x8f\x42\x98\x0c\x26\xf5\xde\x4a\x29\x6b\xac\x66\xc5\x02\x51\x9b\x5a\xf6\x3d\x74\x7a\xa2\x18\xf6\xfc\xe0\xb0\xdb\xef\xf6\xbb\x7e\xcf\xf2\xa2\x37\x98\x04\xfd\xa0\x27\x8a\xd8\xf4\x6e\xf2\xbb\x9b\xdd\x6a\xbb\x2e\xbf\x7e\xf9\x32\x8b\xcb\xc7\xbb\xd5\xee\x74\x7a\x8b\x77\xd7\x27\x97\xea\xb1\xaa\x46\xa3\xc9\xe6\x46\x26\xf7\x9b\xc5\xd5\xb7\xcb\x2f\xeb\xce\x6f\x40\x07\x2d\xe8\x7d\x3c\x3e\xbd\x1e\xe7\xeb\xef\x0f\xf8\xed\xe1\xe2\x21\xf8\xbe\x28\xfd\xf1\xe7\x22\x9a\x0f\xd6\x1f\x95\x7f\x37\xc8\x53\x96\x2e\x8e\x47\x4b\x1c\x49\xbf\x06\x6d\x5d\x35\x6d\x3d\x55\x5f\x80\xae\x8f\xd2\x0a\x5b\x9d\x31\x6e\x95\xae\x42\xe8\x74\x3c\xe7\xea\x2b\x26\xe4\xab\x80\xb7\x11\x83\x37\x17\x14\xee\xb7\x1e\xd4\xe1\xad\xd1\x0e\xe0\xba\xcc\x51\x0b\x0e\xe7\x33\x50\xb1\x0b\xf5\xb3\xa0\x36\xb2\x7b\xaf\xfb\x41\x23\x75\xdc\xba\x16\x32\x61\x2c\x49\x4a\x15\xe1\x6b\x56\x14\x5a\x6d\x84\xdb\x50\x0e\xdb\xa9\x6e\x89\xf8\xdb\x20\x0d\x46\xdd\x60\x18\x74\x83\x41\xbf\xeb\xfb\xe3\x1f\x23\xe5\x07\xb3\xc1\x85\x52\x0f\xcb\xd5\x6e\x75\x71\xb2\xfa\x9a\x1e\x7d\xbc\xb7\xe6\xa6\xba\x9f\x47\x77\x0b\xcd\x86\xb7\xc5\x72\x3a\xb4\xab\x8d\x19\x33\xe9\xfb\xdf\xb6\xf3\x69\xf0\xd8\x79\x85\x3f\x18\x76\x0f\x83\xae\x1f\x1c\xfe\x0a\xfe\x26\x0f\xf8\x32\xd7\xa7\x82\x2d\xaf\xee\x87\xc9\xa7\xcd\xe1\xc3\x3c\x2d\x92\xdb\xad\x9a\x6c\xd5\xd9\xd2\x7c\x48\xbf\xce\x57\x73\x31\x60\xd3\xc9\xae\xd3\xb8\xe7\xb4\x61\xe5\xde\xf9\xe7\x33\x78\x0f\x2e\x00\xbf\x62\xed\xb0\x75\xed\x25\x73\x61\x8b\xb0\xc8\x54\x85\x11\x2c\x73\xa6\x2d\x9c\x34\x6c\x30\x10\x2b\xed\x5c\x99\x88\x0d\xca\x17\xae\xfc\x27\x18\xd3\xdf\xf9\x83\x71\x70\xca\x8f\xe3\xc9\xf8\xf0\x28\x18\x0e\x4e\x83\x61\x3c\xed\x9f\x9e\x0c\x83\x51\x14\xa0\xdf\x9f\xf6\x27\x41\x30\xe0\x87\xb3\xe7\xdc\x32\x96\x25\x94\xc5\xaf\x29\xc5\xf2\x15\xea\x3f\xa3\x94\xff\x2f\x52\xca\xa9\xfe\x2d\xa5\xfe\xfd\xa4\xfa\x1f\xad\xfe\x90\x56\xd4\x92\x9e\x58\x91\xd7\x2b\x7f\xc6\xa5\xfe\x3f\x52\x52\xfc\xa3\x49\xd7\x0f\x82\xae\xef\xff\x32\x38\xd3\x64\x70\xca\xa7\x56\x7f\xb9\x3f\xd9\x6d\x1f\xc7\xeb\xb1\xb9\x3b\x12\x5f\x97\xb7\x8f\xf6\xf1\x68\x76\x58\x7d\x7a\x2c\x8e\x17\xb7\xa7\x67\x8f\xfa\x93\xba\x7f\x5d\x52\x88\x5d\x81\xdf\xf5\xfd\x57\xcd\xa5\xc5\xbf\x98\x6f\xc5\xee\x33\xca\xf2\xf3\xf4\xfe\xfb\xfa\xe3\x45\x2e\x3f\x2c\xa7\x1f\x67\xdf\x1e\xe3\x43\x9c\x5f\xa9\xb1\xd5\x4a\x24\x5f\x77\xf9\xe1\x74\x74\xfb\xf7\x83\xdf\xb8\xeb\x57\xe1\xf7\xff\xb3\xd1\x9f\x9e\x0d\x47\x63\xee\x8f\x07\x93\x31\x1b\x0f\xe3\x68\x78\x36\x5c\x8d\x8f\x58\xec\x0f\xd8\x64\x3c\x8b\xfb\xc7\xa3\x71\x30\x65\xfd\x7e\xc7\xa3\xe9\x82\x59\x06\x4b\xab\x34\x4b\xd0\x33\xf5\xff\x7a\x66\x58\x30\x9b\x3a\x93\x32\x6a\x66\xb3\x63\x88\x45\x86\x1e\x40\xc1\x6c\x1a\x42\xcf\xe6\x45\xef\x69\x6a\xf9\x6b\xc4\x2c\xeb\xba\x93\xd1\x8a\x70\x4f\x94\x8c\x45\x52\x6a\x66\x85\x92\x7b\x05\xdc\xad\x2e\xff\x5c\x4d\x0d\xf0\x4a\xdb\x94\x73\x55\x4a\x6b\x60\x8d\x15\x34\xb7\xf0\x58\xb3\x48\x7a\xd6\x58\xd1\x32\x36\x88\xed\x16\xc9\x9e\x4b\x8b\x3a\x66\x1c\x61\x4b\x91\x73\x11\x98\x2e\xce\x81\xc9\x08\x16\xc1\x02\x96\xa8\x37\xa8\x5d\x3d\x44\x49\x05\xcf\xa3\x92\xf8\x41\x19\x2b\x59\x8e\xd4\x8e\x9b\x79\xc3\x3b\x80\x85\xd2\xb6\x81\x21\x88\x9f\x8b\xd2\xa1\x10\x26\xfd\x49\x40\xea\x29\x3d\xde\x5b\xf5\xbe\x40\xd4\xc0\x9f\x7b\xcd\x78\x45\x50\xd4\x4e\x5a\x16\xc8\x45\x5c\xc1\xe9\xce\xa2\x96\x2c\x83\xf3\xc5\x33\x6b\x09\x14\x38\x93\x34\xbd\x69\x64\x3c\xc5\x08\x98\x05\x11\xc3\x0a\x53\x21\x23\xb8\x9e\xde\x11\x0c\x36\xd2\xe7\x8b\x10\xb6\xdd\x5d\xb7\xea\x3e\xd6\x21\x20\xab\x4b\x83\xd1\x9e\x81\x74\xef\x8c\x55\xa8\x29\x10\xce\x5c\x97\x3f\xee\xf4\x9d\xc8\x51\x95\xee\x9a\x12\x54\x81\xb2\x19\x29\x25\x72\x67\x35\xb5\x04\xba\x8c\xf1\xa0\x5d\x6e\x44\x42\xe8\x0c\xfa\xa6\xe3\x50\x72\x21\x45\x5e\xe6\x10\x61\xc6\x2a\xa7\x17\x37\xa8\x2b\x28\x82\x02\x34\x9a\x42\x49\x83\x84\xc4\x36\x4a\x44\x60\x45\x4e\x5a\x98\xb5\x8c\xaf\x8d\x03\x60\xd1\xb7\xd2\x58\x58\x31\xb2\x5b\x49\x48\x95\xb1\x24\xa9\x4a\xcd\xd1\xc0\x9b\xe5\x72\xf6\x0e\x4e\x16\x9f\xde\x01\x57\x1a\x0d\x74\xbb\xdd\xb7\xcd\x2c\xac\xd6\x20\x24\x64\x2a\x71\x29\x17\x42\x87\xec\x23\x5b\x4d\x99\x63\x04\xab\x8a\xae\x55\xc7\xa0\x43\x5e\xdc\xfd\xff\x9b\x0d\xcb\x4a\xbc\x45\x16\xc1\xff\x41\xf0\x16\x84\x81\x0c\x8d\x6b\x8b\x12\xdc\x1e\xac\x30\x53\xdb\x77\xe4\x3d\x09\x3c\x65\x32\xc1\xfd\x3d\x66\xee\x8e\x56\xc1\xce\x83\x97\x8b\x21\x74\x46\xfd\x7e\x6e\x5c\x2a\xde\x94\x58\xe2\x0f\x14\x70\x9e\x61\xa6\x92\x3c\xd5\x4a\xaa\xd2\x50\xe7\xe5\x68\x8c\x90\x89\xf7\x9d\x04\x6a\x82\xd4\x8f\x04\x53\xd3\xa1\x74\xcd\x58\xc5\x40\x05\x08\xb5\xe9\x35\x57\xd3\x4d\x1f\xdf\x8a\x2c\x23\xae\xb0\x2c\x53\x9c\xd9\x9a\x2d\xc6\x32\x6d\xcb\xc2\x03\x92\x7f\xa8\x05\xa9\x98\xf7\x1d\xfe\x99\x46\x34\x50\x16\xe4\x51\xe0\x15\xcf\xd0\xd4\x04\xa8\x55\x90\x43\xb6\x4c\xb8\xd7\x45\x13\x4b\xca\x2e\x68\xb6\x1f\x98\x70\x1c\xb8\x5a\xd6\xc5\xf0\x00\xa6\x39\xe5\x9f\xeb\x26\xe4\x7b\x06\x96\x99\x35\xa1\x6c\x58\x26\x22\x88\xb5\xca\xdd\x5d\xb8\x46\xe7\x08\x0f\xea\x9d\x33\x17\x2f\x3f\x48\x3b\x9e\xab\x32\x28\xed\x49\xea\xa6\x22\x97\x21\x82\xbf\xf4\x9f\x7b\x57\xb9\x03\xe4\x26\xca\x93\x4f\xb7\x97\x21\x6c\x4d\xd8\x7b\x7a\x27\x84\x47\x47\xc3\xa1\xb3\xea\x9a\x12\xc9\x6a\x26\x0d\x73\x5c\x86\x42\xa9\x0c\x72\xb6\x03\x8d\x56\x8b\x7a\xdc\x31\x28\x23\x32\xf8\xd9\x31\xb5\x71\x99\x92\xb3\xdd\x6d\x7d\x2e\x84\xa0\x71\xdc\xcf\x21\x05\xd5\x9c\x0d\xcb\x1c\x6e\x55\x7b\x92\x91\xe9\xbc\xd4\xda\x3d\x1a\x9e\x49\xa4\xcc\xc0\x0a\x91\x5e\x15\x16\xb9\xc5\xc8\x83\x3d\x00\xe9\x23\x16\x05\x4d\x5a\xb5\x2f\xce\x4c\xc4\xd8\x10\xd3\x2a\xca\xed\x5a\x07\x57\x79\x2e\xac\x0b\x13\x93\xc0\x24\x4f\x89\x5e\xcd\x4b\xd4\xf9\x1b\xa5\xe5\xce\xa1\xef\xc1\x87\x0a\x19\xdd\xab\x3e\x77\x29\x62\x34\x05\x93\x21\x74\x26\x87\xe3\x7e\xea\x38\xbb\xef\x87\xbf\xf0\x7f\xdb\x0d\x9b\x32\x86\x19\x52\xa3\xdb\xa6\x82\xa7\xfb\x4e\x09\x4d\x35\x6e\x2d\x6d\x46\x0c\x45\x7c\x6e\xe6\xcc\x88\x12\xd6\xd9\x57\x1a\xab\xf2\x46\x49\xdb\x2a\x9a\x67\x71\xd3\x04\xae\x5d\x55\xee\x50\x4f\xee\xec\x1f\xbf\x75\x98\x6a\xe0\xbd\x5e\x9e\x09\xf2\xb5\x2b\x9f\x6f\xb6\x94\xaf\xdf\x4b\xa1\x11\xb6\x06\x94\x06\x51\xf0\xe6\x45\x4c\x0f\x60\xfa\xe4\xcc\x92\xd9\x8e\xdb\x6f\x9f\xf3\x29\xb5\xb6\x08\x7b\x3d\xca\xa6\x8c\xea\x50\x78\x34\x1a\x8e\xea\x32\xc7\x76\xae\xcc\x51\xaa\x6d\x31\x82\x84\xd1\x9d\x04\x77\x78\x45\x53\xf9\x5e\x92\x49\x48\xd8\xa2\x70\xd2\x41\x1f\xe6\x5b\x14\x20\xd5\xb6\xa6\xd7\x9c\x99\x05\x49\x3b\x7e\xb5\x7f\xee\xe8\x9c\x19\xc8\x44\x2e\x9a\x31\x22\x12\x71\x8c\x8e\x49\xfb\x08\xed\x6b\x1a\xe5\x65\xc2\xcc\xa5\x3b\xdd\x3e\xe6\x4f\x28\xd1\xd0\x25\x7c\x83\x49\xab\xd3\x28\xba\xc0\x2a\x84\xc1\xf3\xc5\x5b\xdc\xa8\x35\xba\xf5\xd1\xa8\x5d\xae\x39\x72\xe2\xf8\x15\xc2\xe4\x87\xf5\x85\xc6\x76\xcb\x7f\x82\x92\xb1\xbd\xa2\x47\x30\x1c\xbd\x58\xbb\x23\x67\xc4\xa8\xcf\xb4\xca\x43\xf0\x47\xfb\x3d\x66\x0c\xda\x65\xdd\xc6\xc7\xfb\xd5\xa2\x34\xe9\x9d\xfa\x8b\x66\x3c\xc3\x16\x0a\x0e\xf6\x45\x4e\x63\xae\x36\x54\xe2\x0c\x18\xa5\x24\xfd\x5f\x69\x11\x25\x48\xd5\x86\xd2\x28\xd1\xac\xce\xa9\xa7\xd6\x66\x95\xab\x66\x75\x70\xe4\x13\x61\x9e\x87\xa9\xa1\x46\x14\xd5\x3f\x9c\x30\x58\x65\x8a\xaf\xdd\xd4\x50\x33\x04\xac\x16\x49\x82\xda\x61\xd3\x00\x87\x3b\xdb\x16\xc2\xba\x19\x8e\xfb\x6d\x37\xfc\x99\x62\x4d\xdd\x46\xc9\xec\x59\x37\x32\xfb\x5c\x6d\x4d\x7a\x82\xa6\xe6\xf4\x12\xde\x1f\x35\xe8\xff\xdd\x65\xcd\x3b\x00\x26\x2b\x88\x70\x55\x26\x49\x33\x6b\x50\xf2\xbb\x00\x27\x0a\xc8\x11\x9e\xdb\xad\x8b\x0c\x4a\x97\xaf\x6e\x85\x9a\x3c\xc9\x78\x40\x5f\x21\xc4\x2c\x33\xe8\x4e\x15\x85\x56\x71\x9d\x2a\x2d\x30\xcd\x3a\xb4\xda\x1e\xf3\x6a\xee\x36\xbf\x78\x15\x1a\x79\x43\x61\xab\x4b\xf4\xfe\x16\x00\x00\xff\xff\xc6\xf8\x4a\xa1\xde\x13\x00\x00")

func go_centrifuge_build_configs_default_config_yaml() ([]byte, error) {
	return bindata_read(
		_go_centrifuge_build_configs_default_config_yaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

var _go_centrifuge_build_configs_testing_config_yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xc9\x6e\x1c\x37\x10\xbd\xf7\x57\x10\xcc\xc1\x97\x59\xb8\x6f\x37\x43\xf1\x12\x08\x11\xe2\x38\x80\x9c\x63\x91\xac\x96\x1a\xa3\x5e\xc2\x66\x4b\x1e\x1b\xfe\xf7\xa0\x67\x46\xb6\x6f\x51\x6e\x64\x75\xbd\xf7\x58\xd5\xef\x25\x1c\x6a\xe9\xda\xe5\x0e\x6f\xb0\x3e\x8d\xe5\x10\x48\xc5\xb9\x76\xc3\x5d\x83\xf5\x1e\x0b\x2e\x7d\x68\x08\x81\x94\xc6\x65\xa8\xf3\x7a\x26\xa4\x87\x6e\x08\xe4\x74\x24\xe4\x80\xc7\x40\x5e\x7d\xa5\x90\x73\xc1\x79\xa6\x81\x3a\x1f\x19\x38\xa3\x9d\x4c\x4a\x29\x05\xa9\xcd\x96\x47\x65\x24\xb2\x2c\x93\xd6\x80\x5c\x71\x01\x9a\x6e\x68\x2a\xc7\xa9\x8e\x34\x7c\xa5\xa9\x9b\xee\xb1\xd0\x40\x01\xe7\x2d\x17\x6e\x9b\x6a\x59\x1b\x4e\xe5\x8a\x9f\x2b\x0d\x34\x59\xeb\x5b\x27\xad\xcf\xd6\xb2\xec\x45\x6a\x13\xcf\x39\x2b\x70\xad\xe4\x59\x03\x83\x9c\x5c\x2b\x80\x45\x01\x5c\x31\x2e\x2d\xcb\xd2\x48\xd6\x4a\x97\x58\x72\xf0\x9d\x6f\x82\x02\xfd\xbc\xca\x76\x8f\x34\x50\x69\x12\x37\x0e\xad\x8c\xad\x77\xac\x45\xab\x23\xb3\xc2\xb6\xce\x33\xb0\x1c\x32\xfd\xb6\xa1\x87\xdc\xd2\x40\xe7\xd3\x83\xe9\xe9\xfa\x83\x24\x1f\x1e\x70\xa0\x41\x8a\x0d\x1d\x68\x10\x46\x70\xa5\x36\x74\xa2\x81\x6f\x68\xa1\xc1\x6d\xe8\x0c\x0f\xeb\x00\x19\x79\x44\x6e\x50\x26\xef\xb8\x57\x2a\x73\x4c\x20\xa2\x8b\xc2\xa2\x42\x83\x2c\xea\xd8\x46\x25\x23\x32\x69\x0d\xe8\xec\x9c\xf3\x2d\x18\xeb\x41\x38\x2e\xc4\xfa\x90\x1e\xd2\xba\x8a\xc4\x85\x8b\x8e\x6b\xad\x75\x04\x8e\x90\x6d\x02\xf4\xcc\x30\x74\x4e\x09\x68\x13\x38\xa9\x4d\x66\x46\x69\x1d\xb3\x07\x6d\xb5\x88\x60\xda\x94\x98\x17\xd8\xae\x4c\x5d\xa6\x81\x2a\x8d\xcc\x30\x30\xdb\x2c\x00\xb7\x4a\x46\xb7\xf5\x42\xb4\x5b\xa5\x9c\xf0\xca\xfb\x2c\x6d\xa6\x1b\xfa\x88\x65\xee\xc6\x75\xc8\x6f\xaf\x2e\x3f\x7e\x82\x79\x7e\x1a\x4b\x0e\xe4\xd5\x73\xe9\xe2\x81\x40\x5e\x6a\x81\xa6\xe9\x32\x0e\xb5\xab\xc7\xdf\x72\x20\x94\x7d\x7e\xb1\x77\x9a\x66\xb5\xee\xd5\xfd\x6a\xc5\x1f\x06\x3d\xfb\xb3\x3b\x73\x65\x25\xb5\x97\xc9\x72\xdd\xe6\x2c\x79\x32\x9c\x2b\x0e\x31\x33\x05\xde\xb7\xd9\x38\x21\x92\xd3\xda\x39\xad\x52\xca\x28\x3d\x68\xe3\x14\x5a\xd0\x26\x83\xb0\x99\x9e\xc8\x66\x4c\x05\x6b\x20\x74\xbf\x7f\xfd\xd0\x25\x3c\x57\xbf\x4f\x4a\xf5\xbb\xf2\xf4\x08\x6f\xde\xea\x2f\x9f\xa2\x30\x6f\xbf\xf8\x92\x3e\x4c\xbf\xde\x7e\xd4\xf6\xaa\xbe\xf9\xf3\xfd\x74\x83\xf7\x9f\xae\xfe\x48\x37\xe3\xfb\x77\xd7\x4b\xfd\xf0\x37\x6d\x9a\x5f\xc8\xeb\x4b\x9e\xd6\xf4\x90\xb9\x8e\x05\xee\xb0\xf9\x39\x64\x07\x3c\xae\x65\x0c\x64\x5f\xfb\x69\xff\xfc\xa9\x69\xfe\x59\x70\xc1\xb5\x63\x58\xfa\xdb\xb1\x1c\xb0\xcc\x81\x88\x86\x90\xa7\xd3\xe5\x16\xba\xfa\x57\xd7\xe3\xef\x1f\x03\xe1\x4d\xb3\xd2\xac\xcd\x93\x98\xce\xab\x99\x96\xf8\xd0\xa5\xeb\x35\xb3\xbb\xdd\x7e\xb7\xdb\xc7\xa5\x7b\xc8\xfb\x82\xf3\xb8\x94\x84\xf3\x7e\x12\xd3\x35\x1e\x77\xd3\x12\x77\x13\xf6\x67\x4c\xe9\x1e\xa1\xe2\x7f\x83\x0e\x2b\xf0\x04\x9a\xbb\xbb\xa1\x1b\xee\x5e\xa8\x79\xe9\xfe\xff\xba\x3f\x01\x9f\xb5\x1b\x18\xd2\xfd\x58\x2e\xe2\x53\xc1\x34\xf6\x7d\x57\x03\xa9\x65\xc1\xe6\xdf\x00\x00\x00\xff\xff\xdc\x3c\xc5\xc4\xef\x04\x00\x00")

func go_centrifuge_build_configs_testing_config_yaml() ([]byte, error) {
	return bindata_read(
		_go_centrifuge_build_configs_testing_config_yaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"go-centrifuge/build/configs/default_config.yaml": go_centrifuge_build_configs_default_config_yaml,
	"go-centrifuge/build/configs/testing_config.yaml": go_centrifuge_build_configs_testing_config_yaml,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"go-centrifuge": &_bintree_t{nil, map[string]*_bintree_t{
		"build": &_bintree_t{nil, map[string]*_bintree_t{
			"configs": &_bintree_t{nil, map[string]*_bintree_t{
				"default_config.yaml": &_bintree_t{go_centrifuge_build_configs_default_config_yaml, map[string]*_bintree_t{
				}},
				"testing_config.yaml": &_bintree_t{go_centrifuge_build_configs_testing_config_yaml, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
