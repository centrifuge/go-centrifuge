// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x59\x73\x1b\xb7\xb2\x7e\xe7\xaf\xe8\xa2\x5f\x92\xaa\x3b\xd4\xec\x0b\xab\x52\xb7\xb8\x49\x76\x6c\x2b\xd4\x66\xdd\xf8\xe5\x1a\x03\xf4\x90\xb0\x86\xc0\x18\xc0\x70\xf1\xaf\x3f\x05\xcc\x50\xa6\x2d\xcb\x39\x27\xa9\x93\x97\xe8\x85\x9a\x06\xba\xd1\xcb\xd7\x1f\x96\x17\x30\xc7\x8a\xb4\xb5\x01\x86\x5b\xac\x65\xb3\x41\x61\xc0\xa0\x36\x02\x0d\x90\x15\xe1\x42\x1b\x50\x5c\x3c\x60\x79\x18\x50\x14\x46\xf1\xaa\x5d\xe1\x25\x9a\x9d\x54\x0f\x63\x50\xad\xd6\x9c\x88\x35\xaf\xeb\x81\x33\xc6\x05\x82\x59\x23\xb0\xde\xae\xe8\x66\x6a\x30\x6b\x62\x60\xf6\x68\x01\x36\x84\x0b\x63\xed\x0f\x8e\x53\xc6\x03\x80\x17\xf0\x46\x52\x52\x3b\x17\xb8\x58\x01\x95\xc2\x28\x42\x0d\x10\xc6\x14\x6a\x8d\x1a\x04\x22\x03\x23\xa1\x44\xd0\x68\x60\xc7\xcd\x1a\x50\x6c\x61\x4b\x14\x27\x65\x8d\x7a\x34\x80\xa3\xbe\x35\x09\xc0\xd9\x18\xa2\x28\x72\xff\xa3\x59\xa3\xc2\x76\xd3\x47\xf0\x8a\x8d\x21\x8f\xf2\x6e\xac\x94\xd2\x68\xa3\x48\xb3\x44\x54\xba\xd3\xf5\x60\x78\xc6\x9b\xf8\x2c\x08\xb3\x91\x3f\xf2\x47\xc1\x99\xa1\xcd\x59\x94\x87\x7e\x78\xc6\x9b\x4a\x9f\x5d\x6d\x6e\xaf\xf6\xe5\xee\xa1\x7d\xff\xfb\xef\xf3\xaa\xfd\x7c\x5b\xee\x17\x93\x6b\xbc\xbd\x9c\xbd\x91\x9f\x0f\x87\x24\xc9\xb7\x57\x62\xf5\x6e\xbb\x7c\xfb\xf1\xcd\xef\x0f\xc3\x3f\x30\x1a\x1d\x8d\xbe\xab\xd2\xc5\x65\xba\x79\xf8\x74\x8f\x1f\xef\x5f\xdf\x87\x9f\x96\x6d\x90\xfe\x5f\xc3\x2e\xa2\x87\x5f\x65\x70\x1b\x6d\xd6\x64\xbd\x9c\x26\x37\x98\x88\xa0\x33\x7a\x4c\xd5\xe4\x98\xa9\x2e\x00\x1b\x3e\x0a\xc3\xcd\xe1\x9c\x50\x23\xd5\x61\x0c\xc3\x61\x3f\x42\x04\x5d\x4b\x75\x8d\x8d\xd4\xfc\x9b\x21\x2e\xb6\x92\x53\xbc\x13\x0d\xb1\xe9\x1b\x0e\x07\xae\x3a\x6f\x09\x17\xdf\xc5\x4a\x5f\x44\xf8\xe9\xba\x03\xcb\xcf\x03\x38\x05\x47\xe7\xcb\x0b\xb8\x6c\x37\xa8\x38\x85\x57\x73\x90\x95\x03\xca\x09\x24\x7a\x1b\x8f\x35\x4b\x82\x5e\x6b\x7a\x2c\x0c\xd4\x5c\x1b\xab\x29\x24\xc3\xa7\x98\x6a\x94\xdc\x72\x37\x20\x9d\xed\x13\x07\x8e\x8e\xfe\x61\xa1\xa3\x64\x14\x86\xc9\x28\xf4\xfd\x51\x1c\x7e\x5b\xec\x20\x9c\x47\xaf\xa5\xbc\xbf\xd4\xef\xf5\x7d\x76\x5b\xd2\xf7\x49\x7e\x99\x05\x77\x57\x37\xaf\x93\xf9\xc7\xf7\x9f\x36\xe7\x0f\x2f\x97\x2f\x77\xfb\xf3\xd7\xb7\x93\x83\xbc\xbb\x9b\xe7\xac\x1a\x7e\xcf\x7c\x9e\x8e\xc2\xc0\x7f\xce\xfc\x1c\x43\xbd\xbb\x5f\x44\x55\xc8\x7f\x2d\xef\xf0\xaa\xb8\xb8\xbb\xbb\x9a\xbe\x9c\xa9\xfb\x37\xe5\x94\x92\xe2\xed\xc5\xdb\x4f\xd5\xa6\x9c\xad\x54\x5b\x0e\xfb\x1c\x2d\x7a\x60\x3f\x56\xe2\xd5\x1c\x3c\xe8\xab\xf1\x1c\xf4\xe3\x5e\xf9\x0d\xb1\xe9\x01\x86\x4d\x2d\x0f\xc8\xe0\x66\x43\x94\x81\x59\x8f\x28\x0d\x95\x54\x2e\xa1\x2b\xbe\x45\xf1\x55\x2a\x9f\xa2\x0e\x9e\x85\x9d\xbf\x2f\xb0\x9c\xcf\xf3\x69\x56\x86\x98\xf9\x01\x2d\xaa\x8c\x15\xfe\x79\x1e\x90\x22\x0b\xd2\x24\x0d\xe9\x64\x96\x24\x71\x19\xfd\x00\xa0\xfe\x3e\x4a\x31\x2a\xf3\xb2\xa8\xaa\x2a\xf5\x27\x01\xfa\x51\x50\x31\x3f\x4b\xb3\x20\x2c\x72\xe6\x27\x59\x9c\xd0\x6a\x4a\xc2\xe7\xa0\xec\xef\x17\x41\x1a\xc6\x93\x45\x9c\xa5\x29\x56\x11\x99\xc4\x91\xef\x07\x61\x38\x4f\x16\x13\x92\x90\x18\x27\x59\x35\x4b\x8a\x2c\xef\x41\xff\x5a\x6e\x49\x17\xf5\x09\x44\x4b\x54\x82\xd4\x6b\xe4\xab\xb5\xe9\x21\xf4\xe2\xc5\x8b\x3e\x9f\x9d\xc6\xf9\xe4\xaa\xff\xf6\xe0\xde\xd2\x14\x17\x55\xab\x08\x1c\x64\x0b\x2b\xcb\xaf\x02\x50\x29\xa9\x2c\x38\x6e\xd7\x5c\x83\xc2\x4f\xad\x5d\x85\x6b\x10\xd2\x80\x6e\x9b\x46\x2a\x83\x0c\x4a\xa4\xa4\xd5\x68\x35\x95\xc3\xbe\x9d\xa2\x5a\x21\x2c\x47\x3a\x06\xd4\x86\x18\xdb\x00\xad\x15\x8d\xe0\xba\x15\x9d\xdc\xf3\x7a\xd9\x2f\x44\xd1\x35\xdf\xe2\x68\xf8\x3f\xbd\x53\x00\x3b\xdb\x3f\x46\x02\x93\xff\xeb\x34\x08\xd4\x8e\x7d\x1b\xa2\xb8\x39\x74\x0b\x39\x2b\x0f\x2e\x1e\x5c\x8d\xbb\xcf\x0f\xfd\x04\xcf\xa3\x6b\xc2\xc5\x2f\xdd\xb0\xe7\x59\x6f\x7f\x89\xfc\xc8\x8f\xc1\xf3\x76\x44\x35\xfd\x8f\x57\x12\xa5\x38\x2a\x48\xd2\xdc\xf7\x7d\x1f\x3c\x4f\x48\x8f\x08\xca\x51\x18\xaf\xac\x25\x7d\xd0\x9d\x4c\xa3\xda\xa2\x57\xdb\xa4\x82\xe7\x6d\xc8\xde\x6b\x6c\x8b\x42\x98\x58\x25\x2d\x48\xa3\xd7\xd2\xf4\x42\x27\xdb\x70\xf1\xd5\xa7\xf5\x99\x50\xc3\xb7\x08\x9e\x67\xa1\x69\x53\x24\xab\xea\x69\x26\xc0\xf3\x58\xe9\x51\xb9\x69\xec\x7c\x29\x40\x6b\x66\x43\x22\x74\x8d\x9e\xe6\x9f\x11\x62\xbf\x48\xc1\xf3\x3e\x6a\x29\x54\x43\xbd\xb5\xd4\x46\x03\xa9\xeb\x13\x19\x17\x06\x55\x45\x28\x5a\xf9\x87\xaf\xcb\xfd\x34\x99\xdf\xab\xfc\xd4\x86\x8f\xcc\x76\x92\xc0\xce\x11\x23\xe1\x1e\xcb\x1b\x2b\x37\x1a\x5c\x4e\x14\x54\x4a\x6e\xa0\x15\x46\xb5\xda\x42\x42\x2a\xbe\xe2\x62\x0c\xa3\xd1\xf0\xd9\x7a\xda\x96\x7d\x52\xcb\x0f\x9e\xd7\x0a\x4d\x2a\xf4\x70\xdf\x48\x8d\x1f\xa0\xaa\xc9\xea\x1b\x00\xff\x67\x3c\x1d\xfe\x45\x9e\xfe\xaa\x97\xfe\x6d\xa6\x0e\xfc\x78\x14\x24\xf1\x28\xc8\x47\xc9\x93\x6d\xf9\x48\xa5\x37\xe5\xbe\x7c\x3d\x2b\xdf\xaf\x8b\x5f\xdf\x19\x7d\x75\x78\x77\xc1\x6e\x97\x8a\xc4\xd7\xcd\xcd\x24\x36\xe5\x56\xa7\x44\x04\xc1\xc7\xdd\xc5\x24\xfc\x3c\xfc\x8e\xf9\x64\x14\xe4\xc9\x28\x8c\xb2\xe7\x16\xb8\xda\x84\xf4\x66\xa3\x16\x9c\xdc\xbc\x7d\x17\xaf\xee\xb6\xd9\xfd\xc5\xba\x59\x5d\xef\x64\xbe\x93\xe7\x37\xfa\xe5\xfa\xfd\x45\x79\xc1\x23\x32\xc9\xf7\x3f\xe6\x6a\x47\x1a\xcf\x32\x75\xf8\x5f\xa0\xea\x1f\x30\x75\x94\xa6\x65\x1c\x04\x69\x48\x92\xa8\x62\x59\xc2\x8a\x84\x45\x01\x9b\xa7\x2c\x98\xc5\x2c\x8f\xca\x79\x1c\xa5\xd3\x29\xfe\x90\xa9\xb3\x64\x4a\xe8\xb4\x08\x27\x91\x8f\xd9\xa2\x0a\xe6\x51\x4e\x43\x12\x05\xd3\xf8\x3c\x2c\xa2\x84\x45\xc5\x79\x9a\xe5\xf4\x07\x4c\x9d\x67\xb9\x8f\x41\x10\x47\x7e\x94\x96\x31\x2d\xb2\xa2\x5a\x84\x49\x14\x84\x39\x89\x73\x3f\x8b\xfd\x22\xaa\x82\x22\xcf\x7a\xa6\xbe\x96\x8d\x36\xf8\x84\xab\x99\x5c\x35\xc4\xd0\xf5\x9f\x3b\x85\x44\x7f\x11\xdd\xc7\xd5\xe1\xa7\xdb\xdf\xe6\xbf\x01\x55\x68\xa9\x5a\xf5\xae\x5a\x84\x3b\x3b\x3f\xff\xd3\x8e\x26\x5d\x02\x9e\x03\x7c\xf4\xf7\xe2\xdd\x67\x51\x11\x2c\xb2\x30\x0a\x93\x19\xb2\x59\x1c\x2c\xe2\xdc\x4f\xa2\x45\x96\x85\x79\x4e\xf2\xe2\x3c\x5c\x44\x41\x10\x24\x3f\xc4\x7b\x38\xcb\xfd\xf3\x60\x4e\xaa\x39\xc9\xc8\x64\x8e\x65\x38\x0b\xb2\x84\xc5\xd3\x38\x9a\xe4\x49\x1e\x67\xd1\x22\x08\xb2\x20\x7a\x1e\xef\x69\x39\xf3\x83\xb4\x98\xc7\x49\x15\x55\x98\x4d\x58\x15\x4f\x93\x60\x1a\xc7\xc9\xdc\x0f\xa3\x45\x10\x62\x54\xa2\xcf\xd2\xd3\xe3\xb8\x3d\x7e\x7f\x03\x78\xdc\x94\x44\x51\xc2\x50\x49\x3b\xf2\xa7\x70\x1f\xf8\xff\x30\x40\xda\x1b\xe9\x11\x3b\xdf\x01\x64\xf0\xf7\x02\x72\x72\x1e\x27\x29\x0d\xd2\x28\x4f\x49\x1a\x57\x2c\x3e\x8f\xcb\xb4\x20\x55\x10\x91\x3c\x9d\x57\xfe\x34\x49\xc3\x09\xf1\xfd\x1f\x02\x32\x8d\xb2\x69\x3e\x8b\xe6\xe1\x64\x12\xcd\x68\xe8\xa7\xf3\x22\x4e\x82\xa2\x4c\xe2\xbc\x08\xfd\xbc\xa0\xc5\x22\xcd\x8a\xc2\x7f\x1e\x90\x51\x98\xe6\x71\x9a\x4c\xe2\x99\x1f\xcc\x7c\x92\xa5\x33\x56\xfa\xd1\x9c\x96\x71\x16\xe7\x3e\x99\x91\x18\x43\x7f\xee\xe3\x70\x60\xef\xff\xc4\x10\xb8\x31\x52\x91\x15\x0e\x74\xf7\xdb\xdd\xea\x97\xc4\xac\x5d\x66\x6a\x7b\x77\x9c\x4f\xa1\xe2\x35\x0e\x00\x1a\x62\xd6\x63\x38\x33\x9b\xe6\xec\xcb\xeb\xc2\xff\x33\x62\xc8\xc8\xcd\x64\xa5\xb5\x3b\x93\xa2\xe2\xab\x56\x11\x77\x3a\x3a\x2e\x40\x9d\xf4\xe6\xcf\x2f\xd3\x19\x78\xb2\xda\x84\x52\xd9\x0a\xa3\xe1\x01\x0f\xd0\x47\x31\x20\xbd\xd0\xae\xf3\x80\x07\x2b\xc6\xde\xe2\x71\xc8\xea\xbe\x7a\x3c\x0e\xee\x2c\x80\x1c\x10\x26\xcb\x57\x40\x04\x83\x65\xb8\x84\x9b\xee\x2c\x67\x37\x10\x14\x76\x87\x18\x58\xee\x7f\x29\xb5\x11\x64\x83\x63\x78\x7c\x11\x18\xbc\x80\xa5\x54\xa6\x37\x63\x4d\x7c\x5f\xd5\x4e\x1a\x43\xee\xe7\xa1\x5d\xde\xf6\xa8\x67\xa4\x3b\x10\x03\x3d\xcd\x9a\x1e\x34\x61\xd3\x25\xe9\xa6\x41\xca\xab\x03\x2c\xf6\xc6\x9d\xbb\xe0\xd5\xf2\xc4\x5b\x77\x50\xa4\x44\x40\x89\xa0\xd0\x9e\x85\x19\x10\x03\xbc\x82\x12\xd7\x5c\x30\xb8\x9c\xdc\x5a\x33\xd8\x6b\xbf\x5a\x8e\x61\x37\xda\x8f\x0e\xa3\xcf\x5d\x09\xac\xd7\xad\x46\xf6\xd8\x08\x36\xee\x9a\x1c\x50\xd9\x42\x38\x77\x5d\x1b\xbb\xd9\xb7\x7c\x83\xb2\x75\x61\x0a\x90\x0d\x8a\xfe\xd1\xa7\x3f\x09\xbb\x3d\xd4\x9d\xee\x07\x70\x14\xf7\x2a\x63\x18\x46\xbe\x76\xb0\xbb\x6a\xb1\xc5\x6f\xc2\x75\xab\x13\x7d\x10\x74\xad\xa4\x90\xad\xb6\xdb\x32\x45\xad\xb9\x58\x0d\x3e\x59\x85\x2e\x19\xdd\x93\x95\xee\x42\x6f\x37\x25\x2a\x4b\x8d\xb6\xe7\x51\xe9\x33\x2a\x85\xb6\x9c\xd9\x6f\xf2\x3b\x5e\xd7\x36\x2f\xa4\xb6\x47\x7b\xd3\x65\x46\x1b\xa2\x4c\xdb\x0c\xc0\xea\xdf\x77\x8a\x96\x3d\x7d\x67\xff\x5c\x21\x6a\x68\x1b\x98\x2d\xef\x80\x1e\x68\x8d\xba\x0b\xb6\x5b\xc2\xde\xe3\x76\x84\xbb\xb7\x2e\xeb\x31\x6e\xd1\x22\x09\xfa\xe1\x7b\xc2\x5d\xbc\x6f\x6f\x3a\xfe\x71\x14\xde\xfb\xa8\xd0\x28\x8e\xee\x3e\x22\x77\x7d\xba\x09\x18\xa2\x2d\x85\xdb\x9f\xeb\x6e\x82\x63\xf2\xc1\x09\xe9\x69\x57\x7f\x4e\xbf\xce\xd8\xe0\x48\x79\x3d\x48\xb0\x46\xcb\x66\xbb\x35\xa7\xeb\x47\x3a\x84\x1e\xeb\xb6\x2c\xf6\x3e\xda\xef\x22\xd2\x66\xb0\x3f\xf6\x30\xe0\xdd\xc5\x83\xb6\xda\xc8\x4d\xbf\xc8\xb1\x11\xfb\x67\xc1\xbe\xc5\x2e\x1d\xe6\x87\x96\x78\x87\x8f\x8f\x7f\xae\xc7\x7b\xc3\x8f\xeb\xd2\xda\x5e\x15\x3b\x70\xfe\xb4\x43\x77\x53\xe6\x0a\x61\xa7\x41\x2a\xe0\x0d\xed\x5f\x04\x49\x59\xa3\xfd\x97\xba\x03\x57\x97\x4d\x7b\xb0\xb2\x8a\x77\xd7\x6f\xc6\xb0\x36\xa6\x19\x9f\x9d\xb9\xab\x99\xbd\xcf\x8d\x8b\x24\x4e\xdc\xda\x1b\xb2\xe7\x1b\x1b\x62\x9f\xcf\x15\xb1\x31\x71\xea\xec\x35\xe4\x70\x4c\xb0\x22\x42\xf7\x17\x46\x2e\x60\x87\xdc\x69\x87\x3e\x5c\xec\x90\x83\x90\xbb\x01\x58\x5b\x17\x44\x2f\xad\xf6\x18\x42\xff\xf1\xcf\x4d\xbd\x20\x1a\x6a\xbe\xe1\xfd\x5e\xc1\x78\x55\xa1\xb2\xd1\x3d\x56\x48\x36\x78\xec\x5a\xb0\x7e\xbc\x71\xb3\x8f\x8f\x99\x33\x77\x80\x74\x10\xeb\x6d\x5a\xe9\x84\xb1\xd7\x78\x18\x43\x74\x2a\xbc\xc6\xad\x7c\x40\x27\x4f\x92\xa3\xb8\xdb\x29\x66\x72\xb3\xe1\x96\x3a\xbe\x91\x2f\x15\x1e\x87\x82\x2f\xa6\x44\x65\xde\x72\x61\xc6\x50\x7c\x89\xe3\xd8\xbb\x46\x3a\x08\x77\xf9\x11\x5f\x6a\x76\x9a\xa9\xbe\x3a\x8c\x75\x6f\xb7\x04\xdc\xa5\xdf\xd1\x62\x57\x24\x30\x8a\xaf\x56\xa8\x90\x75\x9d\x6e\x70\x6f\x8e\xe8\xef\xba\x3d\xf5\x6d\xbb\x3f\xb7\xb0\x42\xc2\x40\x8a\xfa\x70\x92\xbc\xc7\x07\xec\xa3\x4b\x5f\x4c\x5f\x23\x61\x5f\x9b\x0f\x92\xde\xfa\xa5\xc5\xd8\xa9\xef\x8d\x94\xb5\xad\xe8\x63\xc7\x19\x09\x1a\x05\xfb\x06\x0c\x72\xeb\x18\x6e\x43\xf6\x8f\x8d\x17\xf6\x99\xfa\xbe\x49\xf7\x74\xb0\x25\xb5\xb3\x7b\xe8\x58\x81\x58\x07\x69\xab\x1c\x1e\x4e\x35\xd6\x44\x43\x89\x28\x80\xa1\x41\x6a\x5c\x9a\x8e\x06\xec\x7a\x76\xbf\x0f\xfb\x08\xe6\x5c\xbb\x3e\x70\x16\xb5\xdc\x3c\xe9\x23\x0d\x4c\x9e\xbe\x30\x81\xd9\x3b\x8f\x48\x63\xc1\x6c\xf6\x4b\x29\xeb\x09\xb5\x6c\xb9\x10\xd6\x12\x1b\x83\x51\x2d\x5a\x16\x21\xe2\x00\x0c\xcb\x76\xb5\xea\x99\xda\x36\xb7\xe3\xc5\x95\x04\xbb\xc8\xc0\x8d\x76\x24\xd2\x34\x4a\x56\x1d\xc8\x8f\x2a\x76\x0f\xb0\xd2\x31\x54\xa4\xd6\x38\x18\x74\xa8\xeb\xdf\xea\x1b\x85\xb4\x07\x9f\x5b\xf0\x5f\x01\x00\x00\xff\xff\x02\x4a\xdb\xe2\xa0\x18\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6304, mode: os.FileMode(420), modTime: time.Unix(1554808957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1552945185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

