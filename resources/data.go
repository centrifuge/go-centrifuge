// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x73\x1b\xb7\xb2\xde\xf3\x57\x74\x51\x1b\xa7\xea\x0e\x35\xef\x07\xab\x52\xb7\xf8\xb4\x1d\xcb\x0a\x25\x51\x51\xac\xcd\x35\x06\xd3\x43\xc2\x1a\x02\x63\x00\xc3\x87\x7f\xfd\x2d\x60\x86\xb4\x64\x59\xce\x39\x49\x25\x67\x73\xb8\x21\x09\xa0\x1b\xfd\xf8\xfa\x43\x03\x67\x30\xc5\x92\x34\x95\x86\x02\xb7\x58\x89\x7a\x83\x5c\x83\x46\xa5\x39\x6a\x20\x2b\xc2\xb8\xd2\x20\x19\x7f\xc0\xfc\xd0\xa3\xc8\xb5\x64\x65\xb3\xc2\x4b\xd4\x3b\x21\x1f\x86\x20\x1b\xa5\x18\xe1\x6b\x56\x55\x3d\xab\x8c\x71\x04\xbd\x46\x28\x3a\xbd\xbc\x5d\xa9\x40\xaf\x89\x86\xc9\x49\x03\x6c\x08\xe3\xda\xe8\xef\x1d\x97\x0c\x7b\x00\x67\x70\x21\x28\xa9\xac\x09\x8c\xaf\x80\x0a\xae\x25\xa1\x1a\x48\x51\x48\x54\x0a\x15\x70\xc4\x02\xb4\x80\x1c\x41\xa1\x86\x1d\xd3\x6b\x40\xbe\x85\x2d\x91\x8c\xe4\x15\xaa\x41\x0f\x8e\xf2\x46\x25\x00\x2b\x86\x10\x04\x81\xfd\x8d\x7a\x8d\x12\x9b\x4d\xe7\xc1\xdb\x62\x08\x69\x90\xb6\x73\xb9\x10\x5a\x69\x49\xea\x05\xa2\x54\xad\xac\x03\xfd\x73\x56\x87\xe7\x9e\x9f\x0c\xdc\x81\x3b\xf0\xce\x35\xad\xcf\x83\xd4\x77\xfd\x73\x56\x97\xea\xfc\x6a\xb3\xbc\xda\xe7\xbb\x87\xe6\xfe\xc3\x87\x69\xd9\x7c\x59\xe6\xfb\xd9\xe8\x1a\x97\x97\x93\x0b\xf1\xe5\x70\x88\xa2\x74\x7b\xc5\x57\xbf\x6d\x17\xef\x3f\x5d\x7c\x78\xe8\xff\x81\xd2\xe0\xa8\xf4\xb7\x32\x9e\x5d\xc6\x9b\x87\xcf\x77\xf8\xe9\xee\xdd\x9d\xff\x79\xd1\x78\xf1\xef\x75\xf1\x3a\x78\xf8\x45\x78\xcb\x60\xb3\x26\xeb\xc5\x38\xba\xc1\x88\x7b\xad\xd2\x63\xa8\x46\xc7\x48\xb5\x0e\x18\xf7\x91\x6b\xa6\x0f\x73\x42\xb5\x90\x87\x21\xf4\xfb\xdd\x0c\xe1\x74\x2d\xe4\x35\xd6\x42\xb1\x6f\xa6\x18\xdf\x0a\x46\xf1\x96\xd7\xc4\x84\xaf\xdf\xef\xd9\xec\xbc\x27\x8c\x7f\x17\x2b\x5d\x12\xe1\xd5\x75\x0b\x96\x9f\x7a\xf0\x18\x1c\xad\x2d\x67\x70\xd9\x6c\x50\x32\x0a\x6f\xa7\x20\x4a\x0b\x94\x47\x90\xe8\x74\x9c\x72\x16\x79\x9d\xd4\xf8\x98\x18\xa8\x98\xd2\x46\x92\x8b\x02\x9f\x63\xaa\x96\x62\xcb\xec\x84\xb0\xba\x1f\x19\x70\x34\xf4\x0f\x13\x1d\x44\x03\xdf\x8f\x06\xbe\xeb\x0e\x42\xff\xdb\x64\x7b\xfe\x34\x78\x27\xc4\xdd\x05\x63\xf4\xea\xb7\xdd\x72\xbd\x1c\x7f\x88\xf7\xef\xe8\x42\x5c\x94\xf1\xf5\xd5\x87\x5f\xe6\xf5\xae\xf4\x64\x12\xed\x2e\xf6\xfe\xfd\x75\x50\x4f\x0a\xaf\xff\x3d\xf5\x69\x3c\xf0\x3d\xf7\x25\xf5\x57\xf7\xef\x47\xe9\xeb\xc5\x1b\xb9\x9d\xdd\x8f\xb3\x5d\xf1\x20\x6e\xe9\x68\xb4\x99\xdc\xbf\xa9\x33\x3c\x1c\xee\xc3\x9b\x59\xba\x9a\xcb\x60\xbd\xbc\xfc\xbd\xdf\xc5\x68\xd6\x01\xfb\x94\x89\xb7\x53\x70\xa0\xcb\xc6\x4b\xd0\x0f\x3b\xe1\x0b\x62\xc2\x03\x05\xd6\x95\x38\x60\x01\x37\x1b\x22\x35\x4c\x3a\x44\x29\x28\x85\xb4\x01\x5d\xb1\x2d\xf2\x27\xa1\x7c\x8e\x3a\x78\x11\x76\xee\x3e\xc3\x7c\x3a\x4d\xc7\x49\xee\x63\xe2\x7a\x34\x2b\x93\x22\x73\xe7\xa9\x47\xb2\xc4\x8b\xa3\xd8\xa7\xa3\x49\x14\x85\x79\xf0\x03\x80\xba\xfb\x20\xc6\x20\x4f\xf3\xac\x2c\xcb\xd8\x1d\x79\xe8\x06\x5e\x59\xb8\x49\x9c\x78\x7e\x96\x16\x6e\x94\x84\x11\x2d\xc7\xc4\x7f\x09\xca\xee\x7e\xe6\xc5\x7e\x38\x9a\x85\x49\x1c\x63\x19\x90\x51\x18\xb8\xae\xe7\xfb\xd3\x68\x36\x22\x11\x09\x71\x94\x94\x93\x28\x4b\xd2\x0e\xf4\xef\xc4\x96\xb4\x5e\x3f\x82\x68\x8e\x92\x93\x6a\x8d\x6c\xb5\xd6\x1d\x84\xce\xce\xce\xba\x78\xb6\x12\xf3\xd1\x55\xf7\xdf\x81\x3b\x43\x53\x8c\x97\x8d\x24\x70\x10\x0d\xac\x0c\xbf\x72\x40\x29\x85\x34\xe0\x58\xae\x99\x02\x89\x9f\x1b\xb3\x0b\x53\xc0\x85\x06\xd5\xd4\xb5\x90\x1a\x0b\xc8\x91\x92\x46\xa1\x91\x94\x16\xfb\x66\x89\x6c\x38\x37\x1c\x69\x19\x50\x69\xa2\x4d\x01\x34\x66\x68\x00\xd7\x0d\x6f\xc7\x1d\xa7\x1b\xfb\x99\x48\xba\x66\x5b\x1c\xf4\xff\xa7\x33\x0a\x60\x67\xea\x47\x0b\x28\xc4\xff\x5a\x09\x02\x95\x65\xdf\x9a\x48\xa6\x0f\xed\x46\x56\xcb\x83\xf5\x07\x57\xc3\xf6\xef\xc7\x6e\x81\xe3\xd0\x35\x61\xfc\xe7\x76\xda\x71\x8c\xb5\x3f\x07\x6e\xe0\x86\xe0\x38\x3b\x22\xeb\xee\xcb\xc9\x89\x94\x0c\x25\x44\x71\xea\xba\xae\x0b\x8e\xc3\x85\x43\x38\x65\xc8\xb5\x93\x57\x82\x3e\xa8\x76\x4c\xa1\xdc\xa2\x53\x99\xa0\x82\xe3\x6c\xc8\xde\xa9\x4d\x89\x82\x1f\x19\x21\xc5\x49\xad\xd6\x42\x77\x83\x76\x6c\xc3\xf8\x93\xbf\xc6\x66\x42\x35\xdb\x22\x38\x8e\x81\xa6\x09\x91\x28\xcb\xe7\x91\x00\xc7\x29\x72\x87\x8a\x4d\x6d\xd6\x0b\x0e\x4a\x15\xc6\x25\x42\xd7\xe8\x28\xf6\x05\x21\x74\xb3\x18\x1c\xe7\x93\x12\x5c\xd6\xd4\x59\x0b\xa5\x15\x90\xaa\x7a\x34\xc6\xb8\x46\x59\x12\x8a\x66\xfc\xe3\xd3\x74\x3f\x0f\xe6\xf7\x32\x3f\x36\xee\x63\x61\x2a\x89\x63\x6b\x88\x16\x70\x87\xf9\x8d\x19\xd7\x0a\x6c\x4c\x24\x94\x52\x6c\xa0\xe1\x5a\x36\xca\x40\x42\x48\xb6\x62\x7c\x08\x83\x41\xff\xc5\x7c\x9a\x92\x7d\x96\xcb\x8f\x8e\xd3\x70\x45\x4a\x74\x70\x5f\x0b\x85\x1f\xa1\xac\xc8\xea\x1b\x00\xff\x7b\x3c\xed\xff\x45\x9e\x7e\x52\x4b\xff\x32\x53\x7b\x6e\x38\xf0\xa2\x70\xe0\xa5\x83\xe8\xd9\xb1\x7c\xa4\xd2\x85\x8a\x19\xc1\xdb\x66\x7e\x7f\xd9\x78\xaf\xf7\x5b\x75\x18\x2f\x6f\xe4\x52\x65\x5b\x3d\x8e\x73\xfd\x7e\xc4\xdf\xcc\xc5\xc5\xa7\xfc\xe1\xcb\x84\xf4\xbf\xa3\x3e\x1a\x78\x69\x34\xf0\x83\xe4\xc5\x0d\x26\xaf\xe9\x8e\x2d\x3f\x89\x77\x77\x6f\xca\x31\x09\x53\xff\x76\xa1\x09\xde\xee\x2f\x2f\x76\x45\xfa\x25\xe7\x63\xef\x26\xd9\xe1\xe8\xfe\x76\x7f\xff\x63\xae\xb6\xa4\xf1\x22\x53\xfb\x7f\x03\x55\xff\x80\xa9\x83\x38\xce\x43\xcf\x8b\x7d\x12\x05\x65\x91\x44\x45\x16\x15\x81\x57\x4c\xe3\xc2\x9b\x84\x45\x1a\xe4\xd3\x30\x88\xc7\x63\xfc\x21\x53\x27\xd1\x98\xd0\x71\xe6\x8f\x02\x17\x93\x59\xe9\x4d\x83\x94\xfa\x24\xf0\xc6\xe1\xdc\xcf\x82\xa8\x08\xb2\x79\x9c\xa4\xf4\x07\x4c\x9d\x26\xa9\x8b\x9e\x17\x06\x6e\x10\xe7\x21\xcd\x92\xac\x9c\xf9\x51\xe0\xf9\x29\x09\x53\x37\x09\xdd\x2c\x28\xbd\x2c\x4d\x3a\xa6\xbe\x16\xb5\xd2\xf8\x8c\xab\x0b\xb1\xaa\x89\xa6\xeb\x3f\xd7\x85\x04\x7f\x11\xdd\xc7\xdd\xe1\xd5\xf2\xd7\xe9\xaf\x40\x25\x1a\xaa\x96\x9d\xa9\x06\xe1\x56\xcf\x4f\x2f\x02\xfe\x6f\x6f\x4e\xfe\x73\xed\x49\x1b\x84\x97\x40\x1f\xfc\xb3\x98\x9f\xa7\xb1\x97\x24\xb9\x9f\x44\xb3\x70\x4e\x73\x7f\x94\x47\xa3\x60\x4e\xe7\xd1\x2c\x8c\x09\xc9\x23\xaf\x4c\x82\x69\x42\xe2\x1f\x62\xbe\x8c\x03\xb7\x48\xf3\x59\x14\xc7\xe1\x24\x99\x8f\x3d\x3f\x08\x27\xb3\x32\x4c\xf3\x78\x94\xf8\x19\x9d\x61\x30\x4e\xbc\x69\xfa\x32\xe6\x33\x44\x4c\xe7\xf9\x2c\x98\xf9\x19\xcd\x62\x3a\xc9\xc2\x70\xee\x22\x4e\xbc\x28\x0b\x4b\xf4\xf2\x38\x08\x8a\x91\x29\xbd\xaf\x2d\xb9\x69\xc1\xbf\x01\x3d\x6e\x72\x22\x29\x29\x50\x0a\x33\xf3\xa7\xb0\xef\xb9\xff\x05\xe5\xb7\xa0\xf4\xfe\x59\x50\xfa\x7e\x94\x10\x77\x9c\xcc\x22\x2f\x88\x52\x9f\x06\xf1\xd8\xf3\x13\x1a\xce\xdc\xc2\x0b\xfd\x79\x3a\xce\x52\x3f\x09\xc8\x8f\x5b\xe6\xd8\xc7\x28\x1d\x07\x59\x46\x0a\xea\x06\x01\xc6\x18\xba\x61\x96\xa4\x53\x2f\x9e\x46\xa1\xe7\x07\x65\x38\xf1\xdc\x31\x7d\x19\x94\xe3\x38\x4f\xe2\xe9\x64\x1a\x8f\xc2\x28\x9e\x46\x45\x36\x2f\xe7\xc9\xd4\x4b\xe7\x51\xec\x4f\x83\x34\x0a\x4b\xcf\x23\xd1\x24\xeb\xf7\x7a\x67\x30\x25\x9a\xc0\x8d\x16\x92\xac\xb0\xa7\xda\xef\xf6\x76\xbf\x20\x7a\x6d\x23\x53\x99\x3b\xe4\x74\x0c\x25\xab\xb0\x07\x50\x13\xbd\x1e\xc2\xb9\xde\xd4\xe7\x5f\x5f\x19\xfe\xaf\x20\x9a\x0c\xec\xca\x22\x37\x7a\x27\x82\x97\x6c\xd5\x48\x62\xbb\xa4\xe3\x06\xd4\x8e\xde\xfc\xf9\x6d\x5a\x05\xcf\x76\x1b\x51\x2a\x1a\xae\x15\x3c\xe0\x01\x3a\x2f\x7a\xa4\x1b\x34\xfb\x3c\xe0\xc1\x0c\x63\xa7\xf1\x38\x65\x64\xdf\x9e\xda\xc2\x9d\x01\x90\x05\xc2\x68\xf1\x16\x08\x2f\x60\xe1\x2f\xe0\xa6\xed\xe9\xcc\x41\x82\xdc\x9c\x14\x3d\x73\x06\xbc\x11\x4a\x73\xb2\xc1\x21\x9c\x5e\x06\x7a\x67\xb0\x10\x52\x77\x6a\x8c\x8a\xef\x8b\x9a\x45\x43\x48\xdd\xd4\xef\x3d\x15\x79\x7d\xbd\x98\x1c\x5b\xc8\x47\x32\x2b\x59\xd3\x56\xc6\x37\xb5\x64\x85\x10\xa5\xa3\x85\xed\xa6\x81\x3e\x0e\xb5\xea\xd5\x7e\xdd\x46\xf6\xa6\x46\xca\xca\x03\xcc\xf6\xda\x36\x6d\xf0\x76\xf1\xc8\x45\xdb\x65\x52\xc2\x21\x47\x90\x68\x1a\xe9\x02\x88\x06\x56\x42\x8e\x6b\xc6\x0b\xb8\x1c\x2d\x8d\x1a\xec\xa4\xdf\x2e\x86\xb0\x1b\xec\x07\x87\xc1\x97\x36\x6f\xc6\xee\x46\x61\x71\xaa\x1e\x13\xac\x8a\x1c\x50\x9a\xec\x59\x7b\x6d\xed\xdb\xd5\x4b\xb6\x41\xd1\x58\x47\x39\x88\x1a\x79\xf7\x62\xd4\xb5\xd1\xf6\x00\xb6\x57\x83\x1e\x1c\x87\x3b\x91\x21\xf4\x03\x57\x59\xac\x5e\x35\xd8\xe0\x37\xee\xda\xdd\x89\x3a\x70\xba\x96\x82\x8b\x46\x99\x33\x9d\xa2\x52\x8c\xaf\x7a\x9f\x8d\x40\x1b\x8c\xf6\xbd\x4b\xb5\xae\x37\x9b\x1c\xa5\xe1\x54\x43\x14\x28\xd5\x39\x15\x5c\x19\xb2\xed\x3a\x84\x1d\xab\x2a\x13\x17\x52\x99\x7b\x81\x6e\x23\xa3\x34\x91\xba\xa9\x7b\x60\xe4\xef\x5a\xc1\x21\xb4\xee\xcd\x25\xa2\x82\xa6\x86\xc9\xe2\x16\xe8\x81\x56\xa8\x5a\x57\xdb\x0d\xcc\x15\x70\x47\x98\x7d\x26\x33\xf6\xe2\x16\x0d\xf8\xa0\x9b\xbe\x23\xcc\x7a\xfb\xfe\xa6\xa5\x2c\xcb\xfc\x9d\x85\x12\xb5\x64\x68\xaf\x32\x62\xd7\x05\x9b\x80\x26\xca\x30\xbf\xf9\xba\x6e\x17\xd8\x03\xa0\xf7\x88\x27\x95\xcd\x3e\xa3\x4f\xe3\xd5\x3b\xb2\x64\x07\x11\xac\xd0\x10\xe0\x6e\xcd\xe8\xfa\xc4\xa0\xd0\x95\x87\x49\x8a\xb9\xca\x76\x87\x8f\x30\xf1\xeb\x3a\xa6\x02\x58\x7b\x67\xa1\x8d\xd2\x62\xd3\x6d\x72\xac\xdd\xee\x45\xb1\xab\xca\x4b\x5b\x26\xfd\x0d\x61\xbc\x7f\x7a\x37\xb4\xb4\xd0\x29\x3e\xed\x4b\x2b\x73\xcb\x6c\xa1\xf9\x6a\x87\xf6\x92\xcd\x24\xc2\x4e\x81\x90\xc0\x6a\xda\x3d\x26\x92\xbc\x42\xf3\x93\xda\x5e\xad\x8d\xa6\xe9\xc9\x8c\xe0\xed\xf5\xc5\x10\xd6\x5a\xd7\xc3\xf3\x73\x7b\xab\x33\x57\xc1\x61\x16\x85\x51\x0b\x44\xd3\xd7\x49\xdc\x88\x2d\xc2\x2b\x73\x73\x37\x10\x36\xb2\x2b\xa2\x16\x92\x51\x53\xd0\xee\xf1\x73\x44\x8e\x7d\x1e\x5d\x11\x05\x15\xdb\x30\xdd\x2e\xbe\x30\x3f\x4f\x8b\x9f\x80\x5c\x0b\x9b\xed\x36\x57\xfc\xab\x7b\x5a\x12\xae\xc8\xe9\xde\x68\x1c\x29\x8a\xf6\x85\x94\x80\xbd\x5a\x5b\xd2\x69\xfd\x01\x2d\xd9\x6a\x85\x12\x8b\xb6\x24\x34\xee\xf5\x11\x28\x6d\x59\xc4\xae\xa9\x8b\x97\x36\x96\x48\x0a\x10\xbc\x3a\x98\x72\x3b\x16\xcb\xf1\x99\xf8\x68\xd2\x57\xd5\xd7\x48\x8a\xa7\xea\xbd\xa8\xd3\x7e\x69\xd2\xf1\xd8\xf6\x5a\x88\x0a\x36\x64\x7f\x02\xa7\x16\xa0\x90\x17\x06\x98\x8f\x96\x89\xad\xa5\x82\x0d\xd9\x9f\x30\xea\x77\x91\xfa\xbe\x4a\x7b\x41\xdf\x92\xca\xea\x3d\xb4\x05\x44\x8c\x81\xb4\x91\xd2\xbe\x60\x3e\x92\x58\x13\x05\x39\x22\x87\x02\x35\x52\x6d\xc3\x74\x54\x60\xf6\x33\xa7\xa9\xdf\x79\x30\x65\xca\x42\xc6\x6a\x54\x62\xf3\x0c\x72\x0a\x0a\xf1\xf8\x1d\x07\xf4\xde\x5a\x44\x6a\x66\xca\x6c\xbf\x10\xa2\x1a\x51\x43\x2b\x33\x6e\x34\x15\x43\xd0\xb2\x41\x53\x70\x84\x1f\xa0\xc0\xbc\x59\xad\x3a\x4a\x33\x75\x60\x09\x64\x25\xc0\x6c\xd2\xb3\xb3\x6d\xbd\xd5\xb5\x14\xa5\x4d\xcf\x49\xc4\x90\xa5\x19\x1d\x42\x49\x2a\x85\xbd\x5e\xdb\x15\x74\x2f\xe2\xb5\x44\x2a\x36\x16\x69\x76\xc3\xff\x0f\x00\x00\xff\xff\xff\x15\xe8\x58\x06\x18\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 6150, mode: os.FileMode(420), modTime: time.Unix(1554214661, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xb9\x8e\xe4\x36\x10\xcd\xf5\x15\x04\x1d\x4c\xd2\x07\x4f\xf1\xc8\x1c\x1a\x0b\x3b\xb1\x81\x8d\x8b\x64\xb1\x87\xe8\xd1\x61\x92\x9a\xd9\xc6\x62\xff\xdd\x50\x6f\x8f\xbd\x99\x67\xb3\xaa\xd2\x3b\xaa\xa4\xa7\x88\x73\xaf\x25\x6f\x17\xfc\x03\xfb\xdb\x52\xaf\x9e\x74\x6c\xbd\xcc\x97\x01\xfb\x33\x56\xdc\x26\x3f\x10\x02\x31\x2e\xdb\xdc\xdb\x5e\x13\x32\x41\x99\x3d\xb9\x97\x84\x5c\xf1\xe6\xc9\xd3\x57\x0a\x29\x55\x6c\x8d\x7a\x6a\x5d\x60\x60\x47\x6d\x65\x54\x4a\x29\x88\x39\x19\x1e\xd4\x28\x91\x25\x19\xb5\x06\xe4\x8a\x0b\xd0\xf4\x40\x63\xbd\xad\x7d\xa1\xfe\x2b\x8d\x65\x7d\xc6\x4a\x3d\x05\x6c\x47\x2e\xec\x31\xf6\xba\x03\xee\xe3\x8e\x5f\x3a\xf5\x34\x1a\xe3\xb2\x95\xc6\x25\x63\x58\x72\x22\xe6\xc8\x53\x4a\x0a\x6c\x96\x3c\x69\x60\x90\xa2\xcd\x02\x58\x10\xc0\x15\xe3\xd2\xb0\x24\x47\xc9\xb2\xb4\x91\x45\x0b\xff\xea\xad\x50\x61\x6a\xbb\x6d\x79\xa5\x9e\xca\x31\xf2\xd1\xa2\x91\x21\x3b\xcb\x32\x1a\x1d\x98\x11\x26\x5b\xc7\xc0\x70\x48\xf4\xdb\x81\x5e\x53\xa6\x9e\xb6\xfb\xc2\xf4\xde\xfe\x27\x92\xae\x2f\x38\x53\x2f\xc5\x81\xce\xd4\x8b\x51\x70\xa5\x0e\x74\xa5\x9e\x1f\x68\xa5\xde\x1e\x68\x83\x97\xfd\x80\x84\x3c\x20\x1f\x51\x46\x67\xb9\x53\x2a\x71\x8c\x20\x82\x0d\xc2\xa0\xc2\x11\x59\xd0\x21\x07\x25\x03\x32\x69\x46\xd0\xc9\x5a\xeb\x32\x8c\xc6\x81\xb0\x5c\x88\x7d\x91\x09\xe2\xfe\x2a\x22\x17\x36\x58\xae\xb5\xd6\x01\x38\x42\x32\x11\xd0\xb1\x91\xa1\xb5\x4a\x40\x8e\x60\xa5\x1e\x13\x1b\x95\xd6\x21\x39\xd0\x46\x8b\x00\x63\x8e\x91\x39\x81\x79\x57\x2a\x89\x7a\xaa\x34\xb2\x91\xc1\x78\x4c\x02\xf0\xa8\x64\xb0\x47\x27\x44\x3e\x2a\x65\x85\x53\xce\x25\x69\x12\x3d\xd0\x57\xac\xad\x2c\xfb\x91\xdf\x9e\x1e\x1f\x7e\x85\xd6\xde\x96\x9a\x3c\x79\x7a\x1f\x3d\x32\xe0\xc9\x47\x23\x30\x0c\x25\xe1\xdc\x4b\xbf\xfd\x96\x3c\xa1\xec\xcb\x87\xb3\x33\x0c\xbf\x90\x5f\x1f\xa9\xdc\x33\x48\x5a\x5f\x2a\x5c\x70\xf8\x31\xaa\x57\xbc\xed\x63\xf4\xe4\xdc\xa7\xf5\xfc\xfe\x68\x18\xfe\xde\x70\xc3\x1d\x31\x6f\xd3\xe7\xa5\x5e\xb1\x36\x4f\xc4\x40\xc8\xdb\xbd\xf9\x0c\xa5\xff\x55\x26\xfc\xfd\x4f\x4f\xf8\x30\xec\x32\x3b\x78\x15\xeb\xf7\x1f\x60\xdd\xc2\x4b\x89\x9f\xf6\xe4\x9f\x4e\xe7\xd3\xe9\x1c\xb6\xf2\x92\xce\x15\xdb\xb2\xd5\x88\xed\xbc\x8a\xf5\x13\xde\x4e\xeb\x16\x4e\x2b\x4e\xdf\x39\xb5\xbc\x42\xc7\xff\x27\x5d\x77\xe2\x9d\xd4\xca\x65\x2e\xf3\xe5\x83\x9e\x0f\xf4\xcf\xfb\xfe\x40\x7c\xf7\x1e\x60\x8e\xcf\x4b\x7d\x98\xaf\x15\xe3\x32\x4d\xa5\x7b\xd2\xeb\x86\xff\x04\x00\x00\xff\xff\x1f\xaf\xbe\x5d\x34\x04\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 1076, mode: os.FileMode(420), modTime: time.Unix(1551868703, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
