// Code generated by go-bindata.
// sources:
// ../build/configs/default_config.yaml
// ../build/configs/testing_config.yaml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _goCentrifugeBuildConfigsDefault_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x49\x77\xdb\xbc\x0e\xdd\xeb\x57\xe0\x38\x9b\xf7\x16\xb1\x35\x58\xb2\xad\x5d\xc6\xaf\x83\x93\x67\x3b\x6e\xd3\x64\x47\x91\x90\xc5\x5a\x22\x15\x92\xf2\xd0\x5f\xff\x0e\x29\x29\xcd\xd0\xe1\xcb\x4a\xc7\x04\x2e\x70\x81\x0b\x20\x27\x70\x89\x39\x69\x4a\x03\x0c\x77\x58\xca\xba\x42\x61\xc0\xa0\x36\x02\x0d\x90\x0d\xe1\x42\x1b\x50\x5c\x6c\x31\x3b\x7a\x14\x85\x51\x3c\x6f\x36\x78\x8b\x66\x2f\xd5\x36\x05\xd5\x68\xcd\x89\x28\x78\x59\x7a\x0e\x8c\x0b\x04\x53\x20\xb0\x0e\x57\xb4\x96\x1a\x4c\x41\x0c\x5c\x3c\x23\x40\x45\xb8\x30\x16\xdf\xeb\x4d\x52\x0f\xe0\x04\xe6\x92\x92\xd2\xa5\xc0\xc5\x06\xa8\x14\x46\x11\x6a\x80\x30\xa6\x50\x6b\xd4\x20\x10\x19\x18\x09\x19\x82\x46\x03\x7b\x6e\x0a\x40\xb1\x83\x1d\x51\x9c\x64\x25\xea\xa1\x07\xbd\xbf\x85\x04\xe0\x2c\x85\x28\x8a\xdc\x37\x9a\x02\x15\x36\x55\xc7\xe0\x23\x4b\x61\x1a\x4d\xdb\xb7\x4c\x4a\xa3\x8d\x22\xf5\x02\x51\xe9\xd6\x17\xe0\x14\x06\x23\x5e\x8f\x47\x41\x38\x19\xfa\x43\x7f\x18\x8c\x0c\xad\x47\xd1\x34\xf4\xc3\x11\xaf\x73\x3d\x5a\x56\xeb\xe5\x21\xdb\x6f\x9b\xc7\x87\x87\xcb\xbc\xf9\xb1\xce\x0e\x57\x67\x2b\x5c\xdf\x5e\xcc\xe5\x8f\xe3\x31\x8e\xa7\xbb\xa5\xd8\x7c\xdd\x2d\x6e\xbe\xcf\x1f\xb6\x83\xbf\xc2\x46\x3d\xec\xd7\x3c\xb9\xba\x4d\xaa\xed\xd3\x3d\x7e\xbf\xff\x7c\x1f\x3e\x2d\x9a\x20\xf9\x56\xb3\x7f\xa2\xed\x27\x19\xac\xa3\xaa\x20\xc5\xe2\x3c\xbe\xc3\x58\x04\x2d\x6c\x5f\xae\xb3\xbe\x5a\x3d\x09\xce\x50\x18\x6e\x8e\xd7\x84\x1a\xa9\x8e\x29\x0c\x06\x6f\x5e\x56\xb8\xe1\xda\xbc\x7a\x22\x82\x16\x52\xad\xb0\x96\x9a\xbf\xf1\xaa\xc9\xd1\x4a\xe5\x7f\x59\xc9\x37\xc4\x70\x29\xdc\x9b\x6b\xe0\x0d\xe1\xe2\x97\x72\xea\xfa\xec\xc1\x4b\xd5\xb4\x09\x9e\xc0\x6d\x53\xa1\xe2\x14\x3e\x5e\x82\xcc\x9d\x82\x5e\x68\xe5\xa7\x67\xdb\xcc\x38\xe8\xbc\xce\xfb\x8e\x41\xc9\xb5\xb1\x9e\x42\x32\x7c\x2f\xb6\x5a\xc9\x1d\x77\x0f\xd2\x61\xbf\x48\xa0\x4f\xef\x5f\x28\x20\x8a\x87\x61\x18\x0f\x43\xdf\x1f\x8e\xc3\xb7\x2a\x08\xc2\xcb\xe8\xb3\x94\xf7\x73\xce\xe9\xf2\xeb\x7e\x5d\xac\xcf\x1f\x92\xc3\x67\xba\x90\xf3\x3c\x59\x2d\x1f\x3e\x5d\xd7\xfb\x3c\x50\x93\x78\x3f\x3f\x84\x8f\xab\xa8\xbe\x60\xc1\x5b\x2d\x74\x01\xa6\xc9\x30\x0c\xfc\xdf\x05\x58\x3e\xde\x9c\x4d\xff\x59\x7c\x50\xbb\xab\xc7\xf3\xd9\x9e\x6d\xe5\x17\x7a\x76\x56\x5d\x3c\x7e\xa8\x67\x78\x3c\x3e\x8e\xef\xae\xa6\x9b\x6b\x15\x15\xeb\xdb\x6f\x83\xae\x4e\x57\x9d\xea\xfb\x4a\xda\x32\x9f\xc2\xaa\x9b\xeb\xdf\xcc\xc5\xb8\x73\x9e\x13\x5b\x22\x60\x58\x97\xf2\x88\x0c\xee\x2a\xa2\x0c\x5c\x74\x52\xd3\x90\x4b\xe5\x8a\xba\xe1\x3b\x14\xaf\xca\xf9\x5e\x8e\xf0\x5b\x3d\xfa\x87\x99\xcf\xc2\xd9\x38\x9e\x04\x38\x89\xa6\xe3\x30\x99\x4d\x48\x92\x64\x13\x32\x9b\x11\x7f\xc6\x58\x42\x27\x11\x8b\xe2\x84\xfd\x41\xb9\xfe\x61\x96\x24\x3e\xf5\xa3\x19\x8b\x82\x60\x1c\x47\x24\xf7\x59\x3c\xa5\x71\x92\x24\x93\x30\x62\x33\x1a\xe6\x64\xc2\x12\xa4\x7f\xd0\xb8\x7f\x98\xe4\xd3\x78\xcc\x72\x32\x9b\xfa\x41\xc8\x26\x39\x89\x63\x3a\xf5\xa3\x2c\x23\x61\x98\xf8\x19\x65\x88\xe3\x2c\x46\xf6\x97\x69\x38\x01\x2b\xa3\x53\x23\x4f\x6b\x44\x65\xab\x91\xf3\x4d\xa3\x9c\x85\xf6\xea\xb0\x6e\x37\xde\x9a\x57\x28\x1b\x03\xfb\x02\x05\xc8\x1a\x45\xb7\xf8\x04\x52\x67\x69\x45\x6b\x01\xb4\x07\xfd\xcf\x9d\x4b\x0a\x83\xc8\xd7\x2e\xd2\xb2\xc1\x06\xdf\x84\x70\x9d\x21\xfa\x28\x68\xa1\xa4\x90\x8d\xb6\x73\x40\x51\x6b\x2e\x36\xde\x93\x75\x68\x13\x68\xd7\xb6\x76\x4d\x14\x4d\x95\xa1\xb2\x93\x64\x65\x80\x4a\x8f\xa8\x14\xda\x0e\x67\x37\x55\x7b\x3b\x33\x19\x02\x29\x4b\x49\x89\x41\x06\xc4\x80\x36\x44\x99\xa6\xf6\xc0\xfa\xdf\xb7\x8e\x29\x84\x0e\xfd\x5a\x21\x6a\x68\x6a\xb8\x58\x7c\x01\x7a\xa4\x25\xea\x96\x6a\x1b\x00\xb8\x86\x3d\xe1\x6e\xdb\xdb\x7c\x71\x87\xc2\x58\xaa\xed\xf3\x3d\xe1\x8e\xed\xcd\x5d\x0a\x81\x25\xfa\x2c\x65\x5d\x23\xe5\x39\xa7\xaf\x49\x7b\xbd\x90\x5b\x6a\x77\x58\xa2\xd5\xe8\xbe\xe0\xb4\x78\x16\x39\x10\x4a\x65\x63\x57\x93\x84\x46\x63\xbf\x71\xa4\x2d\x42\xb7\x2a\x18\x70\xe1\x7e\xa4\x8d\x36\xb2\xea\x82\x40\xce\x4b\xf4\xa0\xbf\x6e\x67\x2d\xcc\x2d\xa9\x30\x85\x81\xbd\x68\x83\xe7\x1b\x66\x93\xe9\x81\x9f\xe3\xd2\x92\xdb\x8d\x68\x97\x14\xfc\x67\x8f\xa0\xf0\xa9\xe1\x0a\x61\xaf\x41\x2a\xe0\x35\xed\x0e\x9b\xbd\x63\xf6\x93\x12\x63\xd3\x76\x25\xf9\xaf\xad\xae\x64\xf8\x65\x35\x4f\x61\xaf\xd3\xd1\xc8\x36\xa0\x2c\xa4\x36\xe9\x2c\x1e\x27\x7d\x2b\xdd\xd9\xdd\x10\xcb\x84\x53\x9b\xec\x86\xe8\x85\xfd\x4c\x21\xf0\xfb\xbf\x77\xc6\x25\xaf\xb8\x69\x8d\xe7\xf6\x33\x85\xf1\x24\x08\xa3\xe9\xf4\x95\x44\x8d\x74\xbd\x6a\x85\x25\x7e\xf2\x32\x8a\x08\x4d\x9c\x5c\x7b\x06\x8c\xb5\x67\x9a\x40\x56\x4a\xba\x05\x22\x58\x47\x04\x8c\xe2\x9b\x0d\x2a\x64\xad\xa0\x0d\x1e\x4c\xdf\xe6\x56\xd4\x89\x6f\x55\xed\xce\x82\xad\xd4\x4b\xf4\x5a\xca\x12\x2a\x72\x00\x85\x46\xf1\x76\xa3\x6b\x14\x0c\xc8\x2b\x33\xb9\x43\xe5\x81\x35\x5c\xb5\x76\x29\x84\x1d\xeb\x5f\x43\x72\x61\x50\xed\x48\xe9\x70\x8f\xad\x40\x89\xcd\x8e\x36\x4a\xb9\x2b\xf6\xc2\xa3\x20\x1a\x32\x44\x7b\xe6\x0c\x52\xe3\x88\xf4\x00\x36\x9e\xdd\x22\x61\xc7\xe0\x92\x6b\xd7\x4d\x87\xa8\x65\xf5\x4e\x0d\x1a\x98\x04\x21\x0d\xe8\xa6\xae\xa5\x32\x60\x0e\x2e\x23\x52\x73\xfb\x8f\xcc\x61\x21\x65\x79\x46\xed\xd8\x5e\x09\x8b\xc4\x52\x30\xaa\x41\xcf\xfb\x7f\x00\x00\x00\xff\xff\x2d\xa4\xea\x9a\xbd\x09\x00\x00")

func goCentrifugeBuildConfigsDefault_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsDefault_configYaml,
		"go-centrifuge/build/configs/default_config.yaml",
	)
}

func goCentrifugeBuildConfigsDefault_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsDefault_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/default_config.yaml", size: 2493, mode: os.FileMode(420), modTime: time.Unix(1540814510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _goCentrifugeBuildConfigsTesting_configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc9\x6e\xe3\x48\x0c\x86\xef\x7a\x0a\x81\x97\x5c\xbc\xd4\xbe\xbd\xc1\x20\x98\xd3\x0c\x90\x33\xab\xc8\x8a\x05\xdb\xb2\x5a\x4b\x12\x23\xc8\xbb\x37\xe4\x38\x9d\x6b\x1a\xba\x90\x04\x7f\xfe\xa4\xea\xe3\xf9\xc0\x23\x2f\xe7\xd4\xb4\x2d\x96\x72\x59\xfa\x79\x5a\xe3\xb6\x3d\x63\xd7\xa7\xf6\x16\xb6\xed\x91\xaf\xa9\x7d\x78\x07\x24\x1a\x79\x9a\x20\x41\x88\x59\x60\x70\x36\xe8\x62\x8c\x31\x58\x2a\x79\x99\x8d\xd3\x2c\x48\x17\x6b\x91\xa5\x91\x0a\x2d\x6c\xa0\x8c\xd7\x61\xbe\x40\x7a\x87\xd2\x0d\x07\x1e\x21\x01\xf2\xb4\x95\x2a\x6c\xcb\x3c\xae\x0d\xb7\xf2\xcc\x6f\x33\x24\x28\xde\xc7\x1a\xb4\x8f\xe4\xbd\xa0\xa8\x4a\x2d\x92\x88\x0c\x86\xaa\x25\x59\x14\x48\x25\x54\x85\x22\x2b\x94\x46\x48\xed\x05\x69\xa7\x45\xd5\xa1\x88\x12\xf0\xcf\xbc\x01\x47\x3c\x4f\xab\x6d\xf7\x02\x09\xb4\x2b\xd2\x05\xf6\x3a\xd7\x18\x44\x65\x6f\xb3\xf0\xca\xd7\x10\x05\x7a\x89\x04\x1f\x1b\x38\x52\x85\x04\xd3\x6d\x61\xb8\xa5\xdf\x43\xe8\x78\xe2\x1e\x92\x56\x1b\xe8\x21\x29\xa7\xa4\x31\x1b\x18\x20\xc9\x0d\x8c\x90\xc2\x06\x26\x3c\xad\x07\x10\xcb\xcc\xd2\xb1\x2e\x31\xc8\x68\x0c\x49\x2e\xa8\x72\xc8\xca\xb3\x61\xc7\x22\xdb\x5c\xb3\xd1\x99\x85\xf6\x0e\x2d\x85\x10\x62\x45\xe7\x23\xaa\x20\x95\x5a\x17\x39\x63\x59\x7f\x45\x91\x2a\xe4\x20\xad\xb5\x36\xa3\x64\x24\x5f\x90\xa3\x70\x82\x43\x30\x0a\x6b\xc1\xa0\xad\x23\xe1\x8c\xb5\x99\x22\x5a\x6f\x55\x46\x57\x4b\x11\x51\x71\x5d\x27\x75\x04\x09\x8c\x65\xe1\x04\xba\x2d\x29\xe4\xad\xd1\x39\x6c\xa3\x52\x75\x6b\x4c\x50\xd1\xc4\x48\xda\x13\x6c\xe0\x85\xc7\xa9\xbb\xac\x47\x7e\x3c\xdc\x1f\x7e\xc0\x69\x7a\xbd\x8c\x94\xda\x87\xaf\xd2\x9d\x81\xd4\xfe\x14\x81\xa6\xe9\x88\xfb\xb9\x9b\xaf\xff\x50\x6a\x41\xbc\x09\xf9\xfd\x41\xd3\xfc\x5a\x78\xe1\x15\xba\x7e\x39\x3f\x5d\xc6\x23\x8f\x53\x6a\x55\xd3\xb6\xaf\xb7\xe4\x09\xbb\xf9\xff\xee\xcc\xff\xfe\x97\x5a\xd9\x34\x47\xbe\xde\x08\x9d\xba\xe7\xbe\xeb\x9f\x3f\x61\x1d\x96\x7c\xea\xca\xe3\x4a\xe9\x6e\xb7\xdf\xed\xf6\x79\xe9\x4e\xb4\x1f\x79\xba\x2c\x63\xe1\x69\x7f\xef\x7e\xe4\xeb\x6e\x58\xf2\x6e\xe0\xf3\xa7\x6e\xec\x5e\x70\xe6\x9f\x09\x8f\xab\xf8\x26\xe4\xf9\x80\xcb\x7c\xf8\xa1\xf7\xbd\xfb\x2f\x8d\xbf\x54\x5f\xae\xbf\x03\x00\x00\xff\xff\xb0\x1c\xaf\x3f\xaa\x03\x00\x00")

func goCentrifugeBuildConfigsTesting_configYamlBytes() ([]byte, error) {
	return bindataRead(
		_goCentrifugeBuildConfigsTesting_configYaml,
		"go-centrifuge/build/configs/testing_config.yaml",
	)
}

func goCentrifugeBuildConfigsTesting_configYaml() (*asset, error) {
	bytes, err := goCentrifugeBuildConfigsTesting_configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-centrifuge/build/configs/testing_config.yaml", size: 938, mode: os.FileMode(420), modTime: time.Unix(1540808141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"go-centrifuge/build/configs/default_config.yaml": goCentrifugeBuildConfigsDefault_configYaml,
	"go-centrifuge/build/configs/testing_config.yaml": goCentrifugeBuildConfigsTesting_configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"go-centrifuge": &bintree{nil, map[string]*bintree{
		"build": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"default_config.yaml": &bintree{goCentrifugeBuildConfigsDefault_configYaml, map[string]*bintree{}},
				"testing_config.yaml": &bintree{goCentrifugeBuildConfigsTesting_configYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
