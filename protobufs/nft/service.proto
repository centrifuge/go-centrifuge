syntax = "proto3";

package nft;

option go_package = "nftpb";
option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
option java_package = "com.nft";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

// NFTService let's you mint NFTs for a document 
service NFTService {
  rpc MintNFT(NFTMintRequest) returns (NFTMintResponse) {
    option (google.api.http) = {
      post: "/token/mint"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description: "Mint an NFT from a Centrifuge Document"
    };
  }
}

message ResponseHeader {
  string transaction_id = 5;
}

message NFTMintRequest {
  // Document identifier
  string identifier = 1;
  // The contract address of the registry where the token should be minted
  string registry_address = 2;
  string deposit_address = 3;
  repeated string proof_fields = 4;
  // proof that nft is part of p2p document
  bool submit_token_proof = 5;
  // proof that role exists on p2p document
  string submit_role_proof = 6;
  // proof that nft owner can access the document if nft_grant_access is true
  bool submit_nft_owner_access_proof = 7;
  // grant nft read access to the document
  bool grant_nft_access = 8;
}

message NFTMintResponse {
  ResponseHeader header = 1;
  string token_id = 2;
}
