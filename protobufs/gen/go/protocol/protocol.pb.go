// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/protocol.proto

package protocolpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_MESSAGE_TYPE_INVALID               MessageType = 0
	MessageType_MESSAGE_TYPE_REQUEST_SIGNATURE     MessageType = 1
	MessageType_MESSAGE_TYPE_REQUEST_SIGNATURE_REP MessageType = 2
	MessageType_MESSAGE_TYPE_SEND_ANCHORED_DOC     MessageType = 3
	MessageType_MESSAGE_TYPE_SEND_ANCHORED_DOC_REP MessageType = 4
)

var MessageType_name = map[int32]string{
	0: "MESSAGE_TYPE_INVALID",
	1: "MESSAGE_TYPE_REQUEST_SIGNATURE",
	2: "MESSAGE_TYPE_REQUEST_SIGNATURE_REP",
	3: "MESSAGE_TYPE_SEND_ANCHORED_DOC",
	4: "MESSAGE_TYPE_SEND_ANCHORED_DOC_REP",
}
var MessageType_value = map[string]int32{
	"MESSAGE_TYPE_INVALID":               0,
	"MESSAGE_TYPE_REQUEST_SIGNATURE":     1,
	"MESSAGE_TYPE_REQUEST_SIGNATURE_REP": 2,
	"MESSAGE_TYPE_SEND_ANCHORED_DOC":     3,
	"MESSAGE_TYPE_SEND_ANCHORED_DOC_REP": 4,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_protocol_d8718db914298289, []int{0}
}

type P2PEnvelope struct {
	// defines what type of message it is. (if we modify centrifuge-protobufs we can use type any with typeURL here)
	Type MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.MessageType" json:"type,omitempty"`
	// serialized
	Body                 []byte   `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PEnvelope) Reset()         { *m = P2PEnvelope{} }
func (m *P2PEnvelope) String() string { return proto.CompactTextString(m) }
func (*P2PEnvelope) ProtoMessage()    {}
func (*P2PEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_protocol_d8718db914298289, []int{0}
}
func (m *P2PEnvelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PEnvelope.Unmarshal(m, b)
}
func (m *P2PEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PEnvelope.Marshal(b, m, deterministic)
}
func (dst *P2PEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PEnvelope.Merge(dst, src)
}
func (m *P2PEnvelope) XXX_Size() int {
	return xxx_messageInfo_P2PEnvelope.Size(m)
}
func (m *P2PEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_P2PEnvelope proto.InternalMessageInfo

func (m *P2PEnvelope) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_MESSAGE_TYPE_INVALID
}

func (m *P2PEnvelope) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*P2PEnvelope)(nil), "protocol.P2PEnvelope")
	proto.RegisterEnum("protocol.MessageType", MessageType_name, MessageType_value)
}

func init() { proto.RegisterFile("protocol/protocol.proto", fileDescriptor_protocol_d8718db914298289) }

var fileDescriptor_protocol_d8718db914298289 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x87, 0x31, 0xf4, 0xc0, 0x0c, 0x21, 0x0e, 0x18, 0x5f, 0xc9, 0x87,
	0x8b, 0x3b, 0xc0, 0x28, 0xc0, 0x35, 0xaf, 0x2c, 0x35, 0x27, 0xbf, 0x20, 0x55, 0x48, 0x93, 0x8b,
	0xa5, 0xa4, 0xb2, 0x20, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0xcf, 0x48, 0x54, 0x0f, 0xae, 0xcf,
	0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x35, 0xa4, 0xb2, 0x20, 0x35, 0x08, 0xac, 0x44, 0x48, 0x88,
	0x8b, 0x25, 0x29, 0x3f, 0xa5, 0x52, 0x82, 0x49, 0x81, 0x51, 0x83, 0x27, 0x08, 0xcc, 0xd6, 0xda,
	0xcf, 0xc8, 0xc5, 0x8d, 0xa4, 0x52, 0x48, 0x82, 0x4b, 0xc4, 0xd7, 0x35, 0x38, 0xd8, 0xd1, 0xdd,
	0x35, 0x3e, 0x24, 0x32, 0xc0, 0x35, 0xde, 0xd3, 0x2f, 0xcc, 0xd1, 0xc7, 0xd3, 0x45, 0x80, 0x41,
	0x48, 0x89, 0x4b, 0x0e, 0x45, 0x26, 0xc8, 0x35, 0x30, 0xd4, 0x35, 0x38, 0x24, 0x3e, 0xd8, 0xd3,
	0xdd, 0xcf, 0x31, 0x24, 0x34, 0xc8, 0x55, 0x80, 0x51, 0x48, 0x8d, 0x4b, 0x09, 0xbf, 0x9a, 0xf8,
	0x20, 0xd7, 0x00, 0x01, 0x26, 0x0c, 0xb3, 0x82, 0x5d, 0xfd, 0x5c, 0xe2, 0x1d, 0xfd, 0x9c, 0x3d,
	0xfc, 0x83, 0x5c, 0x5d, 0xe2, 0x5d, 0xfc, 0x9d, 0x05, 0x98, 0x31, 0xcc, 0xc2, 0x50, 0x03, 0x36,
	0x8b, 0xc5, 0x49, 0x9b, 0x8b, 0x27, 0x39, 0x3f, 0x17, 0xee, 0x6f, 0x27, 0xde, 0x00, 0x28, 0x0b,
	0x4c, 0x07, 0x30, 0x46, 0x71, 0xc1, 0xa4, 0x0a, 0x92, 0x92, 0xd8, 0xc0, 0x6c, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x89, 0x3c, 0x47, 0xb4, 0x68, 0x01, 0x00, 0x00,
}
