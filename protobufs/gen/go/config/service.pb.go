// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config/service.proto

package configpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import account "github.com/centrifuge/go-centrifuge/protobufs/gen/go/account"
import duration "github.com/golang/protobuf/ptypes/duration"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConfigData struct {
	StoragePath               string               `protobuf:"bytes,1,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	P2PPort                   int32                `protobuf:"varint,2,opt,name=p2p_port,json=p2pPort,proto3" json:"p2p_port,omitempty"`
	P2PExternalIp             string               `protobuf:"bytes,3,opt,name=p2p_external_ip,json=p2pExternalIp,proto3" json:"p2p_external_ip,omitempty"`
	P2PConnectionTimeout      *duration.Duration   `protobuf:"bytes,4,opt,name=p2p_connection_timeout,json=p2pConnectionTimeout,proto3" json:"p2p_connection_timeout,omitempty"`
	ServerPort                int32                `protobuf:"varint,5,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	ServerAddress             string               `protobuf:"bytes,6,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	NumWorkers                int32                `protobuf:"varint,7,opt,name=num_workers,json=numWorkers,proto3" json:"num_workers,omitempty"`
	WorkerWaitTimeMs          int32                `protobuf:"varint,8,opt,name=worker_wait_time_ms,json=workerWaitTimeMs,proto3" json:"worker_wait_time_ms,omitempty"`
	EthNodeUrl                string               `protobuf:"bytes,9,opt,name=eth_node_url,json=ethNodeUrl,proto3" json:"eth_node_url,omitempty"`
	EthContextReadWaitTimeout *duration.Duration   `protobuf:"bytes,10,opt,name=eth_context_read_wait_timeout,json=ethContextReadWaitTimeout,proto3" json:"eth_context_read_wait_timeout,omitempty"`
	EthContextWaitTimeout     *duration.Duration   `protobuf:"bytes,11,opt,name=eth_context_wait_timeout,json=ethContextWaitTimeout,proto3" json:"eth_context_wait_timeout,omitempty"`
	EthIntervalRetry          *duration.Duration   `protobuf:"bytes,12,opt,name=eth_interval_retry,json=ethIntervalRetry,proto3" json:"eth_interval_retry,omitempty"`
	EthMaxRetries             uint32               `protobuf:"varint,13,opt,name=eth_max_retries,json=ethMaxRetries,proto3" json:"eth_max_retries,omitempty"`
	EthGasPrice               uint64               `protobuf:"varint,14,opt,name=eth_gas_price,json=ethGasPrice,proto3" json:"eth_gas_price,omitempty"`
	EthGasLimit               uint64               `protobuf:"varint,15,opt,name=eth_gas_limit,json=ethGasLimit,proto3" json:"eth_gas_limit,omitempty"`
	TxPoolEnabled             bool                 `protobuf:"varint,16,opt,name=tx_pool_enabled,json=txPoolEnabled,proto3" json:"tx_pool_enabled,omitempty"`
	Network                   string               `protobuf:"bytes,17,opt,name=network,proto3" json:"network,omitempty"`
	BootstrapPeers            []string             `protobuf:"bytes,18,rep,name=bootstrap_peers,json=bootstrapPeers,proto3" json:"bootstrap_peers,omitempty"`
	NetworkId                 uint32               `protobuf:"varint,19,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	MainIdentity              *account.AccountData `protobuf:"bytes,20,opt,name=main_identity,json=mainIdentity,proto3" json:"main_identity,omitempty"`
	SmartContractAddresses    map[string]string    `protobuf:"bytes,21,rep,name=smart_contract_addresses,json=smartContractAddresses,proto3" json:"smart_contract_addresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PprofEnabled              bool                 `protobuf:"varint,22,opt,name=pprof_enabled,json=pprofEnabled,proto3" json:"pprof_enabled,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}             `json:"-"`
	XXX_unrecognized          []byte               `json:"-"`
	XXX_sizecache             int32                `json:"-"`
}

func (m *ConfigData) Reset()         { *m = ConfigData{} }
func (m *ConfigData) String() string { return proto.CompactTextString(m) }
func (*ConfigData) ProtoMessage()    {}
func (*ConfigData) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_347685df747205e5, []int{0}
}
func (m *ConfigData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigData.Unmarshal(m, b)
}
func (m *ConfigData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigData.Marshal(b, m, deterministic)
}
func (dst *ConfigData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigData.Merge(dst, src)
}
func (m *ConfigData) XXX_Size() int {
	return xxx_messageInfo_ConfigData.Size(m)
}
func (m *ConfigData) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigData.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigData proto.InternalMessageInfo

func (m *ConfigData) GetStoragePath() string {
	if m != nil {
		return m.StoragePath
	}
	return ""
}

func (m *ConfigData) GetP2PPort() int32 {
	if m != nil {
		return m.P2PPort
	}
	return 0
}

func (m *ConfigData) GetP2PExternalIp() string {
	if m != nil {
		return m.P2PExternalIp
	}
	return ""
}

func (m *ConfigData) GetP2PConnectionTimeout() *duration.Duration {
	if m != nil {
		return m.P2PConnectionTimeout
	}
	return nil
}

func (m *ConfigData) GetServerPort() int32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *ConfigData) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

func (m *ConfigData) GetNumWorkers() int32 {
	if m != nil {
		return m.NumWorkers
	}
	return 0
}

func (m *ConfigData) GetWorkerWaitTimeMs() int32 {
	if m != nil {
		return m.WorkerWaitTimeMs
	}
	return 0
}

func (m *ConfigData) GetEthNodeUrl() string {
	if m != nil {
		return m.EthNodeUrl
	}
	return ""
}

func (m *ConfigData) GetEthContextReadWaitTimeout() *duration.Duration {
	if m != nil {
		return m.EthContextReadWaitTimeout
	}
	return nil
}

func (m *ConfigData) GetEthContextWaitTimeout() *duration.Duration {
	if m != nil {
		return m.EthContextWaitTimeout
	}
	return nil
}

func (m *ConfigData) GetEthIntervalRetry() *duration.Duration {
	if m != nil {
		return m.EthIntervalRetry
	}
	return nil
}

func (m *ConfigData) GetEthMaxRetries() uint32 {
	if m != nil {
		return m.EthMaxRetries
	}
	return 0
}

func (m *ConfigData) GetEthGasPrice() uint64 {
	if m != nil {
		return m.EthGasPrice
	}
	return 0
}

func (m *ConfigData) GetEthGasLimit() uint64 {
	if m != nil {
		return m.EthGasLimit
	}
	return 0
}

func (m *ConfigData) GetTxPoolEnabled() bool {
	if m != nil {
		return m.TxPoolEnabled
	}
	return false
}

func (m *ConfigData) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *ConfigData) GetBootstrapPeers() []string {
	if m != nil {
		return m.BootstrapPeers
	}
	return nil
}

func (m *ConfigData) GetNetworkId() uint32 {
	if m != nil {
		return m.NetworkId
	}
	return 0
}

func (m *ConfigData) GetMainIdentity() *account.AccountData {
	if m != nil {
		return m.MainIdentity
	}
	return nil
}

func (m *ConfigData) GetSmartContractAddresses() map[string]string {
	if m != nil {
		return m.SmartContractAddresses
	}
	return nil
}

func (m *ConfigData) GetPprofEnabled() bool {
	if m != nil {
		return m.PprofEnabled
	}
	return false
}

func init() {
	proto.RegisterType((*ConfigData)(nil), "config.ConfigData")
	proto.RegisterMapType((map[string]string)(nil), "config.ConfigData.SmartContractAddressesEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigServiceClient interface {
	GetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConfigData, error)
}

type configServiceClient struct {
	cc *grpc.ClientConn
}

func NewConfigServiceClient(cc *grpc.ClientConn) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) GetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConfigData, error) {
	out := new(ConfigData)
	err := c.cc.Invoke(ctx, "/config.ConfigService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
type ConfigServiceServer interface {
	GetConfig(context.Context, *empty.Empty) (*ConfigData, error)
}

func RegisterConfigServiceServer(s *grpc.Server, srv ConfigServiceServer) {
	s.RegisterService(&_ConfigService_serviceDesc, srv)
}

func _ConfigService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _ConfigService_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/service.proto",
}

func init() { proto.RegisterFile("config/service.proto", fileDescriptor_service_347685df747205e5) }

var fileDescriptor_service_347685df747205e5 = []byte{
	// 801 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xdd, 0x6e, 0x23, 0x35,
	0x14, 0xd6, 0xb4, 0xdb, 0x9f, 0x38, 0x49, 0xdb, 0xf5, 0xa6, 0x95, 0x9b, 0x65, 0x61, 0xe8, 0x8a,
	0x25, 0x17, 0x74, 0x22, 0x85, 0x1b, 0xe0, 0xae, 0xdb, 0xad, 0xaa, 0x48, 0x2c, 0x44, 0xb3, 0xa0,
	0x95, 0x00, 0xc9, 0x72, 0x66, 0x4e, 0x33, 0xa3, 0x9d, 0xb1, 0x2d, 0xcf, 0x49, 0x9b, 0xdc, 0x72,
	0xc1, 0x03, 0xc0, 0xa3, 0xf1, 0x0a, 0x3c, 0x08, 0xf2, 0x4f, 0xda, 0x94, 0xa2, 0xed, 0xd5, 0x8c,
	0xbf, 0xef, 0x7c, 0xdf, 0x39, 0x3e, 0xb6, 0x0f, 0xe9, 0x65, 0x4a, 0x5e, 0x95, 0xb3, 0x61, 0x03,
	0xe6, 0xba, 0xcc, 0x20, 0xd1, 0x46, 0xa1, 0xa2, 0xdb, 0x1e, 0xed, 0x1f, 0x8a, 0x2c, 0x53, 0x73,
	0x89, 0xf7, 0xe9, 0xfe, 0x27, 0x33, 0xa5, 0x66, 0x15, 0x0c, 0x85, 0x2e, 0x87, 0x42, 0x4a, 0x85,
	0x02, 0x4b, 0x25, 0x9b, 0xc0, 0x7e, 0x1a, 0x58, 0xb7, 0x9a, 0xce, 0xaf, 0x86, 0xf9, 0xdc, 0xb8,
	0x80, 0xc0, 0x3f, 0xff, 0x2f, 0x0f, 0xb5, 0xc6, 0x65, 0x20, 0xbf, 0x72, 0x9f, 0xec, 0x74, 0x06,
	0xf2, 0xb4, 0xb9, 0x11, 0xb3, 0x19, 0x98, 0xa1, 0xd2, 0xce, 0xfe, 0x61, 0xaa, 0x93, 0x3f, 0x5a,
	0x84, 0x9c, 0xbb, 0x52, 0xdf, 0x08, 0x14, 0xf4, 0x73, 0xd2, 0x69, 0x50, 0x19, 0x31, 0x03, 0xae,
	0x05, 0x16, 0x2c, 0x8a, 0xa3, 0x41, 0x2b, 0x6d, 0x07, 0x6c, 0x22, 0xb0, 0xa0, 0xc7, 0x64, 0x57,
	0x8f, 0x34, 0xd7, 0xca, 0x20, 0xdb, 0x88, 0xa3, 0xc1, 0x56, 0xba, 0xa3, 0x47, 0x7a, 0xa2, 0x0c,
	0xd2, 0x57, 0x64, 0xdf, 0x52, 0xb0, 0x40, 0x30, 0x52, 0x54, 0xbc, 0xd4, 0x6c, 0xd3, 0x19, 0x74,
	0xf5, 0x48, 0x5f, 0x04, 0x74, 0xac, 0xe9, 0x8f, 0xe4, 0xc8, 0xc6, 0x65, 0x4a, 0x4a, 0xc8, 0x6c,
	0x35, 0x1c, 0xcb, 0x1a, 0xd4, 0x1c, 0xd9, 0x93, 0x38, 0x1a, 0xb4, 0x47, 0xc7, 0x89, 0xdf, 0x60,
	0xb2, 0xda, 0x60, 0xf2, 0x26, 0x34, 0x20, 0xed, 0xe9, 0x91, 0x3e, 0xbf, 0xd5, 0xfd, 0xe4, 0x65,
	0xf4, 0x33, 0xd2, 0xb6, 0xfd, 0x05, 0xe3, 0xcb, 0xda, 0x72, 0x65, 0x11, 0x0f, 0xb9, 0xca, 0xbe,
	0x20, 0x7b, 0x21, 0x40, 0xe4, 0xb9, 0x81, 0xa6, 0x61, 0xdb, 0xbe, 0x30, 0x8f, 0x9e, 0x79, 0xd0,
	0xfa, 0xc8, 0x79, 0xcd, 0x6f, 0x94, 0xf9, 0x00, 0xa6, 0x61, 0x3b, 0xde, 0x47, 0xce, 0xeb, 0xf7,
	0x1e, 0xa1, 0xa7, 0xe4, 0x99, 0x27, 0xf9, 0x8d, 0x28, 0xd1, 0x95, 0xcd, 0xeb, 0x86, 0xed, 0xba,
	0xc0, 0x03, 0x4f, 0xbd, 0x17, 0x25, 0xda, 0xc2, 0xde, 0x36, 0x34, 0x26, 0x1d, 0xc0, 0x82, 0x4b,
	0x95, 0x03, 0x9f, 0x9b, 0x8a, 0xb5, 0x5c, 0x52, 0x02, 0x58, 0xfc, 0xa0, 0x72, 0xf8, 0xd9, 0x54,
	0xf4, 0x57, 0xf2, 0xc2, 0x46, 0x64, 0x4a, 0x22, 0x2c, 0x90, 0x1b, 0x10, 0xf9, 0x9d, 0xb5, 0xed,
	0x08, 0x79, 0xac, 0x23, 0xc7, 0x80, 0xc5, 0xb9, 0x97, 0xa7, 0x20, 0xf2, 0x55, 0x76, 0xdb, 0x96,
	0x94, 0xb0, 0x75, 0xf3, 0x7b, 0xbe, 0xed, 0xc7, 0x7c, 0x0f, 0xef, 0x7c, 0xd7, 0x3d, 0x2f, 0x09,
	0xb5, 0x9e, 0xa5, 0x44, 0x30, 0xd7, 0xa2, 0xe2, 0x06, 0xd0, 0x2c, 0x59, 0xe7, 0x31, 0xb7, 0x03,
	0xc0, 0x62, 0x1c, 0x34, 0xa9, 0x95, 0xd8, 0xcb, 0x62, 0x8d, 0x6a, 0xb1, 0x70, 0x1e, 0x25, 0x34,
	0xac, 0x1b, 0x47, 0x83, 0x6e, 0xda, 0x05, 0x2c, 0xde, 0x8a, 0x45, 0xea, 0x41, 0x7a, 0x42, 0x2c,
	0xc0, 0x67, 0xa2, 0xe1, 0xda, 0x94, 0x19, 0xb0, 0xbd, 0x38, 0x1a, 0x3c, 0x49, 0xdb, 0x80, 0xc5,
	0xa5, 0x68, 0x26, 0x16, 0x5a, 0x8f, 0xa9, 0xca, 0xba, 0x44, 0xb6, 0xbf, 0x1e, 0xf3, 0xbd, 0x85,
	0x6c, 0x3e, 0x5c, 0x70, 0xad, 0x54, 0xc5, 0x41, 0x8a, 0x69, 0x05, 0x39, 0x3b, 0x88, 0xa3, 0xc1,
	0x6e, 0xda, 0xc5, 0xc5, 0x44, 0xa9, 0xea, 0xc2, 0x83, 0x94, 0x91, 0x1d, 0x09, 0x68, 0x8f, 0x92,
	0x3d, 0x75, 0xc7, 0xb5, 0x5a, 0xd2, 0x2f, 0xc9, 0xfe, 0x54, 0x29, 0x6c, 0xd0, 0x08, 0xcd, 0x35,
	0xd8, 0x1b, 0x42, 0xe3, 0xcd, 0x41, 0x2b, 0xdd, 0xbb, 0x85, 0x27, 0x16, 0xa5, 0x2f, 0x08, 0x09,
	0x1a, 0x5e, 0xe6, 0xec, 0x99, 0xdb, 0x55, 0x2b, 0x20, 0xe3, 0x9c, 0x7e, 0x4b, 0xba, 0xb5, 0x28,
	0x25, 0x2f, 0x73, 0x90, 0x58, 0xe2, 0x92, 0xf5, 0x5c, 0xf7, 0x7a, 0x49, 0x98, 0x15, 0xc9, 0x99,
	0xff, 0xda, 0x17, 0x99, 0x76, 0x6c, 0xe8, 0x38, 0x44, 0xd2, 0x82, 0xb0, 0xa6, 0x16, 0x06, 0xdd,
	0x99, 0x1a, 0x91, 0xe1, 0xea, 0x3e, 0x43, 0xc3, 0x0e, 0xe3, 0xcd, 0x41, 0x7b, 0x94, 0x24, 0x7e,
	0xf2, 0x24, 0x77, 0xaf, 0x3a, 0x79, 0x67, 0x25, 0xe7, 0x41, 0x71, 0xb6, 0x12, 0x5c, 0x48, 0x34,
	0xcb, 0xf4, 0xa8, 0xf9, 0x5f, 0x92, 0xbe, 0x24, 0x5d, 0xad, 0x8d, 0xba, 0xba, 0x6d, 0xd6, 0x91,
	0x6b, 0x56, 0xc7, 0x81, 0xa1, 0x57, 0xfd, 0x31, 0x79, 0xfe, 0x11, 0x6f, 0x7a, 0x40, 0x36, 0x3f,
	0xc0, 0x32, 0x0c, 0x11, 0xfb, 0x4b, 0x7b, 0x64, 0xeb, 0x5a, 0x54, 0x73, 0x70, 0x93, 0xa3, 0x95,
	0xfa, 0xc5, 0x77, 0x1b, 0xdf, 0x44, 0xa3, 0x9a, 0x74, 0x7d, 0xc5, 0xef, 0xfc, 0xa0, 0xa4, 0xbf,
	0x91, 0xd6, 0x25, 0xa0, 0xc7, 0xe8, 0xd1, 0x83, 0x9b, 0x75, 0x61, 0x47, 0x5e, 0x9f, 0x3e, 0xdc,
	0xed, 0xc9, 0xcb, 0x3f, 0xcf, 0x9e, 0xf6, 0xf7, 0x2f, 0x01, 0x63, 0xfb, 0xc8, 0x62, 0xcf, 0xfc,
	0xfe, 0xf7, 0x3f, 0x7f, 0x6d, 0xb4, 0xe8, 0xce, 0xd0, 0xc7, 0xbf, 0x7e, 0x45, 0x48, 0xa6, 0xea,
	0xa0, 0x7e, 0xdd, 0x09, 0x49, 0x27, 0xd6, 0x7d, 0x12, 0xfd, 0xb2, 0xeb, 0x71, 0x3d, 0x9d, 0x6e,
	0xbb, 0x84, 0x5f, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x43, 0x76, 0xcf, 0xec, 0xe6, 0x05, 0x00,
	0x00,
}
