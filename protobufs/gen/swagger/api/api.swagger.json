{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Centrifuge OS Node API",
        "title": "Centrifuge OS Node API",
        "contact": {
            "name": "Centrifuge",
            "url": "https://github.com/centrifuge/go-centrifuge",
            "email": "hello@centrifuge.io"
        },
        "license": {
            "name": "MIT"
        },
        "version": "0.0.5"
    },
    "host": "localhost:8082",
    "basePath": "/",
    "paths": {
        "/ping": {
            "get": {
                "description": "returns node version and network",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check for Node",
                "operationId": "ping",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/health.Pong"
                        }
                    }
                }
            }
        },
        "/v1/accounts/{account_id}/sign": {
            "post": {
                "description": "Signs and returns the signature of the Payload.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Signs and returns the signature of the Payload.",
                "operationId": "account_sign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sign request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.SignRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.SignResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents": {
            "post": {
                "description": "Creates a new document and anchors it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Creates a new document and anchors it.",
                "operationId": "create_document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Document Create request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.CreateDocumentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}": {
            "get": {
                "description": "Returns the latest version of the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Returns the latest version of the document.",
                "operationId": "get_document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing document and anchors it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Updates an existing document and anchors it.",
                "operationId": "update_document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Document Update request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.CreateDocumentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}/proofs": {
            "post": {
                "description": "Generates proofs for the fields from latest version of the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Generates proofs for the fields from latest version of the document.",
                "operationId": "generate_document_proofs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Document proof request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.ProofsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.ProofsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}/versions/{version_id}": {
            "get": {
                "description": "Returns the specific version of the document.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Returns the specific version of the document.",
                "operationId": "get_document_version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Version Identifier",
                        "name": "version_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.DocumentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/documents/{document_id}/versions/{version_id}/proofs": {
            "post": {
                "description": "Generates proofs for the fields from a specific document version.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Documents"
                ],
                "summary": "Generates proofs for the fields from a specific document version.",
                "operationId": "generate_document_version_proofs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Identifier",
                        "name": "document_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Document Version Identifier",
                        "name": "version_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Document proof request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.ProofsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.ProofsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/jobs/{job_id}": {
            "get": {
                "description": "Returns the status of a given Job.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Returns the status of a given Job.",
                "operationId": "get_job_status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/jobs.StatusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/nfts/registries/{registry_address}/mint": {
            "post": {
                "description": "Mints an NFT against a document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Mints an NFT against a document.",
                "operationId": "mint_nft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT registry address in hex",
                        "name": "registry_address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Mint NFT request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.MintNFTRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.MintNFTResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/nfts/registries/{registry_address}/tokens/{token_id}/owner": {
            "get": {
                "description": "Returns the Owner of the given NFT.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Returns the Owner of the given NFT.",
                "operationId": "owner_of_nft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT token ID in hex",
                        "name": "token_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Registry address in hex",
                        "name": "registry_address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.NFTOwnerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/nfts/registries/{registry_address}/tokens/{token_id}/transfer": {
            "post": {
                "description": "Transfers given NFT to provide address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Transfers given NFT to provide address.",
                "operationId": "transfer_nft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex encoded centrifuge ID of the account for the intended API action",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT registry address in hex",
                        "name": "registry_address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT token ID in hex",
                        "name": "token_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Mint NFT request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.TransferNFTRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/coreapi.TransferNFTResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/httputils.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "byteutils.HexBytes": {
            "type": "array",
            "items": {}
        },
        "coreapi.Attribute": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "integer",
                        "decimal",
                        "string",
                        "bytes",
                        "timestamp"
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "coreapi.AttributeMap": {
            "type": "object",
            "additionalProperties": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "enum": [
                            "integer",
                            "decimal",
                            "string",
                            "bytes",
                            "timestamp"
                        ]
                    },
                    "value": {
                        "type": "string"
                    }
                }
            }
        },
        "coreapi.CreateDocumentRequest": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.AttributeMap"
                },
                "data": {
                    "type": "object"
                },
                "read_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scheme": {
                    "type": "string",
                    "enum": [
                        "generic",
                        "invoice",
                        "purchase_order",
                        "entity"
                    ]
                },
                "write_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "coreapi.DocumentResponse": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.AttributeMap"
                },
                "data": {
                    "type": "object"
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.ResponseHeader"
                },
                "scheme": {
                    "type": "string",
                    "enum": [
                        "generic",
                        "invoice",
                        "purchase_order",
                        "entity"
                    ]
                }
            }
        },
        "coreapi.MintNFTRequest": {
            "type": "object",
            "properties": {
                "deposit_address": {
                    "type": "string"
                },
                "document_id": {
                    "type": "string"
                },
                "grant_nft_access": {
                    "type": "boolean"
                },
                "proof_fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "submit_nft_owner_access_proof": {
                    "type": "boolean"
                },
                "submit_token_proof": {
                    "type": "boolean"
                }
            }
        },
        "coreapi.MintNFTResponse": {
            "type": "object",
            "properties": {
                "deposit_address": {
                    "type": "string"
                },
                "document_id": {
                    "type": "string"
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.NFTResponseHeader"
                },
                "registry_address": {
                    "type": "string"
                },
                "token_id": {
                    "type": "string"
                }
            }
        },
        "coreapi.NFT": {
            "type": "object",
            "properties": {
                "owner": {
                    "type": "string"
                },
                "registry": {
                    "type": "string"
                },
                "token_id": {
                    "type": "string"
                },
                "token_index": {
                    "type": "string"
                }
            }
        },
        "coreapi.NFTOwnerResponse": {
            "type": "object",
            "properties": {
                "owner": {
                    "type": "string"
                },
                "registry_address": {
                    "type": "string"
                },
                "token_id": {
                    "type": "string"
                }
            }
        },
        "coreapi.NFTResponseHeader": {
            "type": "object",
            "properties": {
                "job_id": {
                    "type": "string"
                }
            }
        },
        "coreapi.Proof": {
            "type": "object",
            "properties": {
                "hash": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "salt": {
                    "type": "string"
                },
                "sorted_hashes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "coreapi.ProofResponseHeader": {
            "type": "object",
            "properties": {
                "document_id": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "version_id": {
                    "type": "string"
                }
            }
        },
        "coreapi.ProofsRequest": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "coreapi.ProofsResponse": {
            "type": "object",
            "properties": {
                "field_proofs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/coreapi.Proof"
                    }
                },
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.ProofResponseHeader"
                }
            }
        },
        "coreapi.ResponseHeader": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "document_id": {
                    "type": "string"
                },
                "job_id": {
                    "type": "string"
                },
                "nfts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/coreapi.NFT"
                    }
                },
                "read_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "version_id": {
                    "type": "string"
                },
                "write_access": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "coreapi.SignRequest": {
            "type": "object",
            "properties": {
                "payload": {
                    "type": "string"
                }
            }
        },
        "coreapi.SignResponse": {
            "type": "object",
            "properties": {
                "payload": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "signer_id": {
                    "type": "string"
                }
            }
        },
        "coreapi.TransferNFTRequest": {
            "type": "object",
            "properties": {
                "to": {
                    "type": "string"
                }
            }
        },
        "coreapi.TransferNFTResponse": {
            "type": "object",
            "properties": {
                "header": {
                    "type": "object",
                    "$ref": "#/definitions/coreapi.NFTResponseHeader"
                },
                "registry_address": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                },
                "token_id": {
                    "type": "string"
                }
            }
        },
        "health.Pong": {
            "type": "object",
            "properties": {
                "network": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "httputils.HTTPError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "jobs.StatusResponse": {
            "type": "object",
            "properties": {
                "job_id": {
                    "type": "string"
                },
                "last_updated": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    }
}