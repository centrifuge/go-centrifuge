syntax = "proto3";

package document;

option go_package = "documentpb";
option java_multiple_files = true;
option java_outer_classname = "ServiceProto";
option java_package = "com.document";

import "google/protobuf/timestamp.proto";
import "precise-proofs/proofs/proto/proof.proto";

message AccessTokenParams {
  // The identity being granted access to the document
  string grantee = 4;
  // Original identifier of the document
  string document_identifier = 2;
}

message BinaryAttachment {
  string name = 1;
  //mime type of attached file
  string file_type = 2;
  // in bytes
  uint64 size = 3;
  string data = 4;
  //the md5 checksum of the original file for easier verification - optional
  string checksum = 5;
}

message PaymentDetails {
  //identifying this payment. could be a sequential number, could be a transaction hash of the crypto payment
  string id = 1;
  google.protobuf.Timestamp date_executed = 2;
  //centrifuge id of payee
  string payee = 3;
  //centrifuge id of payer
  string payer = 4;
  string amount = 5;
  string currency = 6;
  //payment reference (e.g. reference field on bank transfer)
  string reference = 7;
  string bank_name = 8;
  string bank_address = 9;
  string bank_country = 10;
  string bank_account_number = 11;
  string bank_account_currency = 12;
  string bank_account_holder_name = 13;
  string bank_key = 14;
  //the ID of the chain to use in URI format. e.g. "ethereum://42/<tokenaddress>"
  string crypto_chain_uri = 15;
  //the transaction in which the payment happened
  string crypto_transaction_id = 16;
  //from address
  string crypto_from = 17;
  //to address
  string crypto_to = 18;
}

message RequestHeader {
  repeated string read_access = 1;
  repeated string write_access = 2;
}

message Signature {
  string identity = 1;
  string key = 2; // can be blank if the signature is missing
  bool valid = 3; // OR: status = valid or missing
}

message NFT {
  string registry = 1;
  // read owner from Ethereum and empty when used in POST/PUT
  string owner = 3;
  string token_id = 2;
  // index of the token in the registry
  string token_index = 4;
}

message AccessToken {
  string identifier = 1;
  string granter = 2;
  string grantee = 3;
  string document_identifier = 4;
}

message ResponseHeader {
  string document_id = 1;
  string version_id = 2;
  string author = 3;
  string created_at = 4;
  repeated string read_access = 5;
  repeated string write_access = 6;
  string job_id = 7;
  repeated NFT nfts = 8;
}

// Attribute represents a custom attribute
message Attribute {
  // this is the sha256 hash of the label of the attribute, is not allowed to be updated by the client
  string key = 1;
  string type = 2;
  string value = 3;
}
